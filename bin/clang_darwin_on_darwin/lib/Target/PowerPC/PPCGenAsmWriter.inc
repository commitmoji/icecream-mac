/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void PPCInstPrinter::printInstruction(const MCInst *MI, raw_ostream &O) {
  static const char AsmStrs[] = {
  /* 0 */ '#', 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 9, 0,
  /* 16 */ 'x', 'v', 'c', 'm', 'p', 'n', 'e', 'd', 'p', 32, 32, 0,
  /* 28 */ 'x', 'v', 'c', 'm', 'p', 'n', 'e', 's', 'p', 32, 32, 0,
  /* 40 */ 'b', 'd', 'z', 'l', 'a', '+', 32, 0,
  /* 48 */ 'b', 'd', 'n', 'z', 'l', 'a', '+', 32, 0,
  /* 57 */ 'b', 'd', 'z', 'a', '+', 32, 0,
  /* 64 */ 'b', 'd', 'n', 'z', 'a', '+', 32, 0,
  /* 72 */ 'b', 'd', 'z', 'l', '+', 32, 0,
  /* 79 */ 'b', 'd', 'n', 'z', 'l', '+', 32, 0,
  /* 87 */ 'b', 'd', 'z', '+', 32, 0,
  /* 93 */ 'b', 'd', 'n', 'z', '+', 32, 0,
  /* 100 */ 'b', 'c', 'l', 32, '2', '0', ',', 32, '3', '1', ',', 32, 0,
  /* 113 */ 'b', 'c', 't', 'r', 'l', 10, 9, 'l', 'd', 32, '2', ',', 32, 0,
  /* 127 */ 'b', 'c', 32, '1', '2', ',', 32, 0,
  /* 135 */ 'b', 'c', 'l', 32, '1', '2', ',', 32, 0,
  /* 144 */ 'b', 'c', 'l', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 155 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 167 */ 'b', 'c', 'l', 'r', 32, '1', '2', ',', 32, 0,
  /* 177 */ 'b', 'c', 'c', 't', 'r', 32, '1', '2', ',', 32, 0,
  /* 188 */ 'b', 'c', 32, '4', ',', 32, 0,
  /* 195 */ 'b', 'c', 'l', 32, '4', ',', 32, 0,
  /* 203 */ 'b', 'c', 'l', 'r', 'l', 32, '4', ',', 32, 0,
  /* 213 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '4', ',', 32, 0,
  /* 224 */ 'b', 'c', 'l', 'r', 32, '4', ',', 32, 0,
  /* 233 */ 'b', 'c', 'c', 't', 'r', 32, '4', ',', 32, 0,
  /* 243 */ 'm', 't', 's', 'p', 'r', 32, '2', '5', '6', ',', 32, 0,
  /* 255 */ 'b', 'd', 'z', 'l', 'a', '-', 32, 0,
  /* 263 */ 'b', 'd', 'n', 'z', 'l', 'a', '-', 32, 0,
  /* 272 */ 'b', 'd', 'z', 'a', '-', 32, 0,
  /* 279 */ 'b', 'd', 'n', 'z', 'a', '-', 32, 0,
  /* 287 */ 'b', 'd', 'z', 'l', '-', 32, 0,
  /* 294 */ 'b', 'd', 'n', 'z', 'l', '-', 32, 0,
  /* 302 */ 'b', 'd', 'z', '-', 32, 0,
  /* 308 */ 'b', 'd', 'n', 'z', '-', 32, 0,
  /* 315 */ 'v', 'c', 'm', 'p', 'n', 'e', 'b', '.', 32, 0,
  /* 325 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', '.', 32, 0,
  /* 336 */ 'e', 'x', 't', 's', 'b', '.', 32, 0,
  /* 344 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', '.', 32, 0,
  /* 355 */ 'f', 's', 'u', 'b', '.', 32, 0,
  /* 362 */ 'f', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 370 */ 'f', 'n', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 379 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', '.', 32, 0,
  /* 390 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'b', '.', 32, 0,
  /* 401 */ 'a', 'd', 'd', 'c', '.', 32, 0,
  /* 408 */ 'a', 'n', 'd', 'c', '.', 32, 0,
  /* 415 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', '.', 32, 0,
  /* 426 */ 's', 'u', 'b', 'f', 'c', '.', 32, 0,
  /* 434 */ 's', 'u', 'b', 'i', 'c', '.', 32, 0,
  /* 442 */ 'a', 'd', 'd', 'i', 'c', '.', 32, 0,
  /* 450 */ 'r', 'l', 'd', 'i', 'c', '.', 32, 0,
  /* 458 */ 'b', 'c', 'd', 't', 'r', 'u', 'n', 'c', '.', 32, 0,
  /* 469 */ 'b', 'c', 'd', 'u', 't', 'r', 'u', 'n', 'c', '.', 32, 0,
  /* 481 */ 'o', 'r', 'c', '.', 32, 0,
  /* 487 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', '.', 32, 0,
  /* 498 */ 's', 'r', 'a', 'd', '.', 32, 0,
  /* 505 */ 'f', 'a', 'd', 'd', '.', 32, 0,
  /* 512 */ 'f', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 520 */ 'f', 'n', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 529 */ 'm', 'u', 'l', 'h', 'd', '.', 32, 0,
  /* 537 */ 'f', 'c', 'f', 'i', 'd', '.', 32, 0,
  /* 545 */ 'f', 'c', 't', 'i', 'd', '.', 32, 0,
  /* 553 */ 'm', 'u', 'l', 'l', 'd', '.', 32, 0,
  /* 561 */ 's', 'l', 'd', '.', 32, 0,
  /* 567 */ 'n', 'a', 'n', 'd', '.', 32, 0,
  /* 574 */ 't', 'e', 'n', 'd', '.', 32, 0,
  /* 581 */ 's', 'r', 'd', '.', 32, 0,
  /* 587 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', '.', 32, 0,
  /* 598 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', '.', 32, 0,
  /* 609 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', '.', 32, 0,
  /* 620 */ 'd', 'i', 'v', 'd', '.', 32, 0,
  /* 627 */ 'c', 'n', 't', 'l', 'z', 'd', '.', 32, 0,
  /* 636 */ 'c', 'n', 't', 't', 'z', 'd', '.', 32, 0,
  /* 645 */ 'a', 'd', 'd', 'e', '.', 32, 0,
  /* 652 */ 'd', 'i', 'v', 'd', 'e', '.', 32, 0,
  /* 660 */ 's', 'u', 'b', 'f', 'e', '.', 32, 0,
  /* 668 */ 'a', 'd', 'd', 'm', 'e', '.', 32, 0,
  /* 676 */ 's', 'u', 'b', 'f', 'm', 'e', '.', 32, 0,
  /* 685 */ 'f', 'r', 'e', '.', 32, 0,
  /* 691 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', 32, 0,
  /* 701 */ 'p', 'a', 's', 't', 'e', '.', 32, 0,
  /* 709 */ 'd', 'i', 'v', 'w', 'e', '.', 32, 0,
  /* 717 */ 'a', 'd', 'd', 'z', 'e', '.', 32, 0,
  /* 725 */ 's', 'u', 'b', 'f', 'z', 'e', '.', 32, 0,
  /* 734 */ 's', 'u', 'b', 'f', '.', 32, 0,
  /* 741 */ 'm', 't', 'f', 's', 'f', '.', 32, 0,
  /* 749 */ 'f', 'n', 'e', 'g', '.', 32, 0,
  /* 756 */ 'v', 'c', 'm', 'p', 'n', 'e', 'h', '.', 32, 0,
  /* 766 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', '.', 32, 0,
  /* 777 */ 'e', 'x', 't', 's', 'h', '.', 32, 0,
  /* 785 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', '.', 32, 0,
  /* 796 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', '.', 32, 0,
  /* 807 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'h', '.', 32, 0,
  /* 818 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', 'i', '.', 32, 0,
  /* 830 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', 'i', '.', 32, 0,
  /* 842 */ 's', 'r', 'a', 'd', 'i', '.', 32, 0,
  /* 850 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', '.', 32, 0,
  /* 861 */ 'e', 'x', 't', 'l', 'd', 'i', '.', 32, 0,
  /* 870 */ 'a', 'n', 'd', 'i', '.', 32, 0,
  /* 877 */ 'c', 'l', 'r', 'r', 'd', 'i', '.', 32, 0,
  /* 886 */ 'i', 'n', 's', 'r', 'd', 'i', '.', 32, 0,
  /* 895 */ 'r', 'o', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 904 */ 'e', 'x', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 913 */ 'm', 't', 'f', 's', 'f', 'i', '.', 32, 0,
  /* 922 */ 'r', 'l', 'd', 'i', 'm', 'i', '.', 32, 0,
  /* 931 */ 'r', 'l', 'w', 'i', 'm', 'i', '.', 32, 0,
  /* 940 */ 's', 'r', 'a', 'w', 'i', '.', 32, 0,
  /* 948 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 959 */ 'i', 'n', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 968 */ 'e', 'x', 't', 'l', 'w', 'i', '.', 32, 0,
  /* 977 */ 'c', 'l', 'r', 'r', 'w', 'i', '.', 32, 0,
  /* 986 */ 'i', 'n', 's', 'r', 'w', 'i', '.', 32, 0,
  /* 995 */ 'r', 'o', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 1004 */ 'e', 'x', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 1013 */ 'r', 'l', 'd', 'c', 'l', '.', 32, 0,
  /* 1021 */ 'r', 'l', 'd', 'i', 'c', 'l', '.', 32, 0,
  /* 1030 */ 'f', 's', 'e', 'l', '.', 32, 0,
  /* 1037 */ 'f', 'm', 'u', 'l', '.', 32, 0,
  /* 1044 */ 't', 'r', 'e', 'c', 'l', 'a', 'i', 'm', '.', 32, 0,
  /* 1055 */ 'f', 'r', 'i', 'm', '.', 32, 0,
  /* 1062 */ 'r', 'l', 'w', 'i', 'n', 'm', '.', 32, 0,
  /* 1071 */ 'r', 'l', 'w', 'n', 'm', '.', 32, 0,
  /* 1079 */ 'b', 'c', 'd', 'c', 'f', 'n', '.', 32, 0,
  /* 1088 */ 'b', 'c', 'd', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 1099 */ 'f', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 1108 */ 'b', 'c', 'd', 's', 'e', 't', 's', 'g', 'n', '.', 32, 0,
  /* 1120 */ 't', 'b', 'e', 'g', 'i', 'n', '.', 32, 0,
  /* 1129 */ 'f', 'r', 'i', 'n', '.', 32, 0,
  /* 1136 */ 'b', 'c', 'd', 'c', 't', 'n', '.', 32, 0,
  /* 1145 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', '.', 32, 0,
  /* 1157 */ 'x', 'v', 'c', 'm', 'p', 'n', 'e', 'd', 'p', '.', 32, 0,
  /* 1169 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', '.', 32, 0,
  /* 1181 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', '.', 32, 0,
  /* 1193 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', '.', 32, 0,
  /* 1203 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', '.', 32, 0,
  /* 1214 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', '.', 32, 0,
  /* 1225 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', '.', 32, 0,
  /* 1236 */ 'f', 'r', 'i', 'p', '.', 32, 0,
  /* 1243 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', '.', 32, 0,
  /* 1255 */ 'x', 'v', 'c', 'm', 'p', 'n', 'e', 's', 'p', '.', 32, 0,
  /* 1267 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', '.', 32, 0,
  /* 1279 */ 'f', 'r', 's', 'p', '.', 32, 0,
  /* 1286 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', '.', 32, 0,
  /* 1298 */ 'b', 'c', 'd', 'c', 'f', 's', 'q', '.', 32, 0,
  /* 1308 */ 'b', 'c', 'd', 'c', 't', 's', 'q', '.', 32, 0,
  /* 1318 */ 'r', 'l', 'd', 'c', 'r', '.', 32, 0,
  /* 1326 */ 'r', 'l', 'd', 'i', 'c', 'r', '.', 32, 0,
  /* 1335 */ 'f', 'm', 'r', '.', 32, 0,
  /* 1341 */ 'n', 'o', 'r', '.', 32, 0,
  /* 1347 */ 'x', 'o', 'r', '.', 32, 0,
  /* 1353 */ 'b', 'c', 'd', 's', 'r', '.', 32, 0,
  /* 1361 */ 't', 's', 'r', '.', 32, 0,
  /* 1367 */ 'f', 'a', 'b', 's', '.', 32, 0,
  /* 1374 */ 'f', 'n', 'a', 'b', 's', '.', 32, 0,
  /* 1382 */ 'f', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1390 */ 'f', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1399 */ 'f', 'n', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1409 */ 'b', 'c', 'd', 's', '.', 32, 0,
  /* 1416 */ 'f', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1424 */ 'f', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1433 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1443 */ 'f', 'c', 'f', 'i', 'd', 's', '.', 32, 0,
  /* 1452 */ 'f', 'r', 'e', 's', '.', 32, 0,
  /* 1459 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 's', '.', 32, 0,
  /* 1470 */ 'm', 'f', 'f', 's', '.', 32, 0,
  /* 1477 */ 'a', 'n', 'd', 'i', 's', '.', 32, 0,
  /* 1485 */ 'f', 'm', 'u', 'l', 's', '.', 32, 0,
  /* 1493 */ 'f', 's', 'q', 'r', 't', 's', '.', 32, 0,
  /* 1502 */ 'b', 'c', 'd', 'u', 's', '.', 32, 0,
  /* 1510 */ 'f', 'c', 'f', 'i', 'd', 'u', 's', '.', 32, 0,
  /* 1520 */ 'f', 'd', 'i', 'v', 's', '.', 32, 0,
  /* 1528 */ 't', 'a', 'b', 'o', 'r', 't', '.', 32, 0,
  /* 1537 */ 'f', 's', 'q', 'r', 't', '.', 32, 0,
  /* 1545 */ 'm', 'u', 'l', 'h', 'd', 'u', '.', 32, 0,
  /* 1554 */ 'f', 'c', 'f', 'i', 'd', 'u', '.', 32, 0,
  /* 1563 */ 'd', 'i', 'v', 'd', 'u', '.', 32, 0,
  /* 1571 */ 'd', 'i', 'v', 'd', 'e', 'u', '.', 32, 0,
  /* 1580 */ 'd', 'i', 'v', 'w', 'e', 'u', '.', 32, 0,
  /* 1589 */ 'm', 'u', 'l', 'h', 'w', 'u', '.', 32, 0,
  /* 1598 */ 'd', 'i', 'v', 'w', 'u', '.', 32, 0,
  /* 1606 */ 'f', 'd', 'i', 'v', '.', 32, 0,
  /* 1613 */ 'e', 'q', 'v', '.', 32, 0,
  /* 1619 */ 's', 'r', 'a', 'w', '.', 32, 0,
  /* 1626 */ 'v', 'c', 'm', 'p', 'n', 'e', 'w', '.', 32, 0,
  /* 1636 */ 'm', 'u', 'l', 'h', 'w', '.', 32, 0,
  /* 1644 */ 'f', 'c', 't', 'i', 'w', '.', 32, 0,
  /* 1652 */ 'm', 'u', 'l', 'l', 'w', '.', 32, 0,
  /* 1660 */ 's', 'l', 'w', '.', 32, 0,
  /* 1666 */ 's', 'r', 'w', '.', 32, 0,
  /* 1672 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', '.', 32, 0,
  /* 1683 */ 'e', 'x', 't', 's', 'w', '.', 32, 0,
  /* 1691 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', '.', 32, 0,
  /* 1702 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', '.', 32, 0,
  /* 1713 */ 'd', 'i', 'v', 'w', '.', 32, 0,
  /* 1720 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'w', '.', 32, 0,
  /* 1731 */ 'c', 'n', 't', 'l', 'z', 'w', '.', 32, 0,
  /* 1740 */ 'c', 'n', 't', 't', 'z', 'w', '.', 32, 0,
  /* 1749 */ 's', 't', 'b', 'c', 'x', '.', 32, 0,
  /* 1757 */ 's', 't', 'd', 'c', 'x', '.', 32, 0,
  /* 1765 */ 's', 't', 'h', 'c', 'x', '.', 32, 0,
  /* 1773 */ 's', 't', 'w', 'c', 'x', '.', 32, 0,
  /* 1781 */ 't', 'l', 'b', 's', 'x', '.', 32, 0,
  /* 1789 */ 'f', 'c', 't', 'i', 'd', 'z', '.', 32, 0,
  /* 1798 */ 'b', 'c', 'd', 'c', 'f', 'z', '.', 32, 0,
  /* 1807 */ 'f', 'r', 'i', 'z', '.', 32, 0,
  /* 1814 */ 'b', 'c', 'd', 'c', 't', 'z', '.', 32, 0,
  /* 1823 */ 'f', 'c', 't', 'i', 'd', 'u', 'z', '.', 32, 0,
  /* 1833 */ 'f', 'c', 't', 'i', 'w', 'u', 'z', '.', 32, 0,
  /* 1843 */ 'f', 'c', 't', 'i', 'w', 'z', '.', 32, 0,
  /* 1852 */ 'm', 't', 'f', 's', 'b', '0', 32, 0,
  /* 1860 */ 'm', 't', 'f', 's', 'b', '1', 32, 0,
  /* 1868 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 32, 0,
  /* 1890 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 32, 0,
  /* 1912 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', '8', 32, 0,
  /* 1926 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', '8', 32, 0,
  /* 1940 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', '8', 32, 0,
  /* 1954 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 32, 0,
  /* 1969 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 1988 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 2005 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 32, 0,
  /* 2018 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2031 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2044 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2055 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'a', 32, 0,
  /* 2066 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2079 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2092 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2103 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2116 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2129 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2140 */ 'd', 'c', 'b', 'a', 32, 0,
  /* 2146 */ 'b', 'c', 'a', 32, 0,
  /* 2151 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 32, 0,
  /* 2162 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 'a', 32, 0,
  /* 2173 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 32, 0,
  /* 2184 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 32, 0,
  /* 2194 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 32, 0,
  /* 2205 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 'a', 32, 0,
  /* 2216 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 32, 0,
  /* 2227 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 32, 0,
  /* 2237 */ 'l', 'h', 'a', 32, 0,
  /* 2242 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 32, 0,
  /* 2253 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 'a', 32, 0,
  /* 2264 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 32, 0,
  /* 2275 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 32, 0,
  /* 2285 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 32, 0,
  /* 2296 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 'a', 32, 0,
  /* 2307 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 32, 0,
  /* 2318 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 32, 0,
  /* 2329 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 32, 0,
  /* 2339 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 'a', 32, 0,
  /* 2351 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 'a', 32, 0,
  /* 2362 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 'a', 32, 0,
  /* 2374 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 'a', 32, 0,
  /* 2385 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2398 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2410 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2423 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2435 */ 'b', 'l', 'a', 32, 0,
  /* 2440 */ 'b', 'c', 'l', 'a', 32, 0,
  /* 2446 */ 'b', 'd', 'z', 'l', 'a', 32, 0,
  /* 2453 */ 'b', 'd', 'n', 'z', 'l', 'a', 32, 0,
  /* 2461 */ 'e', 'v', 'm', 'r', 'a', 32, 0,
  /* 2468 */ 'l', 'w', 'a', 32, 0,
  /* 2473 */ 'm', 't', 'v', 's', 'r', 'w', 'a', 32, 0,
  /* 2482 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 'a', 32, 0,
  /* 2493 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2503 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2514 */ 'q', 'v', 'l', 'f', 'd', 'x', 'a', 32, 0,
  /* 2523 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'a', 32, 0,
  /* 2533 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2543 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2554 */ 'q', 'v', 'l', 'f', 's', 'x', 'a', 32, 0,
  /* 2563 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'a', 32, 0,
  /* 2573 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2584 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2596 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 2606 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 2617 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 2628 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 2640 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 2650 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 2661 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 'a', 32, 0,
  /* 2672 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 'a', 32, 0,
  /* 2683 */ 'b', 'd', 'z', 'a', 32, 0,
  /* 2689 */ 'b', 'd', 'n', 'z', 'a', 32, 0,
  /* 2696 */ 'v', 's', 'r', 'a', 'b', 32, 0,
  /* 2703 */ 'r', 'f', 'e', 'b', 'b', 32, 0,
  /* 2710 */ 'v', 'c', 'l', 'z', 'l', 's', 'b', 'b', 32, 0,
  /* 2720 */ 'v', 'c', 't', 'z', 'l', 's', 'b', 'b', 32, 0,
  /* 2730 */ 'v', 'c', 'm', 'p', 'n', 'e', 'b', 32, 0,
  /* 2739 */ 'v', 'm', 'r', 'g', 'h', 'b', 32, 0,
  /* 2747 */ 'x', 'x', 's', 'p', 'l', 't', 'i', 'b', 32, 0,
  /* 2757 */ 'v', 'm', 'r', 'g', 'l', 'b', 32, 0,
  /* 2765 */ 'v', 'r', 'l', 'b', 32, 0,
  /* 2771 */ 'v', 's', 'l', 'b', 32, 0,
  /* 2777 */ 'v', 'p', 'm', 's', 'u', 'm', 'b', 32, 0,
  /* 2786 */ 'c', 'm', 'p', 'b', 32, 0,
  /* 2792 */ 'c', 'm', 'p', 'e', 'q', 'b', 32, 0,
  /* 2800 */ 'c', 'm', 'p', 'r', 'b', 32, 0,
  /* 2807 */ 'v', 's', 'r', 'b', 32, 0,
  /* 2813 */ 'v', 'm', 'u', 'l', 'e', 's', 'b', 32, 0,
  /* 2822 */ 'v', 'a', 'v', 'g', 's', 'b', 32, 0,
  /* 2830 */ 'v', 'u', 'p', 'k', 'h', 's', 'b', 32, 0,
  /* 2839 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'b', 32, 0,
  /* 2849 */ 'v', 'u', 'p', 'k', 'l', 's', 'b', 32, 0,
  /* 2858 */ 'v', 'm', 'i', 'n', 's', 'b', 32, 0,
  /* 2866 */ 'v', 'm', 'u', 'l', 'o', 's', 'b', 32, 0,
  /* 2875 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', 32, 0,
  /* 2885 */ 'e', 'v', 'e', 'x', 't', 's', 'b', 32, 0,
  /* 2894 */ 'v', 'm', 'a', 'x', 's', 'b', 32, 0,
  /* 2902 */ 'm', 'f', 't', 'b', 32, 0,
  /* 2908 */ 'v', 's', 'p', 'l', 't', 'b', 32, 0,
  /* 2916 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'b', 32, 0,
  /* 2926 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'b', 32, 0,
  /* 2936 */ 's', 't', 'b', 32, 0,
  /* 2941 */ 'v', 'a', 'b', 's', 'd', 'u', 'b', 32, 0,
  /* 2950 */ 'v', 'm', 'u', 'l', 'e', 'u', 'b', 32, 0,
  /* 2959 */ 'v', 'a', 'v', 'g', 'u', 'b', 32, 0,
  /* 2967 */ 'v', 'm', 'i', 'n', 'u', 'b', 32, 0,
  /* 2975 */ 'v', 'm', 'u', 'l', 'o', 'u', 'b', 32, 0,
  /* 2984 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', 32, 0,
  /* 2994 */ 'q', 'v', 'f', 's', 'u', 'b', 32, 0,
  /* 3002 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 32, 0,
  /* 3011 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 32, 0,
  /* 3021 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'b', 32, 0,
  /* 3033 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', 32, 0,
  /* 3043 */ 'v', 'm', 'a', 'x', 'u', 'b', 32, 0,
  /* 3051 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'b', 32, 0,
  /* 3061 */ 'v', 'c', 'l', 'z', 'b', 32, 0,
  /* 3068 */ 'v', 'c', 't', 'z', 'b', 32, 0,
  /* 3075 */ 'b', 'c', 32, 0,
  /* 3079 */ 'a', 'd', 'd', 'c', 32, 0,
  /* 3085 */ 'x', 'x', 'l', 'a', 'n', 'd', 'c', 32, 0,
  /* 3094 */ 'c', 'r', 'a', 'n', 'd', 'c', 32, 0,
  /* 3102 */ 'e', 'v', 'a', 'n', 'd', 'c', 32, 0,
  /* 3110 */ 's', 'u', 'b', 'f', 'c', 32, 0,
  /* 3117 */ 's', 'u', 'b', 'i', 'c', 32, 0,
  /* 3124 */ 'a', 'd', 'd', 'i', 'c', 32, 0,
  /* 3131 */ 'r', 'l', 'd', 'i', 'c', 32, 0,
  /* 3138 */ 's', 'u', 'b', 'f', 'i', 'c', 32, 0,
  /* 3146 */ 'x', 's', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 3155 */ 'x', 'v', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 3164 */ 'x', 'v', 'r', 's', 'p', 'i', 'c', 32, 0,
  /* 3173 */ 'b', 'r', 'i', 'n', 'c', 32, 0,
  /* 3180 */ 's', 'y', 'n', 'c', 32, 0,
  /* 3186 */ 'x', 'x', 'l', 'o', 'r', 'c', 32, 0,
  /* 3194 */ 'c', 'r', 'o', 'r', 'c', 32, 0,
  /* 3201 */ 'e', 'v', 'o', 'r', 'c', 32, 0,
  /* 3208 */ 's', 'c', 32, 0,
  /* 3212 */ 'v', 'e', 'x', 't', 's', 'b', '2', 'd', 32, 0,
  /* 3222 */ 'v', 'e', 'x', 't', 's', 'h', '2', 'd', 32, 0,
  /* 3232 */ 'v', 'e', 'x', 't', 's', 'w', '2', 'd', 32, 0,
  /* 3242 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 32, 0,
  /* 3255 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'd', 32, 0,
  /* 3267 */ 'v', 's', 'r', 'a', 'd', 32, 0,
  /* 3274 */ 'v', 'g', 'b', 'b', 'd', 32, 0,
  /* 3281 */ 'v', 'p', 'r', 't', 'y', 'b', 'd', 32, 0,
  /* 3290 */ 'q', 'v', 'f', 'a', 'd', 'd', 32, 0,
  /* 3298 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 32, 0,
  /* 3307 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 3317 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 3331 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 32, 0,
  /* 3344 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 3354 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 3365 */ 'e', 'v', 'l', 'd', 'd', 32, 0,
  /* 3372 */ 'm', 't', 'v', 's', 'r', 'd', 'd', 32, 0,
  /* 3381 */ 'e', 'v', 's', 't', 'd', 'd', 32, 0,
  /* 3389 */ 'l', 'f', 'd', 32, 0,
  /* 3394 */ 's', 't', 'f', 'd', 32, 0,
  /* 3400 */ 'v', 'n', 'e', 'g', 'd', 32, 0,
  /* 3407 */ 'm', 'u', 'l', 'h', 'd', 32, 0,
  /* 3414 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 32, 0,
  /* 3423 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 32, 0,
  /* 3432 */ 't', 'l', 'b', 'l', 'd', 32, 0,
  /* 3439 */ 'm', 'u', 'l', 'l', 'd', 32, 0,
  /* 3446 */ 'c', 'm', 'p', 'l', 'd', 32, 0,
  /* 3453 */ 'm', 'f', 'v', 's', 'r', 'l', 'd', 32, 0,
  /* 3462 */ 'v', 'r', 'l', 'd', 32, 0,
  /* 3468 */ 'v', 's', 'l', 'd', 32, 0,
  /* 3474 */ 'v', 'b', 'p', 'e', 'r', 'm', 'd', 32, 0,
  /* 3483 */ 'v', 'p', 'm', 's', 'u', 'm', 'd', 32, 0,
  /* 3492 */ 'x', 'x', 'l', 'a', 'n', 'd', 32, 0,
  /* 3500 */ 'x', 'x', 'l', 'n', 'a', 'n', 'd', 32, 0,
  /* 3509 */ 'c', 'r', 'n', 'a', 'n', 'd', 32, 0,
  /* 3517 */ 'e', 'v', 'n', 'a', 'n', 'd', 32, 0,
  /* 3525 */ 'c', 'r', 'a', 'n', 'd', 32, 0,
  /* 3532 */ 'e', 'v', 'a', 'n', 'd', 32, 0,
  /* 3539 */ 'c', 'm', 'p', 'd', 32, 0,
  /* 3545 */ 'x', 'x', 'b', 'r', 'd', 32, 0,
  /* 3552 */ 'm', 't', 'm', 's', 'r', 'd', 32, 0,
  /* 3560 */ 'm', 'f', 'v', 's', 'r', 'd', 32, 0,
  /* 3568 */ 'm', 't', 'v', 's', 'r', 'd', 32, 0,
  /* 3576 */ 'v', 'm', 'i', 'n', 's', 'd', 32, 0,
  /* 3584 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', 32, 0,
  /* 3594 */ 'v', 'm', 'a', 'x', 's', 'd', 32, 0,
  /* 3602 */ 'l', 'x', 's', 'd', 32, 0,
  /* 3608 */ 's', 't', 'x', 's', 'd', 32, 0,
  /* 3615 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'd', 32, 0,
  /* 3626 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'd', 32, 0,
  /* 3636 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'd', 32, 0,
  /* 3646 */ 's', 't', 'd', 32, 0,
  /* 3651 */ 'v', 'm', 'i', 'n', 'u', 'd', 32, 0,
  /* 3659 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', 32, 0,
  /* 3669 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', 32, 0,
  /* 3679 */ 'v', 'm', 'a', 'x', 'u', 'd', 32, 0,
  /* 3687 */ 'd', 'i', 'v', 'd', 32, 0,
  /* 3693 */ 'v', 'c', 'l', 'z', 'd', 32, 0,
  /* 3700 */ 'c', 'n', 't', 'l', 'z', 'd', 32, 0,
  /* 3708 */ 'v', 'c', 't', 'z', 'd', 32, 0,
  /* 3715 */ 'c', 'n', 't', 't', 'z', 'd', 32, 0,
  /* 3723 */ 'm', 'f', 'b', 'h', 'r', 'b', 'e', 32, 0,
  /* 3732 */ 'a', 'd', 'd', 'e', 32, 0,
  /* 3738 */ 'd', 'i', 'v', 'd', 'e', 32, 0,
  /* 3745 */ 's', 'l', 'b', 'm', 'f', 'e', 'e', 32, 0,
  /* 3754 */ 'w', 'r', 't', 'e', 'e', 32, 0,
  /* 3761 */ 's', 'u', 'b', 'f', 'e', 32, 0,
  /* 3768 */ 'e', 'v', 'l', 'w', 'h', 'e', 32, 0,
  /* 3776 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 32, 0,
  /* 3785 */ 's', 'l', 'b', 'i', 'e', 32, 0,
  /* 3792 */ 't', 'l', 'b', 'i', 'e', 32, 0,
  /* 3799 */ 'a', 'd', 'd', 'm', 'e', 32, 0,
  /* 3806 */ 's', 'u', 'b', 'f', 'm', 'e', 32, 0,
  /* 3814 */ 't', 'l', 'b', 'r', 'e', 32, 0,
  /* 3821 */ 'q', 'v', 'f', 'r', 'e', 32, 0,
  /* 3828 */ 's', 'l', 'b', 'm', 't', 'e', 32, 0,
  /* 3836 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 32, 0,
  /* 3847 */ 'p', 'a', 's', 't', 'e', 32, 0,
  /* 3854 */ 't', 'l', 'b', 'w', 'e', 32, 0,
  /* 3861 */ 'd', 'i', 'v', 'w', 'e', 32, 0,
  /* 3868 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 32, 0,
  /* 3877 */ 'a', 'd', 'd', 'z', 'e', 32, 0,
  /* 3884 */ 's', 'u', 'b', 'f', 'z', 'e', 32, 0,
  /* 3892 */ 'd', 'c', 'b', 'f', 32, 0,
  /* 3898 */ 's', 'u', 'b', 'f', 32, 0,
  /* 3904 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 32, 0,
  /* 3914 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 32, 0,
  /* 3924 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 32, 0,
  /* 3934 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 32, 0,
  /* 3943 */ 'm', 'c', 'r', 'f', 32, 0,
  /* 3949 */ 'm', 'f', 'o', 'c', 'r', 'f', 32, 0,
  /* 3957 */ 'm', 't', 'o', 'c', 'r', 'f', 32, 0,
  /* 3965 */ 'm', 't', 'c', 'r', 'f', 32, 0,
  /* 3972 */ 'm', 't', 'f', 's', 'f', 32, 0,
  /* 3979 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 32, 0,
  /* 3989 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 32, 0,
  /* 3999 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 32, 0,
  /* 4009 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 32, 0,
  /* 4018 */ 's', 'l', 'b', 'i', 'e', 'g', 32, 0,
  /* 4026 */ 'q', 'v', 'f', 'n', 'e', 'g', 32, 0,
  /* 4034 */ 'e', 'v', 'n', 'e', 'g', 32, 0,
  /* 4041 */ 'v', 's', 'r', 'a', 'h', 32, 0,
  /* 4048 */ 'e', 'v', 'l', 'd', 'h', 32, 0,
  /* 4055 */ 'e', 'v', 's', 't', 'd', 'h', 32, 0,
  /* 4063 */ 'v', 'c', 'm', 'p', 'n', 'e', 'h', 32, 0,
  /* 4072 */ 'v', 'm', 'r', 'g', 'h', 'h', 32, 0,
  /* 4080 */ 'v', 'm', 'r', 'g', 'l', 'h', 32, 0,
  /* 4088 */ 'v', 'r', 'l', 'h', 32, 0,
  /* 4094 */ 'v', 's', 'l', 'h', 32, 0,
  /* 4100 */ 'v', 'p', 'm', 's', 'u', 'm', 'h', 32, 0,
  /* 4109 */ 'x', 'x', 'b', 'r', 'h', 32, 0,
  /* 4116 */ 'v', 's', 'r', 'h', 32, 0,
  /* 4122 */ 'v', 'm', 'u', 'l', 'e', 's', 'h', 32, 0,
  /* 4131 */ 'v', 'a', 'v', 'g', 's', 'h', 32, 0,
  /* 4139 */ 'v', 'u', 'p', 'k', 'h', 's', 'h', 32, 0,
  /* 4148 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'h', 32, 0,
  /* 4158 */ 'v', 'u', 'p', 'k', 'l', 's', 'h', 32, 0,
  /* 4167 */ 'v', 'm', 'i', 'n', 's', 'h', 32, 0,
  /* 4175 */ 'v', 'm', 'u', 'l', 'o', 's', 'h', 32, 0,
  /* 4184 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', 32, 0,
  /* 4194 */ 'e', 'v', 'e', 'x', 't', 's', 'h', 32, 0,
  /* 4203 */ 'v', 'm', 'a', 'x', 's', 'h', 32, 0,
  /* 4211 */ 'v', 's', 'p', 'l', 't', 'h', 32, 0,
  /* 4219 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'h', 32, 0,
  /* 4229 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'h', 32, 0,
  /* 4239 */ 's', 't', 'h', 32, 0,
  /* 4244 */ 'v', 'a', 'b', 's', 'd', 'u', 'h', 32, 0,
  /* 4253 */ 'v', 'm', 'u', 'l', 'e', 'u', 'h', 32, 0,
  /* 4262 */ 'v', 'a', 'v', 'g', 'u', 'h', 32, 0,
  /* 4270 */ 'v', 'm', 'i', 'n', 'u', 'h', 32, 0,
  /* 4278 */ 'v', 'm', 'u', 'l', 'o', 'u', 'h', 32, 0,
  /* 4287 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', 32, 0,
  /* 4297 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'h', 32, 0,
  /* 4309 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', 32, 0,
  /* 4319 */ 'v', 'm', 'a', 'x', 'u', 'h', 32, 0,
  /* 4327 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'h', 32, 0,
  /* 4337 */ 'v', 'c', 'l', 'z', 'h', 32, 0,
  /* 4344 */ 'v', 'c', 't', 'z', 'h', 32, 0,
  /* 4351 */ 'd', 'c', 'b', 'i', 32, 0,
  /* 4357 */ 'i', 'c', 'b', 'i', 32, 0,
  /* 4363 */ 's', 'u', 'b', 'i', 32, 0,
  /* 4369 */ 'd', 'c', 'c', 'c', 'i', 32, 0,
  /* 4376 */ 'i', 'c', 'c', 'c', 'i', 32, 0,
  /* 4383 */ 'q', 'v', 'g', 'p', 'c', 'i', 32, 0,
  /* 4391 */ 's', 'r', 'a', 'd', 'i', 32, 0,
  /* 4398 */ 'a', 'd', 'd', 'i', 32, 0,
  /* 4404 */ 'c', 'm', 'p', 'l', 'd', 'i', 32, 0,
  /* 4412 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', 32, 0,
  /* 4422 */ 'e', 'x', 't', 'l', 'd', 'i', 32, 0,
  /* 4430 */ 'x', 'x', 'p', 'e', 'r', 'm', 'd', 'i', 32, 0,
  /* 4440 */ 'c', 'm', 'p', 'd', 'i', 32, 0,
  /* 4447 */ 'c', 'l', 'r', 'r', 'd', 'i', 32, 0,
  /* 4455 */ 'i', 'n', 's', 'r', 'd', 'i', 32, 0,
  /* 4463 */ 'r', 'o', 't', 'r', 'd', 'i', 32, 0,
  /* 4471 */ 'e', 'x', 't', 'r', 'd', 'i', 32, 0,
  /* 4479 */ 't', 'd', 'i', 32, 0,
  /* 4484 */ 'w', 'r', 't', 'e', 'e', 'i', 32, 0,
  /* 4492 */ 'm', 't', 'f', 's', 'f', 'i', 32, 0,
  /* 4500 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'f', 'i', 32, 0,
  /* 4511 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 32, 0,
  /* 4522 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 'h', 'i', 32, 0,
  /* 4535 */ 't', 'l', 'b', 'l', 'i', 32, 0,
  /* 4542 */ 'm', 'u', 'l', 'l', 'i', 32, 0,
  /* 4549 */ 'v', 'r', 'l', 'd', 'm', 'i', 32, 0,
  /* 4557 */ 'r', 'l', 'd', 'i', 'm', 'i', 32, 0,
  /* 4565 */ 'r', 'l', 'w', 'i', 'm', 'i', 32, 0,
  /* 4573 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 32, 0,
  /* 4583 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 32, 0,
  /* 4593 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 32, 0,
  /* 4603 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 32, 0,
  /* 4612 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 32, 0,
  /* 4622 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 32, 0,
  /* 4632 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 32, 0,
  /* 4642 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 32, 0,
  /* 4652 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 32, 0,
  /* 4661 */ 'v', 'r', 'l', 'w', 'm', 'i', 32, 0,
  /* 4669 */ 'q', 'v', 'a', 'l', 'i', 'g', 'n', 'i', 32, 0,
  /* 4679 */ 'v', 's', 'l', 'd', 'o', 'i', 32, 0,
  /* 4687 */ 'x', 's', 'r', 'd', 'p', 'i', 32, 0,
  /* 4695 */ 'x', 'v', 'r', 'd', 'p', 'i', 32, 0,
  /* 4703 */ 'x', 's', 'r', 'q', 'p', 'i', 32, 0,
  /* 4711 */ 'x', 'v', 'r', 's', 'p', 'i', 32, 0,
  /* 4719 */ 'x', 'o', 'r', 'i', 32, 0,
  /* 4725 */ 'q', 'v', 'e', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 4736 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 4746 */ 's', 'r', 'a', 'w', 'i', 32, 0,
  /* 4753 */ 'x', 'x', 's', 'l', 'd', 'w', 'i', 32, 0,
  /* 4762 */ 'c', 'm', 'p', 'l', 'w', 'i', 32, 0,
  /* 4770 */ 'e', 'v', 'r', 'l', 'w', 'i', 32, 0,
  /* 4778 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', 32, 0,
  /* 4788 */ 'i', 'n', 's', 'l', 'w', 'i', 32, 0,
  /* 4796 */ 'e', 'v', 's', 'l', 'w', 'i', 32, 0,
  /* 4804 */ 'e', 'x', 't', 'l', 'w', 'i', 32, 0,
  /* 4812 */ 'c', 'm', 'p', 'w', 'i', 32, 0,
  /* 4819 */ 'c', 'l', 'r', 'r', 'w', 'i', 32, 0,
  /* 4827 */ 'i', 'n', 's', 'r', 'w', 'i', 32, 0,
  /* 4835 */ 'r', 'o', 't', 'r', 'w', 'i', 32, 0,
  /* 4843 */ 'e', 'x', 't', 'r', 'w', 'i', 32, 0,
  /* 4851 */ 'l', 's', 'w', 'i', 32, 0,
  /* 4857 */ 's', 't', 's', 'w', 'i', 32, 0,
  /* 4864 */ 't', 'w', 'i', 32, 0,
  /* 4869 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 32, 0,
  /* 4880 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 32, 0,
  /* 4890 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 32, 0,
  /* 4901 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 32, 0,
  /* 4911 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 32, 0,
  /* 4923 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 32, 0,
  /* 4934 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 32, 0,
  /* 4946 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 32, 0,
  /* 4957 */ 't', 'c', 'h', 'e', 'c', 'k', 32, 0,
  /* 4965 */ 'q', 'v', 'f', 'l', 'o', 'g', 'i', 'c', 'a', 'l', 32, 0,
  /* 4977 */ 'b', 'l', 32, 0,
  /* 4981 */ 'b', 'c', 'l', 32, 0,
  /* 4986 */ 'r', 'l', 'd', 'c', 'l', 32, 0,
  /* 4993 */ 'r', 'l', 'd', 'i', 'c', 'l', 32, 0,
  /* 5001 */ 't', 'l', 'b', 'i', 'e', 'l', 32, 0,
  /* 5009 */ 'q', 'v', 'f', 's', 'e', 'l', 32, 0,
  /* 5017 */ 'i', 's', 'e', 'l', 32, 0,
  /* 5023 */ 'v', 's', 'e', 'l', 32, 0,
  /* 5029 */ 'x', 'x', 's', 'e', 'l', 32, 0,
  /* 5036 */ 'd', 'c', 'b', 'f', 'l', 32, 0,
  /* 5043 */ 'l', 'x', 'v', 'l', 'l', 32, 0,
  /* 5050 */ 's', 't', 'x', 'v', 'l', 'l', 32, 0,
  /* 5058 */ 'b', 'c', 'l', 'r', 'l', 32, 0,
  /* 5065 */ 'b', 'c', 'c', 't', 'r', 'l', 32, 0,
  /* 5073 */ 'l', 'v', 's', 'l', 32, 0,
  /* 5079 */ 'q', 'v', 'f', 'm', 'u', 'l', 32, 0,
  /* 5087 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 32, 0,
  /* 5096 */ 'l', 'x', 'v', 'l', 32, 0,
  /* 5102 */ 's', 't', 'x', 'v', 'l', 32, 0,
  /* 5109 */ 'l', 'v', 'x', 'l', 32, 0,
  /* 5115 */ 's', 't', 'v', 'x', 'l', 32, 0,
  /* 5122 */ 'd', 'c', 'b', 'z', 'l', 32, 0,
  /* 5129 */ 'b', 'd', 'z', 'l', 32, 0,
  /* 5135 */ 'b', 'd', 'n', 'z', 'l', 32, 0,
  /* 5142 */ 'v', 'm', 's', 'u', 'm', 'm', 'b', 'm', 32, 0,
  /* 5152 */ 'v', 's', 'u', 'b', 'u', 'b', 'm', 32, 0,
  /* 5161 */ 'v', 'a', 'd', 'd', 'u', 'b', 'm', 32, 0,
  /* 5170 */ 'v', 'm', 's', 'u', 'm', 'u', 'b', 'm', 32, 0,
  /* 5180 */ 'v', 's', 'u', 'b', 'u', 'd', 'm', 32, 0,
  /* 5189 */ 'v', 'a', 'd', 'd', 'u', 'd', 'm', 32, 0,
  /* 5198 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 'm', 32, 0,
  /* 5208 */ 'v', 's', 'u', 'b', 'u', 'h', 'm', 32, 0,
  /* 5217 */ 'v', 'm', 'l', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 5228 */ 'v', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 5237 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 'm', 32, 0,
  /* 5247 */ 'v', 'r', 'f', 'i', 'm', 32, 0,
  /* 5254 */ 'x', 's', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 5263 */ 'x', 'v', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 5272 */ 'x', 'v', 'r', 's', 'p', 'i', 'm', 32, 0,
  /* 5281 */ 'q', 'v', 'f', 'r', 'i', 'm', 32, 0,
  /* 5289 */ 'v', 'r', 'l', 'd', 'n', 'm', 32, 0,
  /* 5297 */ 'r', 'l', 'w', 'i', 'n', 'm', 32, 0,
  /* 5305 */ 'v', 'r', 'l', 'w', 'n', 'm', 32, 0,
  /* 5313 */ 'v', 's', 'u', 'b', 'u', 'q', 'm', 32, 0,
  /* 5322 */ 'v', 'a', 'd', 'd', 'u', 'q', 'm', 32, 0,
  /* 5331 */ 'v', 's', 'u', 'b', 'e', 'u', 'q', 'm', 32, 0,
  /* 5341 */ 'v', 'a', 'd', 'd', 'e', 'u', 'q', 'm', 32, 0,
  /* 5351 */ 'q', 'v', 'f', 'p', 'e', 'r', 'm', 32, 0,
  /* 5360 */ 'v', 'p', 'e', 'r', 'm', 32, 0,
  /* 5367 */ 'x', 'x', 'p', 'e', 'r', 'm', 32, 0,
  /* 5375 */ 'v', 'p', 'k', 'u', 'd', 'u', 'm', 32, 0,
  /* 5384 */ 'v', 'p', 'k', 'u', 'h', 'u', 'm', 32, 0,
  /* 5393 */ 'v', 'p', 'k', 'u', 'w', 'u', 'm', 32, 0,
  /* 5402 */ 'v', 's', 'u', 'b', 'u', 'w', 'm', 32, 0,
  /* 5411 */ 'v', 'a', 'd', 'd', 'u', 'w', 'm', 32, 0,
  /* 5420 */ 'v', 'm', 'u', 'l', 'u', 'w', 'm', 32, 0,
  /* 5429 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 5442 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 5455 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 5466 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'n', 32, 0,
  /* 5477 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 5490 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 5503 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 5514 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 5527 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 5540 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 5551 */ 'q', 'v', 'f', 't', 's', 't', 'n', 'a', 'n', 32, 0,
  /* 5562 */ 'q', 'v', 'f', 'c', 'p', 's', 'g', 'n', 32, 0,
  /* 5572 */ 'v', 'r', 'f', 'i', 'n', 32, 0,
  /* 5579 */ 'q', 'v', 'f', 'r', 'i', 'n', 32, 0,
  /* 5587 */ 'm', 'f', 's', 'r', 'i', 'n', 32, 0,
  /* 5595 */ 'm', 't', 's', 'r', 'i', 'n', 32, 0,
  /* 5603 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 'n', 32, 0,
  /* 5614 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 'n', 32, 0,
  /* 5625 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 32, 0,
  /* 5634 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 32, 0,
  /* 5645 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 'l', 'o', 32, 0,
  /* 5658 */ 'v', 's', 'l', 'o', 32, 0,
  /* 5664 */ 'x', 's', 'c', 'v', 'q', 'p', 'd', 'p', 'o', 32, 0,
  /* 5675 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 5687 */ 'x', 's', 'm', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 5698 */ 'x', 's', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 5708 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 5720 */ 'x', 's', 'm', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 5731 */ 'x', 's', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 5741 */ 'x', 's', 'm', 'u', 'l', 'q', 'p', 'o', 32, 0,
  /* 5751 */ 'x', 's', 's', 'q', 'r', 't', 'q', 'p', 'o', 32, 0,
  /* 5762 */ 'x', 's', 'd', 'i', 'v', 'q', 'p', 'o', 32, 0,
  /* 5772 */ 'v', 's', 'r', 'o', 32, 0,
  /* 5778 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 32, 0,
  /* 5787 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5799 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5811 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5822 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 5833 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5845 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5857 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5868 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 5879 */ 'x', 's', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 5888 */ 'x', 'v', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 5897 */ 'x', 's', 't', 's', 't', 'd', 'c', 'd', 'p', 32, 0,
  /* 5908 */ 'x', 'v', 't', 's', 't', 'd', 'c', 'd', 'p', 32, 0,
  /* 5919 */ 'x', 's', 'm', 'i', 'n', 'c', 'd', 'p', 32, 0,
  /* 5929 */ 'x', 's', 'm', 'a', 'x', 'c', 'd', 'p', 32, 0,
  /* 5939 */ 'x', 's', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 5948 */ 'x', 'v', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 5957 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 5968 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 5979 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 5990 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 6001 */ 'x', 's', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 6012 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 6023 */ 'x', 's', 'c', 'm', 'p', 'n', 'e', 'd', 'p', 32, 0,
  /* 6034 */ 'x', 's', 'r', 'e', 'd', 'p', 32, 0,
  /* 6042 */ 'x', 'v', 'r', 'e', 'd', 'p', 32, 0,
  /* 6050 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 6062 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 6074 */ 'x', 's', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 6083 */ 'x', 'v', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 6092 */ 'x', 's', 'x', 's', 'i', 'g', 'd', 'p', 32, 0,
  /* 6102 */ 'x', 'v', 'x', 's', 'i', 'g', 'd', 'p', 32, 0,
  /* 6112 */ 'x', 's', 'm', 'i', 'n', 'j', 'd', 'p', 32, 0,
  /* 6122 */ 'x', 's', 'm', 'a', 'x', 'j', 'd', 'p', 32, 0,
  /* 6132 */ 'x', 's', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 6141 */ 'x', 'v', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 6150 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6162 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6174 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6185 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 6196 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6208 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6220 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6231 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 6242 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 6253 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 6264 */ 'x', 's', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 6273 */ 'x', 'v', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 6282 */ 'x', 's', 'c', 'm', 'p', 'o', 'd', 'p', 32, 0,
  /* 6292 */ 'x', 's', 'c', 'v', 'h', 'p', 'd', 'p', 32, 0,
  /* 6302 */ 'x', 's', 'c', 'v', 'q', 'p', 'd', 'p', 32, 0,
  /* 6312 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 6322 */ 'x', 'v', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 6332 */ 'x', 's', 'i', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6342 */ 'x', 'v', 'i', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6352 */ 'x', 's', 'c', 'm', 'p', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6364 */ 'x', 's', 'x', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6374 */ 'x', 'v', 'x', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 6384 */ 'x', 's', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 6395 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 6406 */ 'x', 's', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6416 */ 'x', 'v', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6426 */ 'x', 's', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6435 */ 'x', 'v', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 6444 */ 'x', 's', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 6455 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 6466 */ 'x', 's', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6476 */ 'x', 's', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6487 */ 'x', 'v', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6498 */ 'x', 'v', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 6508 */ 'x', 's', 'c', 'm', 'p', 'u', 'd', 'p', 32, 0,
  /* 6518 */ 'x', 's', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6527 */ 'x', 's', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6537 */ 'x', 'v', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6547 */ 'x', 'v', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 6556 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 'd', 'p', 32, 0,
  /* 6567 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 'd', 'p', 32, 0,
  /* 6578 */ 'x', 's', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 6587 */ 'x', 'v', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 6596 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', 32, 0,
  /* 6605 */ 'v', 'n', 'm', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 6615 */ 'v', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 6623 */ 'v', 'm', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 6632 */ 'v', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 6640 */ 'v', 'l', 'o', 'g', 'e', 'f', 'p', 32, 0,
  /* 6649 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', 32, 0,
  /* 6659 */ 'v', 'r', 'e', 'f', 'p', 32, 0,
  /* 6666 */ 'v', 'e', 'x', 'p', 't', 'e', 'f', 'p', 32, 0,
  /* 6676 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 'f', 'p', 32, 0,
  /* 6687 */ 'v', 'm', 'i', 'n', 'f', 'p', 32, 0,
  /* 6695 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', 32, 0,
  /* 6705 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', 32, 0,
  /* 6715 */ 'v', 'm', 'a', 'x', 'f', 'p', 32, 0,
  /* 6723 */ 'x', 's', 'c', 'v', 'd', 'p', 'h', 'p', 32, 0,
  /* 6733 */ 'x', 'v', 'c', 'v', 's', 'p', 'h', 'p', 32, 0,
  /* 6743 */ 'v', 'r', 'f', 'i', 'p', 32, 0,
  /* 6750 */ 'x', 's', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 6759 */ 'x', 'v', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 6768 */ 'x', 'v', 'r', 's', 'p', 'i', 'p', 32, 0,
  /* 6777 */ 'q', 'v', 'f', 'r', 'i', 'p', 32, 0,
  /* 6785 */ 'd', 'c', 'b', 'f', 'l', 'p', 32, 0,
  /* 6793 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 6804 */ 'x', 's', 'm', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 6814 */ 'x', 's', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 6823 */ 'x', 's', 't', 's', 't', 'd', 'c', 'q', 'p', 32, 0,
  /* 6834 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 6845 */ 'x', 's', 'm', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 6855 */ 'x', 's', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 6864 */ 'x', 's', 'c', 'v', 's', 'd', 'q', 'p', 32, 0,
  /* 6874 */ 'x', 's', 'c', 'v', 'u', 'd', 'q', 'p', 32, 0,
  /* 6884 */ 'x', 's', 'n', 'e', 'g', 'q', 'p', 32, 0,
  /* 6893 */ 'x', 's', 'x', 's', 'i', 'g', 'q', 'p', 32, 0,
  /* 6903 */ 'x', 's', 'm', 'u', 'l', 'q', 'p', 32, 0,
  /* 6912 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'q', 'p', 32, 0,
  /* 6923 */ 'x', 's', 'c', 'm', 'p', 'o', 'q', 'p', 32, 0,
  /* 6933 */ 'x', 's', 'c', 'v', 'd', 'p', 'q', 'p', 32, 0,
  /* 6943 */ 'x', 's', 'i', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 6953 */ 'x', 's', 'c', 'm', 'p', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 6965 */ 'x', 's', 'x', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 6975 */ 'x', 's', 'n', 'a', 'b', 's', 'q', 'p', 32, 0,
  /* 6985 */ 'x', 's', 'a', 'b', 's', 'q', 'p', 32, 0,
  /* 6994 */ 'x', 's', 's', 'q', 'r', 't', 'q', 'p', 32, 0,
  /* 7004 */ 'x', 's', 'c', 'm', 'p', 'u', 'q', 'p', 32, 0,
  /* 7014 */ 'x', 's', 'd', 'i', 'v', 'q', 'p', 32, 0,
  /* 7023 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7035 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7047 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7058 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 7069 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7081 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7093 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7104 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 7115 */ 'x', 's', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 7124 */ 'x', 'v', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 7133 */ 'x', 's', 't', 's', 't', 'd', 'c', 's', 'p', 32, 0,
  /* 7144 */ 'x', 'v', 't', 's', 't', 'd', 'c', 's', 'p', 32, 0,
  /* 7155 */ 'x', 's', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 7164 */ 'x', 'v', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 7173 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 7184 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 7195 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 7206 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 7217 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', 32, 0,
  /* 7228 */ 'x', 's', 'r', 'e', 's', 'p', 32, 0,
  /* 7236 */ 'x', 'v', 'r', 'e', 's', 'p', 32, 0,
  /* 7244 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 7256 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 7268 */ 'x', 'v', 'n', 'e', 'g', 's', 'p', 32, 0,
  /* 7277 */ 'x', 'v', 'x', 's', 'i', 'g', 's', 'p', 32, 0,
  /* 7287 */ 'x', 's', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 7296 */ 'x', 'v', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 7305 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7317 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7329 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7340 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 7351 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7363 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7375 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7386 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 7397 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 's', 'p', 32, 0,
  /* 7408 */ 'x', 'v', 'm', 'i', 'n', 's', 'p', 32, 0,
  /* 7417 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 7427 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 7437 */ 'x', 'v', 'c', 'v', 'h', 'p', 's', 'p', 32, 0,
  /* 7447 */ 'x', 'v', 'i', 'e', 'x', 'p', 's', 'p', 32, 0,
  /* 7457 */ 'x', 'v', 'x', 'e', 'x', 'p', 's', 'p', 32, 0,
  /* 7467 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', 32, 0,
  /* 7478 */ 'q', 'v', 'f', 'r', 's', 'p', 32, 0,
  /* 7486 */ 'x', 'v', 'n', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 7496 */ 'x', 'v', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 7505 */ 'l', 'x', 's', 's', 'p', 32, 0,
  /* 7512 */ 's', 't', 'x', 's', 's', 'p', 32, 0,
  /* 7520 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', 32, 0,
  /* 7531 */ 'x', 's', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 7541 */ 'x', 'v', 't', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 7552 */ 'x', 'v', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 7562 */ 'x', 's', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 7571 */ 'x', 'v', 't', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 7581 */ 'x', 'v', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 7590 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 's', 'p', 32, 0,
  /* 7601 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 's', 'p', 32, 0,
  /* 7612 */ 'x', 'v', 'm', 'a', 'x', 's', 'p', 32, 0,
  /* 7621 */ 'x', 's', 'r', 'q', 'p', 'x', 'p', 32, 0,
  /* 7630 */ 'v', 'p', 'r', 't', 'y', 'b', 'q', 32, 0,
  /* 7639 */ 'q', 'v', 'f', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 7649 */ 'e', 'v', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 7658 */ 'v', 'b', 'p', 'e', 'r', 'm', 'q', 32, 0,
  /* 7667 */ 'x', 'x', 'b', 'r', 'q', 32, 0,
  /* 7674 */ 'v', 'm', 'u', 'l', '1', '0', 'u', 'q', 32, 0,
  /* 7684 */ 'v', 'm', 'u', 'l', '1', '0', 'c', 'u', 'q', 32, 0,
  /* 7695 */ 'v', 's', 'u', 'b', 'c', 'u', 'q', 32, 0,
  /* 7704 */ 'v', 'a', 'd', 'd', 'c', 'u', 'q', 32, 0,
  /* 7713 */ 'v', 'm', 'u', 'l', '1', '0', 'e', 'c', 'u', 'q', 32, 0,
  /* 7725 */ 'v', 's', 'u', 'b', 'e', 'c', 'u', 'q', 32, 0,
  /* 7735 */ 'v', 'a', 'd', 'd', 'e', 'c', 'u', 'q', 32, 0,
  /* 7745 */ 'v', 'm', 'u', 'l', '1', '0', 'e', 'u', 'q', 32, 0,
  /* 7756 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 32, 0,
  /* 7769 */ 'm', 'b', 'a', 'r', 32, 0,
  /* 7775 */ 'm', 'f', 'd', 'c', 'r', 32, 0,
  /* 7782 */ 'r', 'l', 'd', 'c', 'r', 32, 0,
  /* 7789 */ 'm', 't', 'd', 'c', 'r', 32, 0,
  /* 7796 */ 'm', 'f', 'c', 'r', 32, 0,
  /* 7802 */ 'r', 'l', 'd', 'i', 'c', 'r', 32, 0,
  /* 7810 */ 'm', 'f', 'v', 's', 'c', 'r', 32, 0,
  /* 7818 */ 'm', 't', 'v', 's', 'c', 'r', 32, 0,
  /* 7826 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 7836 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 7845 */ 'b', 'c', 'l', 'r', 32, 0,
  /* 7851 */ 'm', 'f', 'l', 'r', 32, 0,
  /* 7857 */ 'm', 't', 'l', 'r', 32, 0,
  /* 7863 */ 'q', 'v', 'f', 'm', 'r', 32, 0,
  /* 7870 */ 'v', 'p', 'e', 'r', 'm', 'r', 32, 0,
  /* 7878 */ 'x', 'x', 'p', 'e', 'r', 'm', 'r', 32, 0,
  /* 7887 */ 'x', 'x', 'l', 'o', 'r', 32, 0,
  /* 7894 */ 'x', 'x', 'l', 'n', 'o', 'r', 32, 0,
  /* 7902 */ 'c', 'r', 'n', 'o', 'r', 32, 0,
  /* 7909 */ 'e', 'v', 'n', 'o', 'r', 32, 0,
  /* 7916 */ 'c', 'r', 'o', 'r', 32, 0,
  /* 7922 */ 'e', 'v', 'o', 'r', 32, 0,
  /* 7928 */ 'x', 'x', 'l', 'x', 'o', 'r', 32, 0,
  /* 7936 */ 'v', 'p', 'e', 'r', 'm', 'x', 'o', 'r', 32, 0,
  /* 7946 */ 'c', 'r', 'x', 'o', 'r', 32, 0,
  /* 7953 */ 'e', 'v', 'x', 'o', 'r', 32, 0,
  /* 7960 */ 'm', 'f', 's', 'p', 'r', 32, 0,
  /* 7967 */ 'm', 't', 's', 'p', 'r', 32, 0,
  /* 7974 */ 'm', 'f', 's', 'r', 32, 0,
  /* 7980 */ 'm', 'f', 'm', 's', 'r', 32, 0,
  /* 7987 */ 'm', 't', 'm', 's', 'r', 32, 0,
  /* 7994 */ 'm', 't', 's', 'r', 32, 0,
  /* 8000 */ 'l', 'v', 's', 'r', 32, 0,
  /* 8006 */ 'b', 'c', 'c', 't', 'r', 32, 0,
  /* 8013 */ 'm', 'f', 'c', 't', 'r', 32, 0,
  /* 8020 */ 'm', 't', 'c', 't', 'r', 32, 0,
  /* 8027 */ 'q', 'v', 'f', 'a', 'b', 's', 32, 0,
  /* 8035 */ 'q', 'v', 'f', 'n', 'a', 'b', 's', 32, 0,
  /* 8044 */ 'e', 'v', 'a', 'b', 's', 32, 0,
  /* 8051 */ 'v', 's', 'u', 'm', '4', 's', 'b', 's', 32, 0,
  /* 8061 */ 'v', 's', 'u', 'b', 's', 'b', 's', 32, 0,
  /* 8070 */ 'v', 'a', 'd', 'd', 's', 'b', 's', 32, 0,
  /* 8079 */ 'v', 's', 'u', 'm', '4', 'u', 'b', 's', 32, 0,
  /* 8089 */ 'v', 's', 'u', 'b', 'u', 'b', 's', 32, 0,
  /* 8098 */ 'v', 'a', 'd', 'd', 'u', 'b', 's', 32, 0,
  /* 8107 */ 'q', 'v', 'f', 's', 'u', 'b', 's', 32, 0,
  /* 8116 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 8126 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 8137 */ 'q', 'v', 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 8146 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8156 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8167 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8182 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8196 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8207 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 8219 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 's', 32, 0,
  /* 8229 */ 'd', 'c', 'b', 't', 'd', 's', 32, 0,
  /* 8237 */ 'd', 'c', 'b', 't', 's', 't', 'd', 's', 32, 0,
  /* 8247 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 8259 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 8271 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 8283 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 8295 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 8307 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 8319 */ 'q', 'v', 'f', 'r', 'e', 's', 32, 0,
  /* 8327 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 's', 32, 0,
  /* 8339 */ 'm', 'f', 'f', 's', 32, 0,
  /* 8345 */ 'l', 'f', 's', 32, 0,
  /* 8350 */ 'm', 'c', 'r', 'f', 's', 32, 0,
  /* 8357 */ 's', 't', 'f', 's', 32, 0,
  /* 8363 */ 'v', 's', 'u', 'm', '4', 's', 'h', 's', 32, 0,
  /* 8373 */ 'v', 's', 'u', 'b', 's', 'h', 's', 32, 0,
  /* 8382 */ 'v', 'm', 'h', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 8393 */ 'v', 'm', 'h', 'r', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 8405 */ 'v', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 8414 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 's', 32, 0,
  /* 8424 */ 'v', 's', 'u', 'b', 'u', 'h', 's', 32, 0,
  /* 8433 */ 'v', 'a', 'd', 'd', 'u', 'h', 's', 32, 0,
  /* 8442 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 's', 32, 0,
  /* 8452 */ 's', 'u', 'b', 'i', 's', 32, 0,
  /* 8459 */ 'a', 'd', 'd', 'i', 's', 32, 0,
  /* 8466 */ 'l', 'i', 's', 32, 0,
  /* 8471 */ 'x', 'o', 'r', 'i', 's', 32, 0,
  /* 8478 */ 'e', 'v', 's', 'r', 'w', 'i', 's', 32, 0,
  /* 8487 */ 'q', 'v', 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 8496 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 's', 32, 0,
  /* 8506 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 32, 0,
  /* 8515 */ 'v', 'p', 'k', 's', 'd', 's', 's', 32, 0,
  /* 8524 */ 'v', 'p', 'k', 's', 'h', 's', 's', 32, 0,
  /* 8533 */ 'v', 'p', 'k', 's', 'w', 's', 's', 32, 0,
  /* 8542 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 's', 32, 0,
  /* 8552 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 's', 32, 0,
  /* 8562 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 8570 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 's', 32, 0,
  /* 8581 */ 'v', 'p', 'k', 's', 'd', 'u', 's', 32, 0,
  /* 8590 */ 'v', 'p', 'k', 'u', 'd', 'u', 's', 32, 0,
  /* 8599 */ 'v', 'p', 'k', 's', 'h', 'u', 's', 32, 0,
  /* 8608 */ 'v', 'p', 'k', 'u', 'h', 'u', 's', 32, 0,
  /* 8617 */ 'v', 'p', 'k', 's', 'w', 'u', 's', 32, 0,
  /* 8626 */ 'v', 'p', 'k', 'u', 'w', 'u', 's', 32, 0,
  /* 8635 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 8642 */ 'e', 'v', 's', 'r', 'w', 's', 32, 0,
  /* 8650 */ 'm', 't', 'v', 's', 'r', 'w', 's', 32, 0,
  /* 8659 */ 'v', 's', 'u', 'm', '2', 's', 'w', 's', 32, 0,
  /* 8669 */ 'v', 's', 'u', 'b', 's', 'w', 's', 32, 0,
  /* 8678 */ 'v', 'a', 'd', 'd', 's', 'w', 's', 32, 0,
  /* 8687 */ 'v', 's', 'u', 'm', 's', 'w', 's', 32, 0,
  /* 8696 */ 'v', 's', 'u', 'b', 'u', 'w', 's', 32, 0,
  /* 8705 */ 'v', 'a', 'd', 'd', 'u', 'w', 's', 32, 0,
  /* 8714 */ 'e', 'v', 'd', 'i', 'v', 'w', 's', 32, 0,
  /* 8723 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 8735 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 8747 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 8759 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 8771 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 8783 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 8795 */ 'v', 'c', 't', 's', 'x', 's', 32, 0,
  /* 8803 */ 'v', 'c', 't', 'u', 'x', 's', 32, 0,
  /* 8811 */ 'l', 'd', 'a', 't', 32, 0,
  /* 8817 */ 's', 't', 'd', 'a', 't', 32, 0,
  /* 8824 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8837 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8849 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8863 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8877 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 8889 */ 'l', 'w', 'a', 't', 32, 0,
  /* 8895 */ 's', 't', 'w', 'a', 't', 32, 0,
  /* 8902 */ 'd', 'c', 'b', 't', 32, 0,
  /* 8908 */ 'i', 'c', 'b', 't', 32, 0,
  /* 8914 */ 'd', 'c', 'b', 't', 'c', 't', 32, 0,
  /* 8922 */ 'd', 'c', 'b', 't', 's', 't', 'c', 't', 32, 0,
  /* 8932 */ 'q', 'v', 'f', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 8942 */ 'w', 'a', 'i', 't', 32, 0,
  /* 8948 */ 'q', 'v', 'f', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 8958 */ 'f', 's', 'q', 'r', 't', 32, 0,
  /* 8965 */ 'p', 'a', 's', 't', 'e', '_', 'l', 'a', 's', 't', 32, 0,
  /* 8977 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 8991 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 9004 */ 'd', 'c', 'b', 's', 't', 32, 0,
  /* 9011 */ 'd', 's', 't', 32, 0,
  /* 9016 */ 'c', 'o', 'p', 'y', '_', 'f', 'i', 'r', 's', 't', 32, 0,
  /* 9028 */ 'd', 'c', 'b', 't', 's', 't', 32, 0,
  /* 9036 */ 'd', 's', 't', 's', 't', 32, 0,
  /* 9043 */ 'd', 'c', 'b', 't', 't', 32, 0,
  /* 9050 */ 'd', 's', 't', 't', 32, 0,
  /* 9056 */ 'd', 'c', 'b', 't', 's', 't', 't', 32, 0,
  /* 9065 */ 'd', 's', 't', 's', 't', 't', 32, 0,
  /* 9073 */ 'l', 'h', 'a', 'u', 32, 0,
  /* 9079 */ 's', 't', 'b', 'u', 32, 0,
  /* 9085 */ 'l', 'f', 'd', 'u', 32, 0,
  /* 9091 */ 's', 't', 'f', 'd', 'u', 32, 0,
  /* 9098 */ 'm', 'u', 'l', 'h', 'd', 'u', 32, 0,
  /* 9106 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 32, 0,
  /* 9116 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 32, 0,
  /* 9126 */ 'l', 'd', 'u', 32, 0,
  /* 9131 */ 's', 't', 'd', 'u', 32, 0,
  /* 9137 */ 'd', 'i', 'v', 'd', 'u', 32, 0,
  /* 9144 */ 'd', 'i', 'v', 'd', 'e', 'u', 32, 0,
  /* 9152 */ 'd', 'i', 'v', 'w', 'e', 'u', 32, 0,
  /* 9160 */ 's', 't', 'h', 'u', 32, 0,
  /* 9166 */ 'e', 'v', 's', 'r', 'w', 'i', 'u', 32, 0,
  /* 9175 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 32, 0,
  /* 9184 */ 'f', 'c', 'm', 'p', 'u', 32, 0,
  /* 9191 */ 'l', 'f', 's', 'u', 32, 0,
  /* 9197 */ 's', 't', 'f', 's', 'u', 32, 0,
  /* 9204 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 'u', 32, 0,
  /* 9214 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 'u', 32, 0,
  /* 9224 */ 'm', 'u', 'l', 'h', 'w', 'u', 32, 0,
  /* 9232 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 32, 0,
  /* 9242 */ 'e', 'v', 's', 'r', 'w', 'u', 32, 0,
  /* 9250 */ 's', 't', 'w', 'u', 32, 0,
  /* 9256 */ 'e', 'v', 'd', 'i', 'v', 'w', 'u', 32, 0,
  /* 9265 */ 'l', 'b', 'z', 'u', 32, 0,
  /* 9271 */ 'l', 'h', 'z', 'u', 32, 0,
  /* 9277 */ 'l', 'w', 'z', 'u', 32, 0,
  /* 9283 */ 's', 'l', 'b', 'm', 'f', 'e', 'v', 32, 0,
  /* 9292 */ 'f', 'd', 'i', 'v', 32, 0,
  /* 9298 */ 'v', 's', 'l', 'v', 32, 0,
  /* 9304 */ 'x', 'x', 'l', 'e', 'q', 'v', 32, 0,
  /* 9312 */ 'c', 'r', 'e', 'q', 'v', 32, 0,
  /* 9319 */ 'e', 'v', 'e', 'q', 'v', 32, 0,
  /* 9326 */ 'v', 's', 'r', 'v', 32, 0,
  /* 9332 */ 'l', 'x', 'v', 32, 0,
  /* 9337 */ 's', 't', 'x', 'v', 32, 0,
  /* 9343 */ 'v', 'e', 'x', 't', 's', 'b', '2', 'w', 32, 0,
  /* 9353 */ 'v', 'e', 'x', 't', 's', 'h', '2', 'w', 32, 0,
  /* 9363 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 9376 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 9389 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 9402 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 9415 */ 'e', 'v', 'a', 'd', 'd', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9428 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9441 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9455 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9468 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9481 */ 'e', 'v', 'a', 'd', 'd', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9494 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9507 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9521 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9534 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 9547 */ 'e', 'v', 'a', 'd', 'd', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9560 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9573 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9587 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9600 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9613 */ 'e', 'v', 'a', 'd', 'd', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9626 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9639 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9653 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9666 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 9679 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'w', 32, 0,
  /* 9691 */ 'v', 's', 'r', 'a', 'w', 32, 0,
  /* 9698 */ 'v', 'p', 'r', 't', 'y', 'b', 'w', 32, 0,
  /* 9707 */ 'e', 'v', 'a', 'd', 'd', 'w', 32, 0,
  /* 9715 */ 'e', 'v', 'l', 'd', 'w', 32, 0,
  /* 9722 */ 'e', 'v', 'r', 'n', 'd', 'w', 32, 0,
  /* 9730 */ 'e', 'v', 's', 't', 'd', 'w', 32, 0,
  /* 9738 */ 'v', 'm', 'r', 'g', 'e', 'w', 32, 0,
  /* 9746 */ 'v', 'c', 'm', 'p', 'n', 'e', 'w', 32, 0,
  /* 9755 */ 'e', 'v', 's', 'u', 'b', 'f', 'w', 32, 0,
  /* 9764 */ 'e', 'v', 's', 'u', 'b', 'i', 'f', 'w', 32, 0,
  /* 9774 */ 'v', 'n', 'e', 'g', 'w', 32, 0,
  /* 9781 */ 'v', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 9789 */ 'x', 'x', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 9798 */ 'm', 'u', 'l', 'h', 'w', 32, 0,
  /* 9805 */ 'e', 'v', 'a', 'd', 'd', 'i', 'w', 32, 0,
  /* 9814 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 32, 0,
  /* 9823 */ 'v', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 9831 */ 'x', 'x', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 9840 */ 'm', 'u', 'l', 'l', 'w', 32, 0,
  /* 9847 */ 'c', 'm', 'p', 'l', 'w', 32, 0,
  /* 9854 */ 'e', 'v', 'r', 'l', 'w', 32, 0,
  /* 9861 */ 'e', 'v', 's', 'l', 'w', 32, 0,
  /* 9868 */ 'l', 'm', 'w', 32, 0,
  /* 9873 */ 's', 't', 'm', 'w', 32, 0,
  /* 9879 */ 'v', 'p', 'm', 's', 'u', 'm', 'w', 32, 0,
  /* 9888 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 9901 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 9914 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 9927 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 9940 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 9953 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 9966 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 9979 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 9992 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10005 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 10018 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10031 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10044 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10057 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10070 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10083 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 10096 */ 'v', 'm', 'r', 'g', 'o', 'w', 32, 0,
  /* 10104 */ 'c', 'm', 'p', 'w', 32, 0,
  /* 10110 */ 'x', 'x', 'b', 'r', 'w', 32, 0,
  /* 10117 */ 'v', 's', 'r', 'w', 32, 0,
  /* 10123 */ 'v', 'm', 'u', 'l', 'e', 's', 'w', 32, 0,
  /* 10132 */ 'v', 'a', 'v', 'g', 's', 'w', 32, 0,
  /* 10140 */ 'v', 'u', 'p', 'k', 'h', 's', 'w', 32, 0,
  /* 10149 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'w', 32, 0,
  /* 10159 */ 'v', 'u', 'p', 'k', 'l', 's', 'w', 32, 0,
  /* 10168 */ 'e', 'v', 'c', 'n', 't', 'l', 's', 'w', 32, 0,
  /* 10178 */ 'v', 'm', 'i', 'n', 's', 'w', 32, 0,
  /* 10186 */ 'v', 'm', 'u', 'l', 'o', 's', 'w', 32, 0,
  /* 10195 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', 32, 0,
  /* 10205 */ 'e', 'x', 't', 's', 'w', 32, 0,
  /* 10212 */ 'v', 'm', 'a', 'x', 's', 'w', 32, 0,
  /* 10220 */ 'v', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 10228 */ 'x', 'x', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 10237 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'w', 32, 0,
  /* 10247 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'w', 32, 0,
  /* 10257 */ 'x', 'x', 'i', 'n', 's', 'e', 'r', 't', 'w', 32, 0,
  /* 10268 */ 's', 't', 'w', 32, 0,
  /* 10273 */ 'v', 's', 'u', 'b', 'c', 'u', 'w', 32, 0,
  /* 10282 */ 'v', 'a', 'd', 'd', 'c', 'u', 'w', 32, 0,
  /* 10291 */ 'v', 'a', 'b', 's', 'd', 'u', 'w', 32, 0,
  /* 10300 */ 'v', 'm', 'u', 'l', 'e', 'u', 'w', 32, 0,
  /* 10309 */ 'v', 'a', 'v', 'g', 'u', 'w', 32, 0,
  /* 10317 */ 'v', 'm', 'i', 'n', 'u', 'w', 32, 0,
  /* 10325 */ 'v', 'm', 'u', 'l', 'o', 'u', 'w', 32, 0,
  /* 10334 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', 32, 0,
  /* 10344 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'w', 32, 0,
  /* 10356 */ 'x', 'x', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'w', 32, 0,
  /* 10369 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', 32, 0,
  /* 10379 */ 'v', 'm', 'a', 'x', 'u', 'w', 32, 0,
  /* 10387 */ 'd', 'i', 'v', 'w', 32, 0,
  /* 10393 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'w', 32, 0,
  /* 10403 */ 'v', 'c', 'l', 'z', 'w', 32, 0,
  /* 10410 */ 'e', 'v', 'c', 'n', 't', 'l', 'z', 'w', 32, 0,
  /* 10420 */ 'v', 'c', 't', 'z', 'w', 32, 0,
  /* 10427 */ 'c', 'n', 't', 't', 'z', 'w', 32, 0,
  /* 10435 */ 'l', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 10443 */ 's', 't', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 10452 */ 'l', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 10460 */ 's', 't', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 10469 */ 'l', 'x', 'v', 'b', '1', '6', 'x', 32, 0,
  /* 10478 */ 's', 't', 'x', 'v', 'b', '1', '6', 'x', 32, 0,
  /* 10488 */ 'l', 'x', 'v', 'h', '8', 'x', 32, 0,
  /* 10496 */ 's', 't', 'x', 'v', 'h', '8', 'x', 32, 0,
  /* 10505 */ 'l', 'h', 'a', 'x', 32, 0,
  /* 10511 */ 't', 'l', 'b', 'i', 'v', 'a', 'x', 32, 0,
  /* 10520 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 32, 0,
  /* 10530 */ 'l', 'x', 's', 'i', 'w', 'a', 'x', 32, 0,
  /* 10539 */ 'l', 'w', 'a', 'x', 32, 0,
  /* 10545 */ 'l', 'v', 'e', 'b', 'x', 32, 0,
  /* 10552 */ 's', 't', 'v', 'e', 'b', 'x', 32, 0,
  /* 10560 */ 's', 't', 'x', 's', 'i', 'b', 'x', 32, 0,
  /* 10569 */ 's', 't', 'b', 'x', 32, 0,
  /* 10575 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 32, 0,
  /* 10584 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 32, 0,
  /* 10594 */ 'e', 'v', 'l', 'd', 'd', 'x', 32, 0,
  /* 10602 */ 'e', 'v', 's', 't', 'd', 'd', 'x', 32, 0,
  /* 10611 */ 'q', 'v', 'l', 'f', 'd', 'x', 32, 0,
  /* 10619 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 32, 0,
  /* 10628 */ 'q', 'v', 'l', 'p', 'c', 'l', 'd', 'x', 32, 0,
  /* 10638 */ 'q', 'v', 'l', 'p', 'c', 'r', 'd', 'x', 32, 0,
  /* 10648 */ 'l', 'x', 's', 'd', 'x', 32, 0,
  /* 10655 */ 's', 't', 'x', 's', 'd', 'x', 32, 0,
  /* 10663 */ 's', 't', 'd', 'x', 32, 0,
  /* 10669 */ 'e', 'v', 'l', 'w', 'h', 'e', 'x', 32, 0,
  /* 10678 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 'x', 32, 0,
  /* 10688 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 'x', 32, 0,
  /* 10698 */ 'e', 'v', 'l', 'd', 'h', 'x', 32, 0,
  /* 10706 */ 'e', 'v', 's', 't', 'd', 'h', 'x', 32, 0,
  /* 10715 */ 'l', 'v', 'e', 'h', 'x', 32, 0,
  /* 10722 */ 's', 't', 'v', 'e', 'h', 'x', 32, 0,
  /* 10730 */ 's', 't', 'x', 's', 'i', 'h', 'x', 32, 0,
  /* 10739 */ 's', 't', 'h', 'x', 32, 0,
  /* 10745 */ 's', 't', 'b', 'c', 'i', 'x', 32, 0,
  /* 10753 */ 'l', 'd', 'c', 'i', 'x', 32, 0,
  /* 10760 */ 's', 't', 'd', 'c', 'i', 'x', 32, 0,
  /* 10768 */ 's', 't', 'h', 'c', 'i', 'x', 32, 0,
  /* 10776 */ 's', 't', 'w', 'c', 'i', 'x', 32, 0,
  /* 10784 */ 'l', 'b', 'z', 'c', 'i', 'x', 32, 0,
  /* 10792 */ 'l', 'h', 'z', 'c', 'i', 'x', 32, 0,
  /* 10800 */ 'l', 'w', 'z', 'c', 'i', 'x', 32, 0,
  /* 10808 */ 'x', 's', 'r', 'q', 'p', 'i', 'x', 32, 0,
  /* 10817 */ 'v', 'e', 'x', 't', 'u', 'b', 'l', 'x', 32, 0,
  /* 10827 */ 'v', 'e', 'x', 't', 'u', 'h', 'l', 'x', 32, 0,
  /* 10837 */ 'v', 'e', 'x', 't', 'u', 'w', 'l', 'x', 32, 0,
  /* 10847 */ 'l', 'd', 'm', 'x', 32, 0,
  /* 10853 */ 'v', 's', 'b', 'o', 'x', 32, 0,
  /* 10860 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 'x', 32, 0,
  /* 10870 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 'x', 32, 0,
  /* 10880 */ 'v', 'u', 'p', 'k', 'h', 'p', 'x', 32, 0,
  /* 10889 */ 'v', 'p', 'k', 'p', 'x', 32, 0,
  /* 10896 */ 'v', 'u', 'p', 'k', 'l', 'p', 'x', 32, 0,
  /* 10905 */ 'l', 'x', 's', 's', 'p', 'x', 32, 0,
  /* 10913 */ 's', 't', 'x', 's', 's', 'p', 'x', 32, 0,
  /* 10922 */ 'l', 'b', 'a', 'r', 'x', 32, 0,
  /* 10929 */ 'l', 'd', 'a', 'r', 'x', 32, 0,
  /* 10936 */ 'l', 'h', 'a', 'r', 'x', 32, 0,
  /* 10943 */ 'l', 'w', 'a', 'r', 'x', 32, 0,
  /* 10950 */ 'l', 'd', 'b', 'r', 'x', 32, 0,
  /* 10957 */ 's', 't', 'd', 'b', 'r', 'x', 32, 0,
  /* 10965 */ 'l', 'h', 'b', 'r', 'x', 32, 0,
  /* 10972 */ 's', 't', 'h', 'b', 'r', 'x', 32, 0,
  /* 10980 */ 'v', 'e', 'x', 't', 'u', 'b', 'r', 'x', 32, 0,
  /* 10990 */ 'l', 'w', 'b', 'r', 'x', 32, 0,
  /* 10997 */ 's', 't', 'w', 'b', 'r', 'x', 32, 0,
  /* 11005 */ 'v', 'e', 'x', 't', 'u', 'h', 'r', 'x', 32, 0,
  /* 11015 */ 'v', 'e', 'x', 't', 'u', 'w', 'r', 'x', 32, 0,
  /* 11025 */ 'm', 'c', 'r', 'x', 'r', 'x', 32, 0,
  /* 11033 */ 't', 'l', 'b', 's', 'x', 32, 0,
  /* 11040 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 32, 0,
  /* 11049 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 32, 0,
  /* 11059 */ 'l', 'x', 'v', 'd', 's', 'x', 32, 0,
  /* 11067 */ 'v', 'c', 'f', 's', 'x', 32, 0,
  /* 11074 */ 'q', 'v', 'l', 'f', 's', 'x', 32, 0,
  /* 11082 */ 'q', 'v', 's', 't', 'f', 's', 'x', 32, 0,
  /* 11091 */ 'q', 'v', 'l', 'p', 'c', 'l', 's', 'x', 32, 0,
  /* 11101 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 'x', 32, 0,
  /* 11111 */ 'q', 'v', 'l', 'p', 'c', 'r', 's', 'x', 32, 0,
  /* 11121 */ 'l', 'x', 'v', 'w', 's', 'x', 32, 0,
  /* 11129 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11143 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11156 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11171 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11186 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 11199 */ 'l', 'h', 'a', 'u', 'x', 32, 0,
  /* 11206 */ 'l', 'w', 'a', 'u', 'x', 32, 0,
  /* 11213 */ 's', 't', 'b', 'u', 'x', 32, 0,
  /* 11220 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 11230 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 11241 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 32, 0,
  /* 11250 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 32, 0,
  /* 11260 */ 'l', 'd', 'u', 'x', 32, 0,
  /* 11266 */ 's', 't', 'd', 'u', 'x', 32, 0,
  /* 11273 */ 'v', 'c', 'f', 'u', 'x', 32, 0,
  /* 11280 */ 's', 't', 'h', 'u', 'x', 32, 0,
  /* 11287 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 'x', 32, 0,
  /* 11297 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 11307 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 11318 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 32, 0,
  /* 11327 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 32, 0,
  /* 11337 */ 's', 't', 'w', 'u', 'x', 32, 0,
  /* 11344 */ 'l', 'b', 'z', 'u', 'x', 32, 0,
  /* 11351 */ 'l', 'h', 'z', 'u', 'x', 32, 0,
  /* 11358 */ 'l', 'w', 'z', 'u', 'x', 32, 0,
  /* 11365 */ 'l', 'v', 'x', 32, 0,
  /* 11370 */ 's', 't', 'v', 'x', 32, 0,
  /* 11376 */ 'l', 'x', 'v', 'x', 32, 0,
  /* 11382 */ 's', 't', 'x', 'v', 'x', 32, 0,
  /* 11389 */ 'e', 'v', 'l', 'd', 'w', 'x', 32, 0,
  /* 11397 */ 'e', 'v', 's', 't', 'd', 'w', 'x', 32, 0,
  /* 11406 */ 'l', 'v', 'e', 'w', 'x', 32, 0,
  /* 11413 */ 's', 't', 'v', 'e', 'w', 'x', 32, 0,
  /* 11421 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 32, 0,
  /* 11431 */ 's', 't', 'x', 's', 'i', 'w', 'x', 32, 0,
  /* 11440 */ 's', 't', 'w', 'x', 32, 0,
  /* 11446 */ 'l', 'x', 's', 'i', 'b', 'z', 'x', 32, 0,
  /* 11455 */ 'l', 'b', 'z', 'x', 32, 0,
  /* 11461 */ 'l', 'x', 's', 'i', 'h', 'z', 'x', 32, 0,
  /* 11470 */ 'l', 'h', 'z', 'x', 32, 0,
  /* 11476 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 32, 0,
  /* 11486 */ 'l', 'x', 's', 'i', 'w', 'z', 'x', 32, 0,
  /* 11495 */ 'l', 'w', 'z', 'x', 32, 0,
  /* 11501 */ 'c', 'o', 'p', 'y', 32, 0,
  /* 11507 */ 'd', 'c', 'b', 'z', 32, 0,
  /* 11513 */ 'l', 'b', 'z', 32, 0,
  /* 11518 */ 'b', 'd', 'z', 32, 0,
  /* 11523 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'z', 32, 0,
  /* 11533 */ 'x', 's', 'c', 'v', 'q', 'p', 's', 'd', 'z', 32, 0,
  /* 11544 */ 'x', 's', 'c', 'v', 'q', 'p', 'u', 'd', 'z', 32, 0,
  /* 11555 */ 'l', 'h', 'z', 32, 0,
  /* 11560 */ 'v', 'r', 'f', 'i', 'z', 32, 0,
  /* 11567 */ 'x', 's', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 11576 */ 'x', 'v', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 11585 */ 'x', 'v', 'r', 's', 'p', 'i', 'z', 32, 0,
  /* 11594 */ 'q', 'v', 'f', 'r', 'i', 'z', 32, 0,
  /* 11602 */ 'b', 'd', 'n', 'z', 32, 0,
  /* 11608 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 'z', 32, 0,
  /* 11619 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 'z', 32, 0,
  /* 11630 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'z', 32, 0,
  /* 11640 */ 'l', 'w', 'z', 32, 0,
  /* 11645 */ 'm', 'f', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 11654 */ 'm', 't', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 11663 */ 'x', 's', 'c', 'v', 'q', 'p', 's', 'w', 'z', 32, 0,
  /* 11674 */ 'x', 's', 'c', 'v', 'q', 'p', 'u', 'w', 'z', 32, 0,
  /* 11685 */ 'b', 'd', 'z', 'l', 'r', 'l', '+', 0,
  /* 11693 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '+', 0,
  /* 11702 */ 'b', 'd', 'z', 'l', 'r', '+', 0,
  /* 11709 */ 'b', 'd', 'n', 'z', 'l', 'r', '+', 0,
  /* 11717 */ 'b', 'd', 'z', 'l', 'r', 'l', '-', 0,
  /* 11725 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '-', 0,
  /* 11734 */ 'b', 'd', 'z', 'l', 'r', '-', 0,
  /* 11741 */ 'b', 'd', 'n', 'z', 'l', 'r', '-', 0,
  /* 11749 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 11780 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 11803 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 11826 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 11848 */ 't', 'r', 'e', 'c', 'h', 'k', 'p', 't', '.', 0,
  /* 11858 */ 'o', 'r', 'i', 32, '1', ',', 32, '1', ',', 32, '0', 0,
  /* 11870 */ 'o', 'r', 'i', 32, '2', ',', 32, '2', ',', 32, '0', 0,
  /* 11882 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', '3', '2', 0,
  /* 11899 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 11920 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 11941 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 11963 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 11984 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 12006 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 12027 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 12044 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 12065 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 12085 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 12107 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 12128 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', '3', '2', 0,
  /* 12142 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', '3', '2', 0,
  /* 12156 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 12171 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 12186 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '3', '2', 0,
  /* 12205 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '3', '2', 0,
  /* 12223 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 12241 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 12259 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 12274 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 12287 */ '#', 'D', 'F', 'L', 'O', 'A', 'D', 'f', '3', '2', 0,
  /* 12298 */ '#', 'D', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '3', '2', 0,
  /* 12310 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 12331 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 12352 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 12374 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '6', '4', 0,
  /* 12396 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '6', '4', 0,
  /* 12417 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 12434 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 12455 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 12476 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 12496 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '6', '4', 0,
  /* 12518 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '6', '4', 0,
  /* 12539 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '6', '4', 0,
  /* 12558 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '6', '4', 0,
  /* 12576 */ '#', 'D', 'F', 'L', 'O', 'A', 'D', 'f', '6', '4', 0,
  /* 12587 */ '#', 'D', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '6', '4', 0,
  /* 12599 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'i', '6', '4', 0,
  /* 12620 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 12634 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '4', 0,
  /* 12645 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 12659 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '4', 0,
  /* 12670 */ 'c', 'r', 'x', 'o', 'r', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 12684 */ 'c', 'r', 'e', 'q', 'v', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 12698 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 12719 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 12740 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 12762 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 12783 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '1', '6', 0,
  /* 12805 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '1', '6', 0,
  /* 12826 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 12843 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 12864 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 12884 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '1', '6', 0,
  /* 12906 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '1', '6', 0,
  /* 12927 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 12938 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 12952 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '8', 0,
  /* 12963 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 12983 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 12997 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 13017 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 13038 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 13058 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '8', 0,
  /* 13079 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '8', 0,
  /* 13099 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 13119 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 13138 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 13157 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '8', 0,
  /* 13168 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '8', 0,
  /* 13189 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '8', 0,
  /* 13209 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 13222 */ '#', 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', '8', 0,
  /* 13238 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', '8', 0,
  /* 13255 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', '8', 0,
  /* 13272 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'i', '8', 0,
  /* 13288 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 13300 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 13314 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 13328 */ '#', 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 13345 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 13360 */ '#', 'R', 'e', 'a', 'd', 'T', 'B', 0,
  /* 13368 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 13378 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'B', 'R', 'C', 0,
  /* 13394 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'B', 'R', 'C', 0,
  /* 13407 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'R', 'C', 0,
  /* 13423 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'F', 'R', 'C', 0,
  /* 13436 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 13453 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 13467 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 13483 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'R', 'R', 'C', 0,
  /* 13496 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'S', 'R', 'C', 0,
  /* 13512 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'S', 'R', 'C', 0,
  /* 13525 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 13542 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 13556 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'R', 'C', 0,
  /* 13572 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'R', 'C', 0,
  /* 13585 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 13598 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 13605 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 13615 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 13631 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 13645 */ '#', 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 13655 */ '#', 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 13663 */ '#', 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 13673 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 13685 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 13697 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 13710 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 13723 */ '#', 'U', 'p', 'd', 'a', 't', 'e', 'G', 'B', 'R', 0,
  /* 13734 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 13746 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 13756 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 13772 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 13788 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 13802 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 13814 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 13826 */ '#', 'M', 'o', 'v', 'e', 'G', 'O', 'T', 't', 'o', 'L', 'R', 0,
  /* 13839 */ '#', 'T', 'C', 'H', 'E', 'C', 'K', '_', 'R', 'E', 'T', 0,
  /* 13851 */ '#', 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', 0,
  /* 13866 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 13881 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 13894 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', 0,
  /* 13910 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', 0,
  /* 13926 */ '#', 'P', 'P', 'C', '3', '2', 'G', 'O', 'T', 0,
  /* 13936 */ '#', 'P', 'P', 'C', '3', '2', 'P', 'I', 'C', 'G', 'O', 'T', 0,
  /* 13949 */ '#', 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 13959 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 13974 */ 'b', 'c', 'a', 0,
  /* 13978 */ 's', 'l', 'b', 'i', 'a', 0,
  /* 13984 */ 't', 'l', 'b', 'i', 'a', 0,
  /* 13990 */ 'b', 'c', 'l', 'a', 0,
  /* 13995 */ 'c', 'l', 'r', 'b', 'h', 'r', 'b', 0,
  /* 14003 */ 'b', 'c', 0,
  /* 14006 */ 's', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 14014 */ 't', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 14022 */ 'm', 's', 'g', 's', 'y', 'n', 'c', 0,
  /* 14030 */ 'i', 's', 'y', 'n', 'c', 0,
  /* 14036 */ 'm', 's', 'y', 'n', 'c', 0,
  /* 14042 */ '#', 'L', 'D', 't', 'o', 'c', 0,
  /* 14049 */ '#', 'L', 'W', 'Z', 't', 'o', 'c', 0,
  /* 14057 */ 'h', 'r', 'f', 'i', 'd', 0,
  /* 14063 */ 't', 'l', 'b', 'r', 'e', 0,
  /* 14069 */ 't', 'l', 'b', 'w', 'e', 0,
  /* 14075 */ 'r', 'f', 'c', 'i', 0,
  /* 14080 */ 'r', 'f', 'm', 'c', 'i', 0,
  /* 14086 */ 'r', 'f', 'd', 'i', 0,
  /* 14091 */ 'r', 'f', 'i', 0,
  /* 14095 */ 'b', 'c', 'l', 0,
  /* 14099 */ 'd', 's', 's', 'a', 'l', 'l', 0,
  /* 14106 */ 'b', 'l', 'r', 'l', 0,
  /* 14111 */ 'b', 'd', 'z', 'l', 'r', 'l', 0,
  /* 14118 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', 0,
  /* 14126 */ 'b', 'c', 't', 'r', 'l', 0,
  /* 14132 */ 'a', 't', 't', 'n', 0,
  /* 14137 */ 'e', 'i', 'e', 'i', 'o', 0,
  /* 14143 */ 'n', 'a', 'p', 0,
  /* 14147 */ 't', 'r', 'a', 'p', 0,
  /* 14152 */ 'n', 'o', 'p', 0,
  /* 14156 */ 's', 't', 'o', 'p', 0,
  /* 14161 */ 'b', 'l', 'r', 0,
  /* 14165 */ 'b', 'd', 'z', 'l', 'r', 0,
  /* 14171 */ 'b', 'd', 'n', 'z', 'l', 'r', 0,
  /* 14178 */ 'b', 'c', 't', 'r', 0,
  /* 14183 */ 'c', 'p', '_', 'a', 'b', 'o', 'r', 't', 0,
  };

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    13606U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    13599U,	// BUNDLE
    13960U,	// LIFETIME_START
    13586U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// PATCHABLE_OP
    11781U,	// PATCHABLE_FUNCTION_ENTER
    11750U,	// PATCHABLE_RET
    11827U,	// PATCHABLE_FUNCTION_EXIT
    11804U,	// PATCHABLE_TAIL_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_INSERT
    0U,	// G_SEQUENCE
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_BR
    19678U,	// ADD4
    19678U,	// ADD4TLS
    16891U,	// ADD4o
    19678U,	// ADD8
    19678U,	// ADD8TLS
    19678U,	// ADD8TLS_
    16891U,	// ADD8o
    19464U,	// ADDC
    19464U,	// ADDC8
    16786U,	// ADDC8o
    16786U,	// ADDCo
    20117U,	// ADDE
    20117U,	// ADDE8
    17030U,	// ADDE8o
    17030U,	// ADDEo
    20783U,	// ADDI
    20783U,	// ADDI8
    19509U,	// ADDIC
    19509U,	// ADDIC8
    16827U,	// ADDICo
    24844U,	// ADDIS
    24844U,	// ADDIS8
    13346U,	// ADDISdtprelHA
    11883U,	// ADDISdtprelHA32
    13329U,	// ADDISgotTprelHA
    13301U,	// ADDIStlsgdHA
    13315U,	// ADDIStlsldHA
    13289U,	// ADDIStocHA
    13711U,	// ADDIdtprelL
    12172U,	// ADDIdtprelL32
    13674U,	// ADDItlsgdL
    12129U,	// ADDItlsgdL32
    13757U,	// ADDItlsgdLADDR
    12224U,	// ADDItlsgdLADDR32
    13686U,	// ADDItlsldL
    12143U,	// ADDItlsldL32
    13773U,	// ADDItlsldLADDR
    12242U,	// ADDItlsldLADDR32
    13664U,	// ADDItocL
    536891096U,	// ADDME
    536891096U,	// ADDME8
    536887965U,	// ADDME8o
    536887965U,	// ADDMEo
    536891174U,	// ADDZE
    536891174U,	// ADDZE8
    536888014U,	// ADDZE8o
    536888014U,	// ADDZEo
    559026U,	// ADJCALLSTACKDOWN
    17860549U,	// ADJCALLSTACKUP
    19880U,	// AND
    19880U,	// AND8
    16953U,	// AND8o
    19473U,	// ANDC
    19473U,	// ANDC8
    16793U,	// ANDC8o
    16793U,	// ANDCo
    17862U,	// ANDISo
    17862U,	// ANDISo8
    17255U,	// ANDIo
    17255U,	// ANDIo8
    13895U,	// ANDIo_1_EQ_BIT
    13239U,	// ANDIo_1_EQ_BIT8
    13911U,	// ANDIo_1_GT_BIT
    13256U,	// ANDIo_1_GT_BIT8
    16953U,	// ANDo
    1108363107U,	// ATOMIC_CMP_SWAP_I16
    1108363085U,	// ATOMIC_CMP_SWAP_I32
    12435U,	// ATOMIC_CMP_SWAP_I64
    13100U,	// ATOMIC_CMP_SWAP_I8
    12720U,	// ATOMIC_LOAD_ADD_I16
    11921U,	// ATOMIC_LOAD_ADD_I32
    12332U,	// ATOMIC_LOAD_ADD_I64
    12998U,	// ATOMIC_LOAD_ADD_I8
    12763U,	// ATOMIC_LOAD_AND_I16
    11964U,	// ATOMIC_LOAD_AND_I32
    12600U,	// ATOMIC_LOAD_AND_I64
    13039U,	// ATOMIC_LOAD_AND_I8
    12907U,	// ATOMIC_LOAD_MAX_I16
    12108U,	// ATOMIC_LOAD_MAX_I32
    12519U,	// ATOMIC_LOAD_MAX_I64
    13190U,	// ATOMIC_LOAD_MAX_I8
    12806U,	// ATOMIC_LOAD_MIN_I16
    12007U,	// ATOMIC_LOAD_MIN_I32
    12397U,	// ATOMIC_LOAD_MIN_I64
    13080U,	// ATOMIC_LOAD_MIN_I8
    12741U,	// ATOMIC_LOAD_NAND_I16
    11942U,	// ATOMIC_LOAD_NAND_I32
    12353U,	// ATOMIC_LOAD_NAND_I64
    13018U,	// ATOMIC_LOAD_NAND_I8
    12865U,	// ATOMIC_LOAD_OR_I16
    12066U,	// ATOMIC_LOAD_OR_I32
    12477U,	// ATOMIC_LOAD_OR_I64
    13139U,	// ATOMIC_LOAD_OR_I8
    12699U,	// ATOMIC_LOAD_SUB_I16
    11900U,	// ATOMIC_LOAD_SUB_I32
    12311U,	// ATOMIC_LOAD_SUB_I64
    12964U,	// ATOMIC_LOAD_SUB_I8
    12885U,	// ATOMIC_LOAD_UMAX_I16
    12086U,	// ATOMIC_LOAD_UMAX_I32
    12497U,	// ATOMIC_LOAD_UMAX_I64
    13169U,	// ATOMIC_LOAD_UMAX_I8
    12784U,	// ATOMIC_LOAD_UMIN_I16
    11985U,	// ATOMIC_LOAD_UMIN_I32
    12375U,	// ATOMIC_LOAD_UMIN_I64
    13059U,	// ATOMIC_LOAD_UMIN_I8
    12844U,	// ATOMIC_LOAD_XOR_I16
    12045U,	// ATOMIC_LOAD_XOR_I32
    12456U,	// ATOMIC_LOAD_XOR_I64
    13120U,	// ATOMIC_LOAD_XOR_I8
    12827U,	// ATOMIC_SWAP_I16
    12028U,	// ATOMIC_SWAP_I32
    12418U,	// ATOMIC_SWAP_I64
    13273U,	// ATOMIC_SWAP_I8
    14133U,	// ATTN
    576141U,	// B
    591967U,	// BA
    50348160U,	// BC
    1668786U,	// BCC
    2193074U,	// BCCA
    2717362U,	// BCCCTR
    2717362U,	// BCCCTR8
    3241650U,	// BCCCTRL
    3241650U,	// BCCCTRL8
    3765938U,	// BCCL
    4290226U,	// BCCLA
    4814514U,	// BCCLR
    5338802U,	// BCCLRL
    5783730U,	// BCCTR
    5783730U,	// BCCTR8
    5783786U,	// BCCTR8n
    5783708U,	// BCCTRL
    5783708U,	// BCCTRL8
    5783766U,	// BCCTRL8n
    5783766U,	// BCCTRLn
    5783786U,	// BCCTRn
    17464U,	// BCDCFNo
    17683U,	// BCDCFSQo
    18183U,	// BCDCFZo
    17473U,	// BCDCPSGNo
    536888433U,	// BCDCTNo
    536888605U,	// BCDCTSQo
    18199U,	// BCDCTZo
    17493U,	// BCDSETSGNo
    17738U,	// BCDSRo
    17794U,	// BCDSo
    16843U,	// BCDTRUNCo
    17887U,	// BCDUSo
    16854U,	// BCDUTRUNCo
    50348168U,	// BCL
    5783720U,	// BCLR
    5783697U,	// BCLRL
    5783756U,	// BCLRLn
    5783777U,	// BCLRn
    573541U,	// BCLalways
    50348228U,	// BCLn
    14179U,	// BCTR
    14179U,	// BCTR8
    14127U,	// BCTRL
    14127U,	// BCTRL8
    98418U,	// BCTRL8_LDinto_toc
    50348221U,	// BCn
    585043U,	// BDNZ
    585043U,	// BDNZ8
    592514U,	// BDNZA
    590104U,	// BDNZAm
    589889U,	// BDNZAp
    578576U,	// BDNZL
    592278U,	// BDNZLA
    590088U,	// BDNZLAm
    589873U,	// BDNZLAp
    14172U,	// BDNZLR
    14172U,	// BDNZLR8
    14119U,	// BDNZLRL
    11726U,	// BDNZLRLm
    11694U,	// BDNZLRLp
    11742U,	// BDNZLRm
    11710U,	// BDNZLRp
    573735U,	// BDNZLm
    573520U,	// BDNZLp
    573749U,	// BDNZm
    573534U,	// BDNZp
    584959U,	// BDZ
    584959U,	// BDZ8
    592508U,	// BDZA
    590097U,	// BDZAm
    589882U,	// BDZAp
    578570U,	// BDZL
    592271U,	// BDZLA
    590080U,	// BDZLAm
    589865U,	// BDZLAp
    14166U,	// BDZLR
    14166U,	// BDZLR8
    14112U,	// BDZLRL
    11718U,	// BDZLRLm
    11686U,	// BDZLRLp
    11735U,	// BDZLRm
    11703U,	// BDZLRp
    573728U,	// BDZLm
    573513U,	// BDZLp
    573743U,	// BDZm
    573528U,	// BDZp
    578418U,	// BL
    578418U,	// BL8
    6345586U,	// BL8_NOP
    6411122U,	// BL8_NOP_TLS
    643954U,	// BL8_TLS
    643954U,	// BL8_TLS_
    592260U,	// BLA
    592260U,	// BLA8
    6359428U,	// BLA8_NOP
    14162U,	// BLR
    14162U,	// BLR8
    14107U,	// BLRL
    643954U,	// BL_TLS
    19860U,	// BPERMD
    19558U,	// BRINC
    13996U,	// CLRBHRB
    20797U,	// CLRLSLDI
    17235U,	// CLRLSLDIo
    21163U,	// CLRLSLWI
    17333U,	// CLRLSLWIo
    20832U,	// CLRRDI
    17262U,	// CLRRDIo
    21204U,	// CLRRWI
    17362U,	// CLRRWIo
    19171U,	// CMPB
    19171U,	// CMPB8
    19924U,	// CMPD
    20825U,	// CMPDI
    19177U,	// CMPEQB
    19831U,	// CMPLD
    20789U,	// CMPLDI
    26232U,	// CMPLW
    21147U,	// CMPLWI
    67128049U,	// CMPRB
    67128049U,	// CMPRB8
    26489U,	// CMPW
    21197U,	// CMPWI
    536890997U,	// CNTLZD
    536887924U,	// CNTLZDo
    536897709U,	// CNTLZW
    536897709U,	// CNTLZW8
    536889028U,	// CNTLZW8o
    536889028U,	// CNTLZWo
    536891012U,	// CNTTZD
    536887933U,	// CNTTZDo
    536897724U,	// CNTTZW
    536897724U,	// CNTTZW8
    536889037U,	// CNTTZW8o
    536889037U,	// CNTTZWo
    14184U,	// CP_ABORT
    27886U,	// CP_COPY
    27886U,	// CP_COPY8
    536896313U,	// CP_COPY_FIRST
    536898798U,	// CP_COPYx
    20232U,	// CP_PASTE
    20232U,	// CP_PASTE8
    17086U,	// CP_PASTE8o
    536896262U,	// CP_PASTE_LAST
    17086U,	// CP_PASTEo
    536891144U,	// CP_PASTEx
    12685U,	// CR6SET
    12671U,	// CR6UNSET
    19910U,	// CRAND
    19479U,	// CRANDC
    25697U,	// CREQV
    19894U,	// CRNAND
    24287U,	// CRNOR
    24301U,	// CROR
    19579U,	// CRORC
    83911777U,	// CRSET
    83910411U,	// CRUNSET
    24331U,	// CRXOR
    657501U,	// DCBA
    151349U,	// DCBF
    660397U,	// DCBFL
    662146U,	// DCBFLP
    659253U,	// DCBFx
    659712U,	// DCBI
    664365U,	// DCBST
    156359U,	// DCBT
    637674195U,	// DCBTCT
    637673510U,	// DCBTDS
    156485U,	// DCBTST
    637674203U,	// DCBTSTCT
    637673518U,	// DCBTSTDS
    664417U,	// DCBTSTT
    664389U,	// DCBTSTx
    664404U,	// DCBTT
    664263U,	// DCBTx
    666868U,	// DCBZ
    660483U,	// DCBZL
    536891666U,	// DCCCI
    12288U,	// DFLOADf32
    12577U,	// DFLOADf64
    12299U,	// DFSTOREf32
    12588U,	// DFSTOREf64
    20072U,	// DIVD
    20123U,	// DIVDE
    25529U,	// DIVDEU
    17956U,	// DIVDEUo
    17037U,	// DIVDEo
    25522U,	// DIVDU
    17948U,	// DIVDUo
    17005U,	// DIVDo
    26772U,	// DIVW
    20246U,	// DIVWE
    25537U,	// DIVWEU
    17965U,	// DIVWEUo
    17094U,	// DIVWEo
    25643U,	// DIVWU
    17983U,	// DIVWUo
    18098U,	// DIVWo
    696648U,	// DSS
    14100U,	// DSSALL
    1728242484U,	// DST
    1728242484U,	// DST64
    1728242509U,	// DSTST
    1728242509U,	// DSTST64
    1728242538U,	// DSTSTT
    1728242538U,	// DSTSTT64
    1728242523U,	// DSTT
    1728242523U,	// DSTT64
    13369U,	// DYNALLOC
    12928U,	// DYNALLOC8
    13852U,	// DYNAREAOFFSET
    13223U,	// DYNAREAOFFSET8
    12187U,	// EH_SjLj_LongJmp32
    12540U,	// EH_SjLj_LongJmp64
    12206U,	// EH_SjLj_SetJmp32
    12559U,	// EH_SjLj_SetJmp64
    573441U,	// EH_SjLj_Setup
    25692U,	// EQV
    25692U,	// EQV8
    17998U,	// EQV8o
    17998U,	// EQVo
    536895341U,	// EVABS
    100689486U,	// EVADDIW
    536896712U,	// EVADDSMIAAW
    536896844U,	// EVADDSSIAAW
    536896778U,	// EVADDUMIAAW
    536896910U,	// EVADDUSIAAW
    26092U,	// EVADDW
    19917U,	// EVAND
    19487U,	// EVANDC
    24034U,	// EVCMPEQ
    24927U,	// EVCMPGTS
    25589U,	// EVCMPGTU
    24937U,	// EVCMPLTS
    25599U,	// EVCMPLTU
    536897465U,	// EVCNTLSW
    536897707U,	// EVCNTLZW
    25099U,	// EVDIVWS
    25641U,	// EVDIVWU
    25704U,	// EVEQV
    536890182U,	// EVEXTSB
    536891491U,	// EVEXTSH
    134237478U,	// EVLDD
    26979U,	// EVLDDX
    134238161U,	// EVLDH
    27083U,	// EVLDHX
    134243828U,	// EVLDW
    27774U,	// EVLDWX
    134242937U,	// EVLHHESPLAT
    27514U,	// EVLHHESPLATX
    134242962U,	// EVLHHOSSPLAT
    27541U,	// EVLHHOSSPLATX
    134242976U,	// EVLHHOUSPLAT
    27556U,	// EVLHHOUSPLATX
    134237881U,	// EVLWHE
    27054U,	// EVLWHEX
    134242619U,	// EVLWHOS
    27486U,	// EVLWHOSX
    134243288U,	// EVLWHOU
    27672U,	// EVLWHOUX
    134242950U,	// EVLWHSPLAT
    27528U,	// EVLWHSPLATX
    134242990U,	// EVLWWSPLAT
    27571U,	// EVLWWSPLATX
    20896U,	// EVMERGEHI
    22030U,	// EVMERGEHILO
    22019U,	// EVMERGELO
    20907U,	// EVMERGELOHI
    18403U,	// EVMHEGSMFAA
    21814U,	// EVMHEGSMFAN
    18451U,	// EVMHEGSMIAA
    21862U,	// EVMHEGSMIAN
    18488U,	// EVMHEGUMIAA
    21899U,	// EVMHEGUMIAN
    20289U,	// EVMHESMF
    18536U,	// EVMHESMFA
    25748U,	// EVMHESMFAAW
    26273U,	// EVMHESMFANW
    20958U,	// EVMHESMI
    18627U,	// EVMHESMIA
    25813U,	// EVMHESMIAAW
    26325U,	// EVMHESMIANW
    20364U,	// EVMHESSF
    18579U,	// EVMHESSFA
    25774U,	// EVMHESSFAAW
    26299U,	// EVMHESSFANW
    25945U,	// EVMHESSIAAW
    26403U,	// EVMHESSIANW
    20997U,	// EVMHEUMI
    18670U,	// EVMHEUMIA
    25879U,	// EVMHEUMIAAW
    26364U,	// EVMHEUMIANW
    26011U,	// EVMHEUSIAAW
    26442U,	// EVMHEUSIANW
    18416U,	// EVMHOGSMFAA
    21827U,	// EVMHOGSMFAN
    18464U,	// EVMHOGSMIAA
    21875U,	// EVMHOGSMIAN
    18501U,	// EVMHOGUMIAA
    21912U,	// EVMHOGUMIAN
    20309U,	// EVMHOSMF
    18558U,	// EVMHOSMFA
    25761U,	// EVMHOSMFAAW
    26286U,	// EVMHOSMFANW
    20978U,	// EVMHOSMI
    18649U,	// EVMHOSMIA
    25853U,	// EVMHOSMIAAW
    26351U,	// EVMHOSMIANW
    20384U,	// EVMHOSSF
    18601U,	// EVMHOSSFA
    25787U,	// EVMHOSSFAAW
    26312U,	// EVMHOSSFANW
    25985U,	// EVMHOSSIAAW
    26429U,	// EVMHOSSIANW
    21027U,	// EVMHOUMI
    18703U,	// EVMHOUMIA
    25919U,	// EVMHOUMIAAW
    26390U,	// EVMHOUMIANW
    26051U,	// EVMHOUSIAAW
    26468U,	// EVMHOUSIANW
    536889758U,	// EVMRA
    20299U,	// EVMWHSMF
    18547U,	// EVMWHSMFA
    20968U,	// EVMWHSMI
    18638U,	// EVMWHSMIA
    20374U,	// EVMWHSSF
    18590U,	// EVMWHSSFA
    21007U,	// EVMWHUMI
    18681U,	// EVMWHUMIA
    25840U,	// EVMWLSMIAAW
    26338U,	// EVMWLSMIANW
    25972U,	// EVMWLSSIAAW
    26416U,	// EVMWLSSIANW
    21017U,	// EVMWLUMI
    18692U,	// EVMWLUMIA
    25906U,	// EVMWLUMIAAW
    26377U,	// EVMWLUMIANW
    26038U,	// EVMWLUSIAAW
    26455U,	// EVMWLUSIANW
    20319U,	// EVMWSMF
    18569U,	// EVMWSMFA
    18429U,	// EVMWSMFAA
    21840U,	// EVMWSMFAN
    20988U,	// EVMWSMI
    18660U,	// EVMWSMIA
    18477U,	// EVMWSMIAA
    21888U,	// EVMWSMIAN
    20394U,	// EVMWSSF
    18612U,	// EVMWSSFA
    18440U,	// EVMWSSFAA
    21851U,	// EVMWSSFAN
    21037U,	// EVMWUMI
    18714U,	// EVMWUMIA
    18514U,	// EVMWUMIAA
    21925U,	// EVMWUMIAN
    19902U,	// EVNAND
    536891331U,	// EVNEG
    24294U,	// EVNOR
    24307U,	// EVOR
    19586U,	// EVORC
    26239U,	// EVRLW
    21155U,	// EVRLWI
    536897019U,	// EVRNDW
    26246U,	// EVSLW
    21181U,	// EVSLWI
    536891797U,	// EVSPLATFI
    536892033U,	// EVSPLATI
    24863U,	// EVSRWIS
    25551U,	// EVSRWIU
    25027U,	// EVSRWS
    25627U,	// EVSRWU
    134237494U,	// EVSTDD
    26987U,	// EVSTDDX
    134238168U,	// EVSTDH
    27091U,	// EVSTDHX
    134243843U,	// EVSTDW
    27782U,	// EVSTDWX
    134237889U,	// EVSTWHE
    27063U,	// EVSTWHEX
    134239738U,	// EVSTWHO
    27245U,	// EVSTWHOX
    134237981U,	// EVSTWWE
    27073U,	// EVSTWWEX
    134239891U,	// EVSTWWO
    27255U,	// EVSTWWOX
    536896738U,	// EVSUBFSMIAAW
    536896870U,	// EVSUBFSSIAAW
    536896804U,	// EVSUBFUMIAAW
    536896936U,	// EVSUBFUSIAAW
    26140U,	// EVSUBFW
    151021093U,	// EVSUBIFW
    24338U,	// EVXOR
    20807U,	// EXTLDI
    17246U,	// EXTLDIo
    21189U,	// EXTLWI
    17353U,	// EXTLWIo
    20856U,	// EXTRDI
    17289U,	// EXTRDIo
    21228U,	// EXTRWI
    17389U,	// EXTRWIo
    536890184U,	// EXTSB
    536890184U,	// EXTSB8
    536890184U,	// EXTSB8_32_64
    536887633U,	// EXTSB8o
    536887633U,	// EXTSBo
    536891493U,	// EXTSH
    536891493U,	// EXTSH8
    536891493U,	// EXTSH8_32_64
    536888074U,	// EXTSH8o
    536888074U,	// EXTSHo
    536897502U,	// EXTSW
    536897502U,	// EXTSW_32_64
    536888980U,	// EXTSW_32_64o
    536888980U,	// EXTSWo
    14138U,	// EnforceIEIO
    536895326U,	// FABSD
    536888664U,	// FABSDo
    536895326U,	// FABSS
    536888664U,	// FABSSo
    19677U,	// FADD
    24524U,	// FADDS
    17801U,	// FADDSo
    16890U,	// FADDo
    0U,	// FADDrtz
    536890713U,	// FCFID
    536895518U,	// FCFIDS
    536888740U,	// FCFIDSo
    536896405U,	// FCFIDU
    536895869U,	// FCFIDUS
    536888807U,	// FCFIDUSo
    536888851U,	// FCFIDUo
    536887834U,	// FCFIDo
    25569U,	// FCMPUD
    25569U,	// FCMPUS
    21949U,	// FCPSGND
    17484U,	// FCPSGNDo
    21949U,	// FCPSGNS
    17484U,	// FCPSGNSo
    536890722U,	// FCTID
    536898907U,	// FCTIDUZ
    536889120U,	// FCTIDUZo
    536898822U,	// FCTIDZ
    536889086U,	// FCTIDZo
    536887842U,	// FCTIDo
    536897113U,	// FCTIW
    536898918U,	// FCTIWUZ
    536889130U,	// FCTIWUZo
    536898929U,	// FCTIWZ
    536889140U,	// FCTIWZo
    536888941U,	// FCTIWo
    25677U,	// FDIV
    25020U,	// FDIVS
    17905U,	// FDIVSo
    17991U,	// FDIVo
    19685U,	// FMADD
    24533U,	// FMADDS
    17809U,	// FMADDSo
    16897U,	// FMADDo
    536895162U,	// FMR
    536888632U,	// FMRo
    19389U,	// FMSUB
    24503U,	// FMSUBS
    17775U,	// FMSUBSo
    16747U,	// FMSUBo
    21466U,	// FMUL
    24874U,	// FMULS
    17870U,	// FMULSo
    17422U,	// FMULo
    536895334U,	// FNABSD
    536888671U,	// FNABSDo
    536895334U,	// FNABSS
    536888671U,	// FNABSSo
    536891325U,	// FNEGD
    536888046U,	// FNEGDo
    536891325U,	// FNEGS
    536888046U,	// FNEGSo
    19694U,	// FNMADD
    24543U,	// FNMADDS
    17818U,	// FNMADDSo
    16905U,	// FNMADDo
    19398U,	// FNMSUB
    24513U,	// FNMSUBS
    17784U,	// FNMSUBSo
    16755U,	// FNMSUBo
    536891120U,	// FRE
    536895618U,	// FRES
    536888749U,	// FRESo
    536887982U,	// FREo
    536892580U,	// FRIMD
    536888352U,	// FRIMDo
    536892580U,	// FRIMS
    536888352U,	// FRIMSo
    536892878U,	// FRIND
    536888426U,	// FRINDo
    536892878U,	// FRINS
    536888426U,	// FRINSo
    536894076U,	// FRIPD
    536888533U,	// FRIPDo
    536894076U,	// FRIPS
    536888533U,	// FRIPSo
    536898893U,	// FRIZD
    536889104U,	// FRIZDo
    536898893U,	// FRIZS
    536889104U,	// FRIZSo
    536894777U,	// FRSP
    536888576U,	// FRSPo
    536891135U,	// FRSQRTE
    536895626U,	// FRSQRTES
    536888756U,	// FRSQRTESo
    536887988U,	// FRSQRTEo
    21396U,	// FSELD
    17415U,	// FSELDo
    21396U,	// FSELS
    17415U,	// FSELSo
    536896255U,	// FSQRT
    536895859U,	// FSQRTS
    536888790U,	// FSQRTSo
    536888834U,	// FSQRTo
    19381U,	// FSUB
    24494U,	// FSUBS
    17767U,	// FSUBSo
    16740U,	// FSUBo
    13803U,	// GETtlsADDR
    12275U,	// GETtlsADDR32
    13789U,	// GETtlsldADDR
    12260U,	// GETtlsldADDR32
    14058U,	// HRFID
    659718U,	// ICBI
    205517U,	// ICBT
    536891673U,	// ICCCI
    21173U,	// INSLWI
    17344U,	// INSLWIo
    20840U,	// INSRDI
    17271U,	// INSRDIo
    21212U,	// INSRWI
    17371U,	// INSRWIo
    21402U,	// ISEL
    21402U,	// ISEL8
    14031U,	// ISYNC
    167790981U,	// LA
    134236549U,	// LAx
    570452651U,	// LBARX
    2181065387U,	// LBARXL
    134245626U,	// LBZ
    134245626U,	// LBZ8
    27169U,	// LBZCIX
    184575026U,	// LBZU
    184575026U,	// LBZU8
    201354321U,	// LBZUX
    201354321U,	// LBZUX8
    570453184U,	// LBZX
    570453184U,	// LBZX8
    134237548U,	// LD
    570452658U,	// LDARX
    2181065394U,	// LDARXL
    25196U,	// LDAT
    570452679U,	// LDBRX
    27138U,	// LDCIX
    570452576U,	// LDMX
    184574887U,	// LDU
    201354237U,	// LDUX
    570452362U,	// LDX
    13698U,	// LDgotTprelL
    12157U,	// LDgotTprelL32
    14043U,	// LDtoc
    13950U,	// LDtocBA
    13950U,	// LDtocCPT
    13646U,	// LDtocJTI
    13656U,	// LDtocL
    134237502U,	// LFD
    184574846U,	// LFDU
    201354220U,	// LFDUX
    570452342U,	// LFDX
    570452251U,	// LFIWAX
    570453207U,	// LFIWZX
    134242458U,	// LFS
    184574952U,	// LFSU
    201354297U,	// LFSUX
    570452805U,	// LFSX
    134236350U,	// LHA
    134236350U,	// LHA8
    570452665U,	// LHARX
    2181065401U,	// LHARXL
    184574834U,	// LHAU
    184574834U,	// LHAU8
    201354176U,	// LHAUX
    201354176U,	// LHAUX8
    570452234U,	// LHAX
    570452234U,	// LHAX8
    570452694U,	// LHBRX
    570452694U,	// LHBRX8
    134245668U,	// LHZ
    134245668U,	// LHZ8
    27177U,	// LHZCIX
    184575032U,	// LHZU
    184575032U,	// LHZU8
    201354328U,	// LHZUX
    201354328U,	// LHZUX8
    570453199U,	// LHZX
    570453199U,	// LHZX8
    218124731U,	// LI
    218124731U,	// LI8
    218128659U,	// LIS
    218128659U,	// LIS8
    134243981U,	// LMW
    21236U,	// LSWI
    570452274U,	// LVEBX
    570452444U,	// LVEHX
    570453135U,	// LVEWX
    570446802U,	// LVSL
    570449729U,	// LVSR
    570453094U,	// LVX
    570446838U,	// LVXL
    134236581U,	// LWA
    570452672U,	// LWARX
    2181065408U,	// LWARXL
    25274U,	// LWAT
    201354183U,	// LWAUX
    570452268U,	// LWAX
    570452268U,	// LWAX_32
    134236581U,	// LWA_32
    570452719U,	// LWBRX
    570452719U,	// LWBRX8
    134245753U,	// LWZ
    134245753U,	// LWZ8
    27185U,	// LWZCIX
    184575038U,	// LWZU
    184575038U,	// LWZU8
    201354335U,	// LWZUX
    201354335U,	// LWZUX8
    570453224U,	// LWZX
    570453224U,	// LWZX8
    14050U,	// LWZtoc
    134237715U,	// LXSD
    570452377U,	// LXSDX
    570453175U,	// LXSIBZX
    570453190U,	// LXSIHZX
    570452259U,	// LXSIWAX
    570453215U,	// LXSIWZX
    134241618U,	// LXSSP
    570452634U,	// LXSSPX
    134243445U,	// LXV
    570452198U,	// LXVB16X
    570452164U,	// LXVD2X
    570452788U,	// LXVDSX
    570452217U,	// LXVH8X
    21481U,	// LXVL
    21428U,	// LXVLL
    570452181U,	// LXVW4X
    570452850U,	// LXVWSX
    570453105U,	// LXVX
    695898U,	// MBAR
    536891240U,	// MCRF
    536895647U,	// MCRFS
    551698U,	// MCRXRX
    234901132U,	// MFBHRBE
    548469U,	// MFCR
    548469U,	// MFCR8
    548686U,	// MFCTR
    548686U,	// MFCTR8
    536895072U,	// MFDCR
    549012U,	// MFFS
    542143U,	// MFFSo
    548524U,	// MFLR
    548524U,	// MFLR8
    548653U,	// MFMSR
    251678574U,	// MFOCRF
    251678574U,	// MFOCRF8
    536895257U,	// MFSPR
    536895257U,	// MFSPR8
    268459815U,	// MFSR
    536892884U,	// MFSRIN
    536890199U,	// MFTB
    6840089U,	// MFTB8
    7364377U,	// MFVRSAVE
    7364377U,	// MFVRSAVEv
    548483U,	// MFVSCR
    536890857U,	// MFVSRD
    536890750U,	// MFVSRLD
    536898942U,	// MFVSRWZ
    14023U,	// MSGSYNC
    14037U,	// MSYNC
    536891262U,	// MTCRF
    536891262U,	// MTCRF8
    548693U,	// MTCTR
    548693U,	// MTCTR8
    548693U,	// MTCTR8loop
    548693U,	// MTCTRloop
    620945006U,	// MTDCR
    689981U,	// MTFSB0
    689989U,	// MTFSB1
    20357U,	// MTFSF
    20877U,	// MTFSFI
    17298U,	// MTFSFIo
    536891269U,	// MTFSFb
    17126U,	// MTFSFo
    548530U,	// MTLR
    548530U,	// MTLR8
    536895284U,	// MTMSR
    536890849U,	// MTMSRD
    216950U,	// MTOCRF
    216950U,	// MTOCRF8
    536895264U,	// MTSPR
    536895264U,	// MTSPR8
    237371U,	// MTSR
    536892892U,	// MTSRIN
    540916U,	// MTVRSAVE
    704756U,	// MTVRSAVEv
    548491U,	// MTVSCR
    536890865U,	// MTVSRD
    19757U,	// MTVSRDD
    536889770U,	// MTVSRWA
    536895947U,	// MTVSRWS
    536898951U,	// MTVSRWZ
    19792U,	// MULHD
    25483U,	// MULHDU
    17930U,	// MULHDUo
    16914U,	// MULHDo
    26183U,	// MULHW
    25609U,	// MULHWU
    17974U,	// MULHWUo
    18021U,	// MULHWo
    19824U,	// MULLD
    16938U,	// MULLDo
    20927U,	// MULLI
    20927U,	// MULLI8
    26225U,	// MULLW
    18037U,	// MULLWo
    13827U,	// MoveGOTtoLR
    13815U,	// MovePCtoLR
    13210U,	// MovePCtoLR8
    19888U,	// NAND
    19888U,	// NAND8
    16952U,	// NAND8o
    16952U,	// NANDo
    14144U,	// NAP
    536891326U,	// NEG
    536891326U,	// NEG8
    536888047U,	// NEG8o
    536888047U,	// NEGo
    14153U,	// NOP
    11859U,	// NOP_GT_PWR6
    11871U,	// NOP_GT_PWR7
    24282U,	// NOR
    24282U,	// NOR8
    17726U,	// NOR8o
    17726U,	// NORo
    24275U,	// OR
    24275U,	// OR8
    17727U,	// OR8o
    19574U,	// ORC
    19574U,	// ORC8
    16866U,	// ORC8o
    16866U,	// ORCo
    21105U,	// ORI
    21105U,	// ORI8
    24857U,	// ORIS
    24857U,	// ORIS8
    17727U,	// ORo
    536890924U,	// POPCNTD
    536897535U,	// POPCNTW
    13927U,	// PPC32GOT
    13937U,	// PPC32PICGOT
    21054U,	// QVALIGNI
    21054U,	// QVALIGNIb
    21054U,	// QVALIGNIs
    21110U,	// QVESPLATI
    21110U,	// QVESPLATIb
    21110U,	// QVESPLATIs
    536895324U,	// QVFABS
    536895324U,	// QVFABSs
    19675U,	// QVFADD
    24522U,	// QVFADDS
    24522U,	// QVFADDSs
    536890711U,	// QVFCFID
    536895516U,	// QVFCFIDS
    536896403U,	// QVFCFIDU
    536895867U,	// QVFCFIDUS
    536890711U,	// QVFCFIDb
    24024U,	// QVFCMPEQ
    24024U,	// QVFCMPEQb
    24024U,	// QVFCMPEQbs
    25317U,	// QVFCMPGT
    25317U,	// QVFCMPGTb
    25317U,	// QVFCMPGTbs
    25333U,	// QVFCMPLT
    25333U,	// QVFCMPLTb
    25333U,	// QVFCMPLTbs
    21947U,	// QVFCPSGN
    21947U,	// QVFCPSGNs
    536890720U,	// QVFCTID
    536896413U,	// QVFCTIDU
    536898905U,	// QVFCTIDUZ
    536898820U,	// QVFCTIDZ
    536890720U,	// QVFCTIDb
    536897111U,	// QVFCTIW
    536896529U,	// QVFCTIWU
    536898916U,	// QVFCTIWUZ
    536898927U,	// QVFCTIWZ
    21350U,	// QVFLOGICAL
    21350U,	// QVFLOGICALb
    21350U,	// QVFLOGICALs
    19683U,	// QVFMADD
    24531U,	// QVFMADDS
    24531U,	// QVFMADDSs
    536895160U,	// QVFMR
    536895160U,	// QVFMRb
    536895160U,	// QVFMRs
    19387U,	// QVFMSUB
    24501U,	// QVFMSUBS
    24501U,	// QVFMSUBSs
    21464U,	// QVFMUL
    24872U,	// QVFMULS
    24872U,	// QVFMULSs
    536895332U,	// QVFNABS
    536895332U,	// QVFNABSs
    536891323U,	// QVFNEG
    536891323U,	// QVFNEGs
    19692U,	// QVFNMADD
    24541U,	// QVFNMADDS
    24541U,	// QVFNMADDSs
    19396U,	// QVFNMSUB
    24511U,	// QVFNMSUBS
    24511U,	// QVFNMSUBSs
    21736U,	// QVFPERM
    21736U,	// QVFPERMs
    536891118U,	// QVFRE
    536895616U,	// QVFRES
    536895616U,	// QVFRESs
    536892578U,	// QVFRIM
    536892578U,	// QVFRIMs
    536892876U,	// QVFRIN
    536892876U,	// QVFRINs
    536894074U,	// QVFRIP
    536894074U,	// QVFRIPs
    536898891U,	// QVFRIZ
    536898891U,	// QVFRIZs
    536894775U,	// QVFRSP
    536894775U,	// QVFRSPs
    536891133U,	// QVFRSQRTE
    536895624U,	// QVFRSQRTES
    536895624U,	// QVFRSQRTESs
    21394U,	// QVFSEL
    21394U,	// QVFSELb
    21394U,	// QVFSELbb
    21394U,	// QVFSELbs
    19379U,	// QVFSUB
    24492U,	// QVFSUBS
    24492U,	// QVFSUBSs
    21936U,	// QVFTSTNAN
    21936U,	// QVFTSTNANb
    21936U,	// QVFTSTNANbs
    19729U,	// QVFXMADD
    24581U,	// QVFXMADDS
    21472U,	// QVFXMUL
    24881U,	// QVFXMULS
    19702U,	// QVFXXCPNMADD
    24552U,	// QVFXXCPNMADDS
    19739U,	// QVFXXMADD
    24592U,	// QVFXXMADDS
    19716U,	// QVFXXNPMADD
    24567U,	// QVFXXNPMADDS
    285233440U,	// QVGPCI
    570452949U,	// QVLFCDUX
    570444302U,	// QVLFCDUXA
    570452304U,	// QVLFCDX
    570444222U,	// QVLFCDXA
    570453026U,	// QVLFCSUX
    570444346U,	// QVLFCSUXA
    570452769U,	// QVLFCSX
    570444262U,	// QVLFCSXA
    570452769U,	// QVLFCSXs
    201354218U,	// QVLFDUX
    570444325U,	// QVLFDUXA
    570452340U,	// QVLFDX
    570444243U,	// QVLFDXA
    570452340U,	// QVLFDXb
    570452249U,	// QVLFIWAX
    570444211U,	// QVLFIWAXA
    570453205U,	// QVLFIWZX
    570444401U,	// QVLFIWZXA
    201354295U,	// QVLFSUX
    570444369U,	// QVLFSUXA
    570452803U,	// QVLFSX
    570444283U,	// QVLFSXA
    570452803U,	// QVLFSXb
    570452803U,	// QVLFSXs
    570452357U,	// QVLPCLDX
    570452820U,	// QVLPCLSX
    7891796U,	// QVLPCLSXint
    570452367U,	// QVLPCRDX
    570452840U,	// QVLPCRSX
    570452959U,	// QVSTFCDUX
    570444313U,	// QVSTFCDUXA
    570446640U,	// QVSTFCDUXI
    570444114U,	// QVSTFCDUXIA
    570452313U,	// QVSTFCDX
    570444232U,	// QVSTFCDXA
    570446598U,	// QVSTFCDXI
    570444068U,	// QVSTFCDXIA
    570453036U,	// QVSTFCSUX
    570444357U,	// QVSTFCSUXA
    570446663U,	// QVSTFCSUXI
    570444139U,	// QVSTFCSUXIA
    570452778U,	// QVSTFCSX
    570444272U,	// QVSTFCSXA
    570446619U,	// QVSTFCSXI
    570444091U,	// QVSTFCSXIA
    570452778U,	// QVSTFCSXs
    201518067U,	// QVSTFDUX
    570444335U,	// QVSTFDUXA
    570446652U,	// QVSTFDUXI
    570444127U,	// QVSTFDUXIA
    570452348U,	// QVSTFDX
    570444252U,	// QVSTFDXA
    570446609U,	// QVSTFDXI
    570444080U,	// QVSTFDXIA
    570452348U,	// QVSTFDXb
    570453150U,	// QVSTFIWX
    570444390U,	// QVSTFIWXA
    201518144U,	// QVSTFSUX
    570444379U,	// QVSTFSUXA
    570446675U,	// QVSTFSUXI
    570444152U,	// QVSTFSUXIA
    201518144U,	// QVSTFSUXs
    570452811U,	// QVSTFSX
    570444292U,	// QVSTFSXA
    570446630U,	// QVSTFSXI
    570444103U,	// QVSTFSXIA
    570452811U,	// QVSTFSXs
    13735U,	// RESTORE_CR
    13867U,	// RESTORE_CRBIT
    13616U,	// RESTORE_VRSAVE
    14076U,	// RFCI
    14087U,	// RFDI
    248464U,	// RFEBB
    14092U,	// RFI
    14059U,	// RFID
    14081U,	// RFMCI
    21371U,	// RLDCL
    17398U,	// RLDCLo
    24167U,	// RLDCR
    17703U,	// RLDCRo
    19516U,	// RLDIC
    21378U,	// RLDICL
    21378U,	// RLDICL_32_64
    17406U,	// RLDICLo
    24187U,	// RLDICR
    17711U,	// RLDICRo
    16835U,	// RLDICo
    2801816014U,	// RLDIMI
    2801812379U,	// RLDIMIo
    3338686934U,	// RLWIMI
    3338686934U,	// RLWIMI8
    3338683300U,	// RLWIMI8o
    20950U,	// RLWIMIbm
    3338683300U,	// RLWIMIo
    17316U,	// RLWIMIobm
    21682U,	// RLWINM
    21682U,	// RLWINM8
    17447U,	// RLWINM8o
    21682U,	// RLWINMbm
    17447U,	// RLWINMo
    17447U,	// RLWINMobm
    21691U,	// RLWNM
    21691U,	// RLWNM8
    17456U,	// RLWNM8o
    21691U,	// RLWNMbm
    17456U,	// RLWNMo
    17456U,	// RLWNMobm
    20848U,	// ROTRDI
    17280U,	// ROTRDIo
    21220U,	// ROTRWI
    17380U,	// ROTRWIo
    13361U,	// ReadTB
    543881U,	// SC
    12621U,	// SELECT_CC_F4
    12939U,	// SELECT_CC_F8
    12646U,	// SELECT_CC_I4
    12984U,	// SELECT_CC_I8
    13379U,	// SELECT_CC_QBRC
    13408U,	// SELECT_CC_QFRC
    13497U,	// SELECT_CC_QSRC
    13468U,	// SELECT_CC_VRRC
    13437U,	// SELECT_CC_VSFRC
    13557U,	// SELECT_CC_VSRC
    13526U,	// SELECT_CC_VSSRC
    12635U,	// SELECT_F4
    12953U,	// SELECT_F8
    12660U,	// SELECT_I4
    13158U,	// SELECT_I8
    13395U,	// SELECT_QBRC
    13424U,	// SELECT_QFRC
    13513U,	// SELECT_QSRC
    13484U,	// SELECT_VRRC
    13454U,	// SELECT_VSFRC
    13573U,	// SELECT_VSRC
    13543U,	// SELECT_VSSRC
    13979U,	// SLBIA
    544458U,	// SLBIE
    536891315U,	// SLBIEG
    536891042U,	// SLBMFEE
    536896580U,	// SLBMFEV
    536891125U,	// SLBMTE
    14007U,	// SLBSYNC
    19854U,	// SLD
    20801U,	// SLDI
    17239U,	// SLDIo
    16946U,	// SLDo
    26248U,	// SLW
    26248U,	// SLW8
    18045U,	// SLW8o
    21167U,	// SLWI
    17337U,	// SLWIo
    18045U,	// SLWo
    13747U,	// SPILL_CR
    13882U,	// SPILL_CRBIT
    13632U,	// SPILL_VRSAVE
    19653U,	// SRAD
    20776U,	// SRADI
    17227U,	// SRADIo
    16883U,	// SRADo
    26077U,	// SRAW
    21131U,	// SRAWI
    17325U,	// SRAWIo
    18004U,	// SRAWo
    19940U,	// SRD
    20842U,	// SRDI
    17273U,	// SRDIo
    16966U,	// SRDo
    26503U,	// SRW
    26503U,	// SRW8
    18051U,	// SRW8o
    21214U,	// SRWI
    17373U,	// SRWIo
    18051U,	// SRWo
    134237049U,	// STB
    134237049U,	// STB8
    27130U,	// STBCIX
    570443478U,	// STBCX
    184738680U,	// STBU
    184738680U,	// STBU8
    201518030U,	// STBUX
    201518030U,	// STBUX8
    570452298U,	// STBX
    570452298U,	// STBX8
    134237759U,	// STD
    25202U,	// STDAT
    570452686U,	// STDBRX
    27145U,	// STDCIX
    570443486U,	// STDCX
    184738732U,	// STDU
    201518083U,	// STDUX
    570452392U,	// STDX
    134237507U,	// STFD
    184738692U,	// STFDU
    201518069U,	// STFDUX
    570452350U,	// STFDX
    570453152U,	// STFIWX
    134242470U,	// STFS
    184738798U,	// STFSU
    201518146U,	// STFSUX
    570452813U,	// STFSX
    134238352U,	// STH
    134238352U,	// STH8
    570452701U,	// STHBRX
    27153U,	// STHCIX
    570443494U,	// STHCX
    184738761U,	// STHU
    184738761U,	// STHU8
    201518097U,	// STHUX
    201518097U,	// STHUX8
    570452468U,	// STHX
    570452468U,	// STHX8
    134243986U,	// STMW
    14157U,	// STOP
    21242U,	// STSWI
    570452281U,	// STVEBX
    570452451U,	// STVEHX
    570453142U,	// STVEWX
    570453099U,	// STVX
    570446844U,	// STVXL
    134244381U,	// STW
    134244381U,	// STW8
    25280U,	// STWAT
    570452726U,	// STWBRX
    27161U,	// STWCIX
    570443502U,	// STWCX
    184738851U,	// STWU
    184738851U,	// STWU8
    201518154U,	// STWUX
    201518154U,	// STWUX8
    570453169U,	// STWX
    570453169U,	// STWX8
    134237721U,	// STXSD
    570452384U,	// STXSDX
    570452289U,	// STXSIBX
    570452289U,	// STXSIBXv
    570452459U,	// STXSIHX
    570452459U,	// STXSIHXv
    570453160U,	// STXSIWX
    134241625U,	// STXSSP
    570452642U,	// STXSSPX
    134243450U,	// STXV
    570452207U,	// STXVB16X
    570452172U,	// STXVD2X
    570452225U,	// STXVH8X
    21487U,	// STXVL
    21435U,	// STXVLL
    570452189U,	// STXVW4X
    570453111U,	// STXVX
    20283U,	// SUBF
    20283U,	// SUBF8
    17119U,	// SUBF8o
    19495U,	// SUBFC
    19495U,	// SUBFC8
    16811U,	// SUBFC8o
    16811U,	// SUBFCo
    20146U,	// SUBFE
    20146U,	// SUBFE8
    17045U,	// SUBFE8o
    17045U,	// SUBFEo
    19523U,	// SUBFIC
    19523U,	// SUBFIC8
    536891103U,	// SUBFME
    536891103U,	// SUBFME8
    536887973U,	// SUBFME8o
    536887973U,	// SUBFMEo
    536891181U,	// SUBFZE
    536891181U,	// SUBFZE8
    536888022U,	// SUBFZE8o
    536888022U,	// SUBFZEo
    17119U,	// SUBFo
    20748U,	// SUBI
    19502U,	// SUBIC
    16819U,	// SUBICo
    24837U,	// SUBIS
    543853U,	// SYNC
    706041U,	// TABORT
    8651168U,	// TABORTDC
    9175859U,	// TABORTDCI
    8651240U,	// TABORTWC
    9175871U,	// TABORTWCI
    576141U,	// TAILB
    576141U,	// TAILB8
    591967U,	// TAILBA
    591967U,	// TAILBA8
    14179U,	// TAILBCTR
    14179U,	// TAILBCTR8
    803937U,	// TBEGIN
    545630U,	// TCHECK
    13840U,	// TCHECK_RET
    537987030U,	// TCRETURNai
    537986937U,	// TCRETURNai8
    537971883U,	// TCRETURNdi
    537970567U,	// TCRETURNdi8
    537943629U,	// TCRETURNri
    537937813U,	// TCRETURNri8
    167463U,	// TD
    168320U,	// TDI
    803391U,	// TEND
    13985U,	// TLBIA
    9621201U,	// TLBIE
    545674U,	// TLBIEL
    536897808U,	// TLBIVAX
    544105U,	// TLBLD
    545208U,	// TLBLI
    14064U,	// TLBRE
    20199U,	// TLBRE2
    536898330U,	// TLBSX
    27418U,	// TLBSX2
    18166U,	// TLBSX2D
    14015U,	// TLBSYNC
    14070U,	// TLBWE
    20239U,	// TLBWE2
    14148U,	// TRAP
    11849U,	// TRECHKPT
    705557U,	// TRECLAIM
    804178U,	// TSR
    174065U,	// TW
    168705U,	// TWI
    536889251U,	// UPDATE_VRSAVE
    13724U,	// UpdateGBR
    19326U,	// VABSDUB
    20629U,	// VABSDUH
    26676U,	// VABSDUW
    24089U,	// VADDCUQ
    26667U,	// VADDCUW
    24120U,	// VADDECUQ
    21726U,	// VADDEUQM
    23017U,	// VADDFP
    24455U,	// VADDSBS
    24790U,	// VADDSHS
    25063U,	// VADDSWS
    21546U,	// VADDUBM
    24483U,	// VADDUBS
    21574U,	// VADDUDM
    21613U,	// VADDUHM
    24818U,	// VADDUHS
    21707U,	// VADDUQM
    21796U,	// VADDUWM
    25090U,	// VADDUWS
    19918U,	// VAND
    19488U,	// VANDC
    19207U,	// VAVGSB
    20516U,	// VAVGSH
    26517U,	// VAVGSW
    19344U,	// VAVGUB
    20647U,	// VAVGUH
    26694U,	// VAVGUW
    19859U,	// VBPERMD
    24043U,	// VBPERMQ
    3875564348U,	// VCFSX
    27452U,	// VCFSX_0
    3875564554U,	// VCFUX
    27658U,	// VCFUX_0
    24221U,	// VCIPHER
    25376U,	// VCIPHERLAST
    536890358U,	// VCLZB
    536890990U,	// VCLZD
    536891634U,	// VCLZH
    536890007U,	// VCLZLSBB
    536897700U,	// VCLZW
    22981U,	// VCMPBFP
    17578U,	// VCMPBFPo
    23080U,	// VCMPEQFP
    17599U,	// VCMPEQFPo
    19369U,	// VCMPEQUB
    16729U,	// VCMPEQUBo
    20044U,	// VCMPEQUD
    16983U,	// VCMPEQUDo
    20672U,	// VCMPEQUH
    17170U,	// VCMPEQUHo
    26719U,	// VCMPEQUW
    18076U,	// VCMPEQUWo
    23034U,	// VCMPGEFP
    17588U,	// VCMPGEFPo
    23090U,	// VCMPGTFP
    17610U,	// VCMPGTFPo
    19260U,	// VCMPGTSB
    16710U,	// VCMPGTSBo
    19969U,	// VCMPGTSD
    16972U,	// VCMPGTSDo
    20569U,	// VCMPGTSH
    17151U,	// VCMPGTSHo
    26580U,	// VCMPGTSW
    18057U,	// VCMPGTSWo
    19418U,	// VCMPGTUB
    16764U,	// VCMPGTUBo
    20054U,	// VCMPGTUD
    16994U,	// VCMPGTUDo
    20694U,	// VCMPGTUH
    17181U,	// VCMPGTUHo
    26754U,	// VCMPGTUW
    18087U,	// VCMPGTUWo
    19115U,	// VCMPNEB
    16700U,	// VCMPNEBo
    20448U,	// VCMPNEH
    17141U,	// VCMPNEHo
    26131U,	// VCMPNEW
    18011U,	// VCMPNEWo
    19436U,	// VCMPNEZB
    16775U,	// VCMPNEZBo
    20712U,	// VCMPNEZH
    17192U,	// VCMPNEZHo
    26778U,	// VCMPNEZW
    18105U,	// VCMPNEZWo
    3875562076U,	// VCTSXS
    25180U,	// VCTSXS_0
    3875562084U,	// VCTUXS
    25188U,	// VCTUXS_0
    536890365U,	// VCTZB
    536891005U,	// VCTZD
    536891641U,	// VCTZH
    536890017U,	// VCTZLSBB
    536897717U,	// VCTZW
    25705U,	// VEQV
    536893963U,	// VEXPTEFP
    654331424U,	// VEXTRACTD
    654330830U,	// VEXTRACTUB
    654332106U,	// VEXTRACTUH
    654338153U,	// VEXTRACTUW
    536890509U,	// VEXTSB2D
    536890509U,	// VEXTSB2Ds
    536896640U,	// VEXTSB2W
    536896640U,	// VEXTSB2Ws
    536890519U,	// VEXTSH2D
    536890519U,	// VEXTSH2Ds
    536896650U,	// VEXTSH2W
    536896650U,	// VEXTSH2Ws
    536890529U,	// VEXTSW2D
    536890529U,	// VEXTSW2Ds
    27202U,	// VEXTUBLX
    27365U,	// VEXTUBRX
    27212U,	// VEXTUHLX
    27390U,	// VEXTUHRX
    27222U,	// VEXTUWLX
    27400U,	// VEXTUWRX
    536890571U,	// VGBBD
    654330735U,	// VINSERTB
    654331445U,	// VINSERTD
    654332038U,	// VINSERTH
    654338056U,	// VINSERTW
    536893937U,	// VLOGEFP
    23008U,	// VMADDFP
    23100U,	// VMAXFP
    19279U,	// VMAXSB
    19979U,	// VMAXSD
    20588U,	// VMAXSH
    26597U,	// VMAXSW
    19428U,	// VMAXUB
    20064U,	// VMAXUD
    20704U,	// VMAXUH
    26764U,	// VMAXUW
    24767U,	// VMHADDSHS
    24778U,	// VMHRADDSHS
    23072U,	// VMINFP
    19243U,	// VMINSB
    19961U,	// VMINSD
    20552U,	// VMINSH
    26563U,	// VMINSW
    19352U,	// VMINUB
    20036U,	// VMINUD
    20655U,	// VMINUH
    26702U,	// VMINUW
    21602U,	// VMLADDUHM
    26123U,	// VMRGEW
    19124U,	// VMRGHB
    20457U,	// VMRGHH
    26166U,	// VMRGHW
    19142U,	// VMRGLB
    20465U,	// VMRGLH
    26208U,	// VMRGLW
    26481U,	// VMRGOW
    21527U,	// VMSUMMBM
    21583U,	// VMSUMSHM
    24799U,	// VMSUMSHS
    21555U,	// VMSUMUBM
    21622U,	// VMSUMUHM
    24827U,	// VMSUMUHS
    536894981U,	// VMUL10CUQ
    24098U,	// VMUL10ECUQ
    24130U,	// VMUL10EUQ
    536894971U,	// VMUL10UQ
    19198U,	// VMULESB
    20507U,	// VMULESH
    26508U,	// VMULESW
    19335U,	// VMULEUB
    20638U,	// VMULEUH
    26685U,	// VMULEUW
    19251U,	// VMULOSB
    20560U,	// VMULOSH
    26571U,	// VMULOSW
    19360U,	// VMULOUB
    20663U,	// VMULOUH
    26710U,	// VMULOUW
    21805U,	// VMULUWM
    19903U,	// VNAND
    24211U,	// VNCIPHER
    25362U,	// VNCIPHERLAST
    536890697U,	// VNEGD
    536897071U,	// VNEGW
    22990U,	// VNMSUBFP
    24295U,	// VNOR
    24308U,	// VOR
    19587U,	// VORC
    21745U,	// VPERM
    24255U,	// VPERMR
    24321U,	// VPERMXOR
    27274U,	// VPKPX
    24900U,	// VPKSDSS
    24966U,	// VPKSDUS
    24909U,	// VPKSHSS
    24984U,	// VPKSHUS
    24918U,	// VPKSWSS
    25002U,	// VPKSWUS
    21760U,	// VPKUDUM
    24975U,	// VPKUDUS
    21769U,	// VPKUHUM
    24993U,	// VPKUHUS
    21778U,	// VPKUWUM
    25011U,	// VPKUWUS
    19162U,	// VPMSUMB
    19868U,	// VPMSUMD
    20485U,	// VPMSUMH
    26264U,	// VPMSUMW
    536890213U,	// VPOPCNTB
    536890923U,	// VPOPCNTD
    536891516U,	// VPOPCNTH
    536897534U,	// VPOPCNTW
    536890578U,	// VPRTYBD
    536894927U,	// VPRTYBQ
    536896995U,	// VPRTYBW
    536893956U,	// VREFP
    536892544U,	// VRFIM
    536892869U,	// VRFIN
    536894040U,	// VRFIP
    536898857U,	// VRFIZ
    19150U,	// VRLB
    19847U,	// VRLD
    20934U,	// VRLDMI
    21674U,	// VRLDNM
    20473U,	// VRLH
    26240U,	// VRLW
    21046U,	// VRLWMI
    21690U,	// VRLWNM
    536893973U,	// VRSQRTEFP
    536898150U,	// VSBOX
    21408U,	// VSEL
    19640U,	// VSHASIGMAD
    26064U,	// VSHASIGMAW
    21459U,	// VSL
    19156U,	// VSLB
    19853U,	// VSLD
    21064U,	// VSLDOI
    20479U,	// VSLH
    22043U,	// VSLO
    25683U,	// VSLV
    26247U,	// VSLW
    3875556189U,	// VSPLTB
    3875556189U,	// VSPLTBs
    3875557492U,	// VSPLTH
    3875557492U,	// VSPLTHs
    302009112U,	// VSPLTISB
    302010421U,	// VSPLTISH
    302016422U,	// VSPLTISW
    3875563501U,	// VSPLTW
    24386U,	// VSR
    19081U,	// VSRAB
    19652U,	// VSRAD
    20426U,	// VSRAH
    26076U,	// VSRAW
    19192U,	// VSRB
    19947U,	// VSRD
    20501U,	// VSRH
    22157U,	// VSRO
    25711U,	// VSRV
    26502U,	// VSRW
    24080U,	// VSUBCUQ
    26658U,	// VSUBCUW
    24110U,	// VSUBECUQ
    21716U,	// VSUBEUQM
    23000U,	// VSUBFP
    24446U,	// VSUBSBS
    24758U,	// VSUBSHS
    25054U,	// VSUBSWS
    21537U,	// VSUBUBM
    24474U,	// VSUBUBS
    21565U,	// VSUBUDM
    21593U,	// VSUBUHM
    24809U,	// VSUBUHS
    21698U,	// VSUBUQM
    21787U,	// VSUBUWM
    25081U,	// VSUBUWS
    25044U,	// VSUM2SWS
    24436U,	// VSUM4SBS
    24748U,	// VSUM4SHS
    24464U,	// VSUM4UBS
    25072U,	// VSUMSWS
    536898177U,	// VUPKHPX
    536890127U,	// VUPKHSB
    536891436U,	// VUPKHSH
    536897437U,	// VUPKHSW
    536898193U,	// VUPKLPX
    536890146U,	// VUPKLSB
    536891455U,	// VUPKLSH
    536897456U,	// VUPKLSW
    24339U,	// VXOR
    83910419U,	// V_SET0
    83910419U,	// V_SET0B
    83910419U,	// V_SET0H
    9988006U,	// V_SETALLONES
    9988006U,	// V_SETALLONESB
    9988006U,	// V_SETALLONESH
    549615U,	// WAIT
    544427U,	// WRTEE
    545157U,	// WRTEEI
    24316U,	// XOR
    24316U,	// XOR8
    17732U,	// XOR8o
    21104U,	// XORI
    21104U,	// XORI8
    24856U,	// XORIS
    24856U,	// XORIS8
    17732U,	// XORo
    536893723U,	// XSABSDP
    536894282U,	// XSABSQP
    22324U,	// XSADDDP
    23240U,	// XSADDQP
    22116U,	// XSADDQPO
    23540U,	// XSADDSP
    22769U,	// XSCMPEQDP
    22737U,	// XSCMPEXPDP
    23338U,	// XSCMPEXPQP
    22386U,	// XSCMPGEDP
    22829U,	// XSCMPGTDP
    22408U,	// XSCMPNEDP
    22667U,	// XSCMPODP
    23308U,	// XSCMPOQP
    22893U,	// XSCMPUDP
    23389U,	// XSCMPUQP
    22627U,	// XSCPSGNDP
    23297U,	// XSCPSGNQP
    536894020U,	// XSCVDPHP
    536894230U,	// XSCVDPQP
    536894714U,	// XSCVDPSP
    536892911U,	// XSCVDPSPN
    536895544U,	// XSCVDPSXDS
    536895544U,	// XSCVDPSXDSs
    536896020U,	// XSCVDPSXWS
    536896020U,	// XSCVDPSXWSs
    536895580U,	// XSCVDPUXDS
    536895580U,	// XSCVDPUXDSs
    536896056U,	// XSCVDPUXWS
    536896056U,	// XSCVDPUXWSs
    536893589U,	// XSCVHPDP
    536893599U,	// XSCVQPDP
    536892961U,	// XSCVQPDPO
    536898830U,	// XSCVQPSDZ
    536898960U,	// XSCVQPSWZ
    536898841U,	// XSCVQPUDZ
    536898971U,	// XSCVQPUWZ
    536894161U,	// XSCVSDQP
    536893609U,	// XSCVSPDP
    536892900U,	// XSCVSPDPN
    536893254U,	// XSCVSXDDP
    536894470U,	// XSCVSXDSP
    536894171U,	// XSCVUDQP
    536893276U,	// XSCVUXDDP
    536894492U,	// XSCVUXDSP
    22903U,	// XSDIVDP
    23399U,	// XSDIVQP
    22147U,	// XSDIVQPO
    23947U,	// XSDIVSP
    22717U,	// XSIEXPDP
    23328U,	// XSIEXPQP
    1191204578U,	// XSMADDADP
    1191205814U,	// XSMADDASP
    1191204941U,	// XSMADDMDP
    1191206096U,	// XSMADDMSP
    23230U,	// XSMADDQP
    22105U,	// XSMADDQPO
    22314U,	// XSMAXCDP
    22963U,	// XSMAXDP
    22507U,	// XSMAXJDP
    22304U,	// XSMINCDP
    22649U,	// XSMINDP
    22497U,	// XSMINJDP
    1191204532U,	// XSMSUBADP
    1191205768U,	// XSMSUBASP
    1191204895U,	// XSMSUBMDP
    1191206050U,	// XSMSUBMSP
    23189U,	// XSMSUBQP
    22072U,	// XSMSUBQPO
    22517U,	// XSMULDP
    23288U,	// XSMULQP
    22126U,	// XSMULQPO
    23672U,	// XSMULSP
    536893703U,	// XSNABSDP
    536894272U,	// XSNABSQP
    536893371U,	// XSNEGDP
    536894181U,	// XSNEGQP
    1191204554U,	// XSNMADDADP
    1191205790U,	// XSNMADDASP
    1191204917U,	// XSNMADDMDP
    1191206072U,	// XSNMADDMSP
    23219U,	// XSNMADDQP
    22093U,	// XSNMADDQPO
    1191204508U,	// XSNMSUBADP
    1191205744U,	// XSNMSUBASP
    1191204871U,	// XSNMSUBMDP
    1191206026U,	// XSNMSUBMSP
    23178U,	// XSNMSUBQP
    22060U,	// XSNMSUBQPO
    536891984U,	// XSRDPI
    536890443U,	// XSRDPIC
    536892551U,	// XSRDPIM
    536894047U,	// XSRDPIP
    536898864U,	// XSRDPIZ
    536893331U,	// XSREDP
    536894525U,	// XSRESP
    84169312U,	// XSRQPI
    84175417U,	// XSRQPIX
    84172230U,	// XSRQPXP
    536893347U,	// XSRSQRTEDP
    536894541U,	// XSRSQRTESP
    536893763U,	// XSSQRTDP
    536894291U,	// XSSQRTQP
    536893048U,	// XSSQRTQPO
    536894828U,	// XSSQRTSP
    22264U,	// XSSUBDP
    23199U,	// XSSUBQP
    22083U,	// XSSUBQPO
    23500U,	// XSSUBSP
    22912U,	// XSTDIVDP
    536893773U,	// XSTSQRTDP
    1728075530U,	// XSTSTDCDP
    1728076456U,	// XSTSTDCQP
    1728076766U,	// XSTSTDCSP
    536893661U,	// XSXEXPDP
    536894262U,	// XSXEXPQP
    536893389U,	// XSXSIGDP
    536894190U,	// XSXSIGQP
    536893732U,	// XVABSDP
    536894793U,	// XVABSSP
    22333U,	// XVADDDP
    23549U,	// XVADDSP
    22780U,	// XVCMPEQDP
    17554U,	// XVCMPEQDPo
    23852U,	// XVCMPEQSP
    17652U,	// XVCMPEQSPo
    22397U,	// XVCMPGEDP
    17530U,	// XVCMPGEDPo
    23602U,	// XVCMPGESP
    17628U,	// XVCMPGESPo
    22840U,	// XVCMPGTDP
    17566U,	// XVCMPGTDPo
    23905U,	// XVCMPGTSP
    17671U,	// XVCMPGTSPo
    16401U,	// XVCMPNEDP
    17542U,	// XVCMPNEDPo
    16413U,	// XVCMPNESP
    17640U,	// XVCMPNESPo
    22638U,	// XVCPSGNDP
    23782U,	// XVCPSGNSP
    536894724U,	// XVCVDPSP
    536895556U,	// XVCVDPSXDS
    536896032U,	// XVCVDPSXWS
    536895592U,	// XVCVDPUXDS
    536896068U,	// XVCVDPUXWS
    536894734U,	// XVCVHPSP
    536893619U,	// XVCVSPDP
    536894030U,	// XVCVSPHP
    536895568U,	// XVCVSPSXDS
    536896044U,	// XVCVSPSXWS
    536895604U,	// XVCVSPUXDS
    536896080U,	// XVCVSPUXWS
    536893265U,	// XVCVSXDDP
    536894481U,	// XVCVSXDSP
    536893853U,	// XVCVSXWDP
    536894887U,	// XVCVSXWSP
    536893287U,	// XVCVUXDDP
    536894503U,	// XVCVUXDSP
    536893864U,	// XVCVUXWDP
    536894898U,	// XVCVUXWSP
    22932U,	// XVDIVDP
    23966U,	// XVDIVSP
    22727U,	// XVIEXPDP
    23832U,	// XVIEXPSP
    1191204589U,	// XVMADDADP
    1191205825U,	// XVMADDASP
    1191204952U,	// XVMADDMDP
    1191206107U,	// XVMADDMSP
    22972U,	// XVMAXDP
    23997U,	// XVMAXSP
    22658U,	// XVMINDP
    23793U,	// XVMINSP
    1191204543U,	// XVMSUBADP
    1191205779U,	// XVMSUBASP
    1191204906U,	// XVMSUBMDP
    1191206061U,	// XVMSUBMSP
    22526U,	// XVMULDP
    23681U,	// XVMULSP
    536893713U,	// XVNABSDP
    536894783U,	// XVNABSSP
    536893380U,	// XVNEGDP
    536894565U,	// XVNEGSP
    1191204566U,	// XVNMADDADP
    1191205802U,	// XVNMADDASP
    1191204929U,	// XVNMADDMDP
    1191206084U,	// XVNMADDMSP
    1191204520U,	// XVNMSUBADP
    1191205756U,	// XVNMSUBASP
    1191204883U,	// XVNMSUBMDP
    1191206038U,	// XVNMSUBMSP
    536891992U,	// XVRDPI
    536890452U,	// XVRDPIC
    536892560U,	// XVRDPIM
    536894056U,	// XVRDPIP
    536898873U,	// XVRDPIZ
    536893339U,	// XVREDP
    536894533U,	// XVRESP
    536892008U,	// XVRSPI
    536890461U,	// XVRSPIC
    536892569U,	// XVRSPIM
    536894065U,	// XVRSPIP
    536898882U,	// XVRSPIZ
    536893359U,	// XVRSQRTEDP
    536894553U,	// XVRSQRTESP
    536893795U,	// XVSQRTDP
    536894849U,	// XVSQRTSP
    22273U,	// XVSUBDP
    23509U,	// XVSUBSP
    22922U,	// XVTDIVDP
    23956U,	// XVTDIVSP
    536893784U,	// XVTSQRTDP
    536894838U,	// XVTSQRTSP
    1728075541U,	// XVTSTDCDP
    1728076777U,	// XVTSTDCSP
    536893671U,	// XVXEXPDP
    536894754U,	// XVXEXPSP
    536893399U,	// XVXSIGDP
    536894574U,	// XVXSIGSP
    536890842U,	// XXBRD
    536891406U,	// XXBRH
    536894964U,	// XXBRQ
    536897407U,	// XXBRW
    26741U,	// XXEXTRACTUW
    2264950802U,	// XXINSERTW
    19877U,	// XXLAND
    19470U,	// XXLANDC
    25689U,	// XXLEQV
    19885U,	// XXLNAND
    24279U,	// XXLNOR
    24272U,	// XXLOR
    19571U,	// XXLORC
    24272U,	// XXLORf
    24313U,	// XXLXOR
    83910393U,	// XXLXORdpz
    83910393U,	// XXLXORspz
    83910393U,	// XXLXORz
    26174U,	// XXMRGHW
    26216U,	// XXMRGLW
    21752U,	// XXPERM
    20815U,	// XXPERMDI
    20815U,	// XXPERMDIs
    24263U,	// XXPERMR
    21414U,	// XXSEL
    21138U,	// XXSLDWI
    318786236U,	// XXSPLTIB
    26613U,	// XXSPLTW
    26613U,	// XXSPLTWs
    166916U,	// gBC
    165987U,	// gBCA
    10794647U,	// gBCAat
    171847U,	// gBCCTR
    168906U,	// gBCCTRL
    168822U,	// gBCL
    166281U,	// gBCLA
    10794663U,	// gBCLAat
    171686U,	// gBCLR
    168899U,	// gBCLRL
    11319056U,	// gBCLat
    11318964U,	// gBCat
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_LOAD_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_INSERT
    0U,	// G_SEQUENCE
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_STORE
    0U,	// G_BRCOND
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_GEP
    0U,	// G_BR
    0U,	// ADD4
    0U,	// ADD4TLS
    0U,	// ADD4o
    0U,	// ADD8
    0U,	// ADD8TLS
    0U,	// ADD8TLS_
    0U,	// ADD8o
    0U,	// ADDC
    0U,	// ADDC8
    0U,	// ADDC8o
    0U,	// ADDCo
    0U,	// ADDE
    0U,	// ADDE8
    0U,	// ADDE8o
    0U,	// ADDEo
    2U,	// ADDI
    2U,	// ADDI8
    2U,	// ADDIC
    2U,	// ADDIC8
    2U,	// ADDICo
    2U,	// ADDIS
    2U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISdtprelHA32
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIdtprelL
    0U,	// ADDIdtprelL32
    0U,	// ADDItlsgdL
    0U,	// ADDItlsgdL32
    0U,	// ADDItlsgdLADDR
    0U,	// ADDItlsgdLADDR32
    0U,	// ADDItlsldL
    0U,	// ADDItlsldL32
    0U,	// ADDItlsldLADDR
    0U,	// ADDItlsldLADDR32
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8o
    0U,	// ADDMEo
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8o
    0U,	// ADDZEo
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// AND
    0U,	// AND8
    0U,	// AND8o
    0U,	// ANDC
    0U,	// ANDC8
    0U,	// ANDC8o
    0U,	// ANDCo
    4U,	// ANDISo
    4U,	// ANDISo8
    4U,	// ANDIo
    4U,	// ANDIo8
    0U,	// ANDIo_1_EQ_BIT
    0U,	// ANDIo_1_EQ_BIT8
    0U,	// ANDIo_1_GT_BIT
    0U,	// ANDIo_1_GT_BIT8
    0U,	// ANDo
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATTN
    0U,	// B
    0U,	// BA
    0U,	// BC
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCCTR
    0U,	// BCCCTR8
    0U,	// BCCCTRL
    0U,	// BCCCTRL8
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCLR
    0U,	// BCCLRL
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTR8n
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCCTRL8n
    0U,	// BCCTRLn
    0U,	// BCCTRn
    6U,	// BCDCFNo
    6U,	// BCDCFSQo
    6U,	// BCDCFZo
    0U,	// BCDCPSGNo
    0U,	// BCDCTNo
    0U,	// BCDCTSQo
    6U,	// BCDCTZo
    6U,	// BCDSETSGNo
    32U,	// BCDSRo
    32U,	// BCDSo
    32U,	// BCDTRUNCo
    0U,	// BCDUSo
    0U,	// BCDUTRUNCo
    0U,	// BCL
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLRLn
    0U,	// BCLRn
    0U,	// BCLalways
    0U,	// BCLn
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BCTRL8_LDinto_toc
    0U,	// BCn
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_TLS
    0U,	// BL8_TLS
    0U,	// BL8_TLS_
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLR
    0U,	// BLR8
    0U,	// BLRL
    0U,	// BL_TLS
    0U,	// BPERMD
    0U,	// BRINC
    0U,	// CLRBHRB
    104U,	// CLRLSLDI
    104U,	// CLRLSLDIo
    170U,	// CLRLSLWI
    170U,	// CLRLSLWIo
    8U,	// CLRRDI
    8U,	// CLRRDIo
    10U,	// CLRRWI
    10U,	// CLRRWIo
    0U,	// CMPB
    0U,	// CMPB8
    0U,	// CMPD
    2U,	// CMPDI
    0U,	// CMPEQB
    0U,	// CMPLD
    4U,	// CMPLDI
    0U,	// CMPLW
    4U,	// CMPLWI
    0U,	// CMPRB
    0U,	// CMPRB8
    0U,	// CMPW
    2U,	// CMPWI
    0U,	// CNTLZD
    0U,	// CNTLZDo
    0U,	// CNTLZW
    0U,	// CNTLZW8
    0U,	// CNTLZW8o
    0U,	// CNTLZWo
    0U,	// CNTTZD
    0U,	// CNTTZDo
    0U,	// CNTTZW
    0U,	// CNTTZW8
    0U,	// CNTTZW8o
    0U,	// CNTTZWo
    0U,	// CP_ABORT
    6U,	// CP_COPY
    6U,	// CP_COPY8
    0U,	// CP_COPY_FIRST
    0U,	// CP_COPYx
    6U,	// CP_PASTE
    6U,	// CP_PASTE8
    6U,	// CP_PASTE8o
    0U,	// CP_PASTE_LAST
    6U,	// CP_PASTEo
    0U,	// CP_PASTEx
    0U,	// CR6SET
    0U,	// CR6UNSET
    0U,	// CRAND
    0U,	// CRANDC
    0U,	// CREQV
    0U,	// CRNAND
    0U,	// CRNOR
    0U,	// CROR
    0U,	// CRORC
    12U,	// CRSET
    12U,	// CRUNSET
    0U,	// CRXOR
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBFL
    0U,	// DCBFLP
    0U,	// DCBFx
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBT
    0U,	// DCBTCT
    0U,	// DCBTDS
    0U,	// DCBTST
    0U,	// DCBTSTCT
    0U,	// DCBTSTDS
    0U,	// DCBTSTT
    0U,	// DCBTSTx
    0U,	// DCBTT
    0U,	// DCBTx
    0U,	// DCBZ
    0U,	// DCBZL
    0U,	// DCCCI
    0U,	// DFLOADf32
    0U,	// DFLOADf64
    0U,	// DFSTOREf32
    0U,	// DFSTOREf64
    0U,	// DIVD
    0U,	// DIVDE
    0U,	// DIVDEU
    0U,	// DIVDEUo
    0U,	// DIVDEo
    0U,	// DIVDU
    0U,	// DIVDUo
    0U,	// DIVDo
    0U,	// DIVW
    0U,	// DIVWE
    0U,	// DIVWEU
    0U,	// DIVWEUo
    0U,	// DIVWEo
    0U,	// DIVWU
    0U,	// DIVWUo
    0U,	// DIVWo
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// DYNAREAOFFSET
    0U,	// DYNAREAOFFSET8
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    0U,	// EQV
    0U,	// EQV8
    0U,	// EQV8o
    0U,	// EQVo
    0U,	// EVABS
    14U,	// EVADDIW
    0U,	// EVADDSMIAAW
    0U,	// EVADDSSIAAW
    0U,	// EVADDUMIAAW
    0U,	// EVADDUSIAAW
    0U,	// EVADDW
    0U,	// EVAND
    0U,	// EVANDC
    0U,	// EVCMPEQ
    0U,	// EVCMPGTS
    0U,	// EVCMPGTU
    0U,	// EVCMPLTS
    0U,	// EVCMPLTU
    0U,	// EVCNTLSW
    0U,	// EVCNTLZW
    0U,	// EVDIVWS
    0U,	// EVDIVWU
    0U,	// EVEQV
    0U,	// EVEXTSB
    0U,	// EVEXTSH
    0U,	// EVLDD
    0U,	// EVLDDX
    0U,	// EVLDH
    0U,	// EVLDHX
    0U,	// EVLDW
    0U,	// EVLDWX
    0U,	// EVLHHESPLAT
    0U,	// EVLHHESPLATX
    0U,	// EVLHHOSSPLAT
    0U,	// EVLHHOSSPLATX
    0U,	// EVLHHOUSPLAT
    0U,	// EVLHHOUSPLATX
    0U,	// EVLWHE
    0U,	// EVLWHEX
    0U,	// EVLWHOS
    0U,	// EVLWHOSX
    0U,	// EVLWHOU
    0U,	// EVLWHOUX
    0U,	// EVLWHSPLAT
    0U,	// EVLWHSPLATX
    0U,	// EVLWWSPLAT
    0U,	// EVLWWSPLATX
    0U,	// EVMERGEHI
    0U,	// EVMERGEHILO
    0U,	// EVMERGELO
    0U,	// EVMERGELOHI
    0U,	// EVMHEGSMFAA
    0U,	// EVMHEGSMFAN
    0U,	// EVMHEGSMIAA
    0U,	// EVMHEGSMIAN
    0U,	// EVMHEGUMIAA
    0U,	// EVMHEGUMIAN
    0U,	// EVMHESMF
    0U,	// EVMHESMFA
    0U,	// EVMHESMFAAW
    0U,	// EVMHESMFANW
    0U,	// EVMHESMI
    0U,	// EVMHESMIA
    0U,	// EVMHESMIAAW
    0U,	// EVMHESMIANW
    0U,	// EVMHESSF
    0U,	// EVMHESSFA
    0U,	// EVMHESSFAAW
    0U,	// EVMHESSFANW
    0U,	// EVMHESSIAAW
    0U,	// EVMHESSIANW
    0U,	// EVMHEUMI
    0U,	// EVMHEUMIA
    0U,	// EVMHEUMIAAW
    0U,	// EVMHEUMIANW
    0U,	// EVMHEUSIAAW
    0U,	// EVMHEUSIANW
    0U,	// EVMHOGSMFAA
    0U,	// EVMHOGSMFAN
    0U,	// EVMHOGSMIAA
    0U,	// EVMHOGSMIAN
    0U,	// EVMHOGUMIAA
    0U,	// EVMHOGUMIAN
    0U,	// EVMHOSMF
    0U,	// EVMHOSMFA
    0U,	// EVMHOSMFAAW
    0U,	// EVMHOSMFANW
    0U,	// EVMHOSMI
    0U,	// EVMHOSMIA
    0U,	// EVMHOSMIAAW
    0U,	// EVMHOSMIANW
    0U,	// EVMHOSSF
    0U,	// EVMHOSSFA
    0U,	// EVMHOSSFAAW
    0U,	// EVMHOSSFANW
    0U,	// EVMHOSSIAAW
    0U,	// EVMHOSSIANW
    0U,	// EVMHOUMI
    0U,	// EVMHOUMIA
    0U,	// EVMHOUMIAAW
    0U,	// EVMHOUMIANW
    0U,	// EVMHOUSIAAW
    0U,	// EVMHOUSIANW
    0U,	// EVMRA
    0U,	// EVMWHSMF
    0U,	// EVMWHSMFA
    0U,	// EVMWHSMI
    0U,	// EVMWHSMIA
    0U,	// EVMWHSSF
    0U,	// EVMWHSSFA
    0U,	// EVMWHUMI
    0U,	// EVMWHUMIA
    0U,	// EVMWLSMIAAW
    0U,	// EVMWLSMIANW
    0U,	// EVMWLSSIAAW
    0U,	// EVMWLSSIANW
    0U,	// EVMWLUMI
    0U,	// EVMWLUMIA
    0U,	// EVMWLUMIAAW
    0U,	// EVMWLUMIANW
    0U,	// EVMWLUSIAAW
    0U,	// EVMWLUSIANW
    0U,	// EVMWSMF
    0U,	// EVMWSMFA
    0U,	// EVMWSMFAA
    0U,	// EVMWSMFAN
    0U,	// EVMWSMI
    0U,	// EVMWSMIA
    0U,	// EVMWSMIAA
    0U,	// EVMWSMIAN
    0U,	// EVMWSSF
    0U,	// EVMWSSFA
    0U,	// EVMWSSFAA
    0U,	// EVMWSSFAN
    0U,	// EVMWUMI
    0U,	// EVMWUMIA
    0U,	// EVMWUMIAA
    0U,	// EVMWUMIAN
    0U,	// EVNAND
    0U,	// EVNEG
    0U,	// EVNOR
    0U,	// EVOR
    0U,	// EVORC
    0U,	// EVRLW
    10U,	// EVRLWI
    0U,	// EVRNDW
    0U,	// EVSLW
    10U,	// EVSLWI
    0U,	// EVSPLATFI
    0U,	// EVSPLATI
    10U,	// EVSRWIS
    10U,	// EVSRWIU
    0U,	// EVSRWS
    0U,	// EVSRWU
    0U,	// EVSTDD
    0U,	// EVSTDDX
    0U,	// EVSTDH
    0U,	// EVSTDHX
    0U,	// EVSTDW
    0U,	// EVSTDWX
    0U,	// EVSTWHE
    0U,	// EVSTWHEX
    0U,	// EVSTWHO
    0U,	// EVSTWHOX
    0U,	// EVSTWWE
    0U,	// EVSTWWEX
    0U,	// EVSTWWO
    0U,	// EVSTWWOX
    0U,	// EVSUBFSMIAAW
    0U,	// EVSUBFSSIAAW
    0U,	// EVSUBFUMIAAW
    0U,	// EVSUBFUSIAAW
    0U,	// EVSUBFW
    0U,	// EVSUBIFW
    0U,	// EVXOR
    104U,	// EXTLDI
    104U,	// EXTLDIo
    170U,	// EXTLWI
    170U,	// EXTLWIo
    104U,	// EXTRDI
    104U,	// EXTRDIo
    170U,	// EXTRWI
    170U,	// EXTRWIo
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8_32_64
    0U,	// EXTSB8o
    0U,	// EXTSBo
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8_32_64
    0U,	// EXTSH8o
    0U,	// EXTSHo
    0U,	// EXTSW
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64o
    0U,	// EXTSWo
    0U,	// EnforceIEIO
    0U,	// FABSD
    0U,	// FABSDo
    0U,	// FABSS
    0U,	// FABSSo
    0U,	// FADD
    0U,	// FADDS
    0U,	// FADDSo
    0U,	// FADDo
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDSo
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUSo
    0U,	// FCFIDUo
    0U,	// FCFIDo
    0U,	// FCMPUD
    0U,	// FCMPUS
    0U,	// FCPSGND
    0U,	// FCPSGNDo
    0U,	// FCPSGNS
    0U,	// FCPSGNSo
    0U,	// FCTID
    0U,	// FCTIDUZ
    0U,	// FCTIDUZo
    0U,	// FCTIDZ
    0U,	// FCTIDZo
    0U,	// FCTIDo
    0U,	// FCTIW
    0U,	// FCTIWUZ
    0U,	// FCTIWUZo
    0U,	// FCTIWZ
    0U,	// FCTIWZo
    0U,	// FCTIWo
    0U,	// FDIV
    0U,	// FDIVS
    0U,	// FDIVSo
    0U,	// FDIVo
    224U,	// FMADD
    224U,	// FMADDS
    224U,	// FMADDSo
    224U,	// FMADDo
    0U,	// FMR
    0U,	// FMRo
    224U,	// FMSUB
    224U,	// FMSUBS
    224U,	// FMSUBSo
    224U,	// FMSUBo
    0U,	// FMUL
    0U,	// FMULS
    0U,	// FMULSo
    0U,	// FMULo
    0U,	// FNABSD
    0U,	// FNABSDo
    0U,	// FNABSS
    0U,	// FNABSSo
    0U,	// FNEGD
    0U,	// FNEGDo
    0U,	// FNEGS
    0U,	// FNEGSo
    224U,	// FNMADD
    224U,	// FNMADDS
    224U,	// FNMADDSo
    224U,	// FNMADDo
    224U,	// FNMSUB
    224U,	// FNMSUBS
    224U,	// FNMSUBSo
    224U,	// FNMSUBo
    0U,	// FRE
    0U,	// FRES
    0U,	// FRESo
    0U,	// FREo
    0U,	// FRIMD
    0U,	// FRIMDo
    0U,	// FRIMS
    0U,	// FRIMSo
    0U,	// FRIND
    0U,	// FRINDo
    0U,	// FRINS
    0U,	// FRINSo
    0U,	// FRIPD
    0U,	// FRIPDo
    0U,	// FRIPS
    0U,	// FRIPSo
    0U,	// FRIZD
    0U,	// FRIZDo
    0U,	// FRIZS
    0U,	// FRIZSo
    0U,	// FRSP
    0U,	// FRSPo
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTESo
    0U,	// FRSQRTEo
    224U,	// FSELD
    224U,	// FSELDo
    224U,	// FSELS
    224U,	// FSELSo
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTSo
    0U,	// FSQRTo
    0U,	// FSUB
    0U,	// FSUBS
    0U,	// FSUBSo
    0U,	// FSUBo
    0U,	// GETtlsADDR
    0U,	// GETtlsADDR32
    0U,	// GETtlsldADDR
    0U,	// GETtlsldADDR32
    0U,	// HRFID
    0U,	// ICBI
    0U,	// ICBT
    0U,	// ICCCI
    170U,	// INSLWI
    170U,	// INSLWIo
    104U,	// INSRDI
    104U,	// INSRDIo
    170U,	// INSRWI
    170U,	// INSRWIo
    224U,	// ISEL
    224U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LAx
    0U,	// LBARX
    0U,	// LBARXL
    0U,	// LBZ
    0U,	// LBZ8
    0U,	// LBZCIX
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    0U,	// LD
    0U,	// LDARX
    0U,	// LDARXL
    10U,	// LDAT
    0U,	// LDBRX
    0U,	// LDCIX
    0U,	// LDMX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    0U,	// LDgotTprelL
    0U,	// LDgotTprelL32
    0U,	// LDtoc
    0U,	// LDtocBA
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LFD
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHARX
    0U,	// LHARXL
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHBRX8
    0U,	// LHZ
    0U,	// LHZ8
    0U,	// LHZCIX
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    10U,	// LSWI
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    0U,	// LWARXL
    10U,	// LWAT
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWAX_32
    0U,	// LWA_32
    0U,	// LWBRX
    0U,	// LWBRX8
    0U,	// LWZ
    0U,	// LWZ8
    0U,	// LWZCIX
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    0U,	// LWZtoc
    0U,	// LXSD
    0U,	// LXSDX
    0U,	// LXSIBZX
    0U,	// LXSIHZX
    0U,	// LXSIWAX
    0U,	// LXSIWZX
    0U,	// LXSSP
    0U,	// LXSSPX
    0U,	// LXV
    0U,	// LXVB16X
    0U,	// LXVD2X
    0U,	// LXVDSX
    0U,	// LXVH8X
    0U,	// LXVL
    0U,	// LXVLL
    0U,	// LXVW4X
    0U,	// LXVWSX
    0U,	// LXVX
    0U,	// MBAR
    0U,	// MCRF
    0U,	// MCRFS
    0U,	// MCRXRX
    0U,	// MFBHRBE
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFDCR
    0U,	// MFFS
    0U,	// MFFSo
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFMSR
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFSPR
    0U,	// MFSPR8
    0U,	// MFSR
    0U,	// MFSRIN
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVSCR
    0U,	// MFVSRD
    0U,	// MFVSRLD
    0U,	// MFVSRWZ
    0U,	// MSGSYNC
    0U,	// MSYNC
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTDCR
    0U,	// MTFSB0
    0U,	// MTFSB1
    224U,	// MTFSF
    0U,	// MTFSFI
    0U,	// MTFSFIo
    0U,	// MTFSFb
    224U,	// MTFSFo
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTMSR
    0U,	// MTMSRD
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTSPR
    0U,	// MTSPR8
    0U,	// MTSR
    0U,	// MTSRIN
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVSCR
    0U,	// MTVSRD
    0U,	// MTVSRDD
    0U,	// MTVSRWA
    0U,	// MTVSRWS
    0U,	// MTVSRWZ
    0U,	// MULHD
    0U,	// MULHDU
    0U,	// MULHDUo
    0U,	// MULHDo
    0U,	// MULHW
    0U,	// MULHWU
    0U,	// MULHWUo
    0U,	// MULHWo
    0U,	// MULLD
    0U,	// MULLDo
    2U,	// MULLI
    2U,	// MULLI8
    0U,	// MULLW
    0U,	// MULLWo
    0U,	// MoveGOTtoLR
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    0U,	// NAND
    0U,	// NAND8
    0U,	// NAND8o
    0U,	// NANDo
    0U,	// NAP
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8o
    0U,	// NEGo
    0U,	// NOP
    0U,	// NOP_GT_PWR6
    0U,	// NOP_GT_PWR7
    0U,	// NOR
    0U,	// NOR8
    0U,	// NOR8o
    0U,	// NORo
    0U,	// OR
    0U,	// OR8
    0U,	// OR8o
    0U,	// ORC
    0U,	// ORC8
    0U,	// ORC8o
    0U,	// ORCo
    4U,	// ORI
    4U,	// ORI8
    4U,	// ORIS
    4U,	// ORIS8
    0U,	// ORo
    0U,	// POPCNTD
    0U,	// POPCNTW
    0U,	// PPC32GOT
    0U,	// PPC32PICGOT
    288U,	// QVALIGNI
    288U,	// QVALIGNIb
    288U,	// QVALIGNIs
    16U,	// QVESPLATI
    16U,	// QVESPLATIb
    16U,	// QVESPLATIs
    0U,	// QVFABS
    0U,	// QVFABSs
    0U,	// QVFADD
    0U,	// QVFADDS
    0U,	// QVFADDSs
    0U,	// QVFCFID
    0U,	// QVFCFIDS
    0U,	// QVFCFIDU
    0U,	// QVFCFIDUS
    0U,	// QVFCFIDb
    0U,	// QVFCMPEQ
    0U,	// QVFCMPEQb
    0U,	// QVFCMPEQbs
    0U,	// QVFCMPGT
    0U,	// QVFCMPGTb
    0U,	// QVFCMPGTbs
    0U,	// QVFCMPLT
    0U,	// QVFCMPLTb
    0U,	// QVFCMPLTbs
    0U,	// QVFCPSGN
    0U,	// QVFCPSGNs
    0U,	// QVFCTID
    0U,	// QVFCTIDU
    0U,	// QVFCTIDUZ
    0U,	// QVFCTIDZ
    0U,	// QVFCTIDb
    0U,	// QVFCTIW
    0U,	// QVFCTIWU
    0U,	// QVFCTIWUZ
    0U,	// QVFCTIWZ
    352U,	// QVFLOGICAL
    352U,	// QVFLOGICALb
    352U,	// QVFLOGICALs
    18U,	// QVFMADD
    18U,	// QVFMADDS
    18U,	// QVFMADDSs
    0U,	// QVFMR
    0U,	// QVFMRb
    0U,	// QVFMRs
    18U,	// QVFMSUB
    18U,	// QVFMSUBS
    18U,	// QVFMSUBSs
    0U,	// QVFMUL
    0U,	// QVFMULS
    0U,	// QVFMULSs
    0U,	// QVFNABS
    0U,	// QVFNABSs
    0U,	// QVFNEG
    0U,	// QVFNEGs
    18U,	// QVFNMADD
    18U,	// QVFNMADDS
    18U,	// QVFNMADDSs
    18U,	// QVFNMSUB
    18U,	// QVFNMSUBS
    18U,	// QVFNMSUBSs
    224U,	// QVFPERM
    224U,	// QVFPERMs
    0U,	// QVFRE
    0U,	// QVFRES
    0U,	// QVFRESs
    0U,	// QVFRIM
    0U,	// QVFRIMs
    0U,	// QVFRIN
    0U,	// QVFRINs
    0U,	// QVFRIP
    0U,	// QVFRIPs
    0U,	// QVFRIZ
    0U,	// QVFRIZs
    0U,	// QVFRSP
    0U,	// QVFRSPs
    0U,	// QVFRSQRTE
    0U,	// QVFRSQRTES
    0U,	// QVFRSQRTESs
    18U,	// QVFSEL
    18U,	// QVFSELb
    18U,	// QVFSELbb
    18U,	// QVFSELbs
    0U,	// QVFSUB
    0U,	// QVFSUBS
    0U,	// QVFSUBSs
    0U,	// QVFTSTNAN
    0U,	// QVFTSTNANb
    0U,	// QVFTSTNANbs
    18U,	// QVFXMADD
    18U,	// QVFXMADDS
    0U,	// QVFXMUL
    0U,	// QVFXMULS
    18U,	// QVFXXCPNMADD
    18U,	// QVFXXCPNMADDS
    18U,	// QVFXXMADD
    18U,	// QVFXXMADDS
    18U,	// QVFXXNPMADD
    18U,	// QVFXXNPMADDS
    0U,	// QVGPCI
    0U,	// QVLFCDUX
    0U,	// QVLFCDUXA
    0U,	// QVLFCDX
    0U,	// QVLFCDXA
    0U,	// QVLFCSUX
    0U,	// QVLFCSUXA
    0U,	// QVLFCSX
    0U,	// QVLFCSXA
    0U,	// QVLFCSXs
    0U,	// QVLFDUX
    0U,	// QVLFDUXA
    0U,	// QVLFDX
    0U,	// QVLFDXA
    0U,	// QVLFDXb
    0U,	// QVLFIWAX
    0U,	// QVLFIWAXA
    0U,	// QVLFIWZX
    0U,	// QVLFIWZXA
    0U,	// QVLFSUX
    0U,	// QVLFSUXA
    0U,	// QVLFSX
    0U,	// QVLFSXA
    0U,	// QVLFSXb
    0U,	// QVLFSXs
    0U,	// QVLPCLDX
    0U,	// QVLPCLSX
    0U,	// QVLPCLSXint
    0U,	// QVLPCRDX
    0U,	// QVLPCRSX
    0U,	// QVSTFCDUX
    0U,	// QVSTFCDUXA
    0U,	// QVSTFCDUXI
    0U,	// QVSTFCDUXIA
    0U,	// QVSTFCDX
    0U,	// QVSTFCDXA
    0U,	// QVSTFCDXI
    0U,	// QVSTFCDXIA
    0U,	// QVSTFCSUX
    0U,	// QVSTFCSUXA
    0U,	// QVSTFCSUXI
    0U,	// QVSTFCSUXIA
    0U,	// QVSTFCSX
    0U,	// QVSTFCSXA
    0U,	// QVSTFCSXI
    0U,	// QVSTFCSXIA
    0U,	// QVSTFCSXs
    0U,	// QVSTFDUX
    0U,	// QVSTFDUXA
    0U,	// QVSTFDUXI
    0U,	// QVSTFDUXIA
    0U,	// QVSTFDX
    0U,	// QVSTFDXA
    0U,	// QVSTFDXI
    0U,	// QVSTFDXIA
    0U,	// QVSTFDXb
    0U,	// QVSTFIWX
    0U,	// QVSTFIWXA
    0U,	// QVSTFSUX
    0U,	// QVSTFSUXA
    0U,	// QVSTFSUXI
    0U,	// QVSTFSUXIA
    0U,	// QVSTFSUXs
    0U,	// QVSTFSX
    0U,	// QVSTFSXA
    0U,	// QVSTFSXI
    0U,	// QVSTFSXIA
    0U,	// QVSTFSXs
    0U,	// RESTORE_CR
    0U,	// RESTORE_CRBIT
    0U,	// RESTORE_VRSAVE
    0U,	// RFCI
    0U,	// RFDI
    0U,	// RFEBB
    0U,	// RFI
    0U,	// RFID
    0U,	// RFMCI
    96U,	// RLDCL
    96U,	// RLDCLo
    96U,	// RLDCR
    96U,	// RLDCRo
    104U,	// RLDIC
    104U,	// RLDICL
    104U,	// RLDICL_32_64
    104U,	// RLDICLo
    104U,	// RLDICR
    104U,	// RLDICRo
    104U,	// RLDICo
    0U,	// RLDIMI
    0U,	// RLDIMIo
    0U,	// RLWIMI
    0U,	// RLWIMI8
    0U,	// RLWIMI8o
    234U,	// RLWIMIbm
    0U,	// RLWIMIo
    234U,	// RLWIMIobm
    682U,	// RLWINM
    682U,	// RLWINM8
    682U,	// RLWINM8o
    234U,	// RLWINMbm
    682U,	// RLWINMo
    234U,	// RLWINMobm
    672U,	// RLWNM
    672U,	// RLWNM8
    672U,	// RLWNM8o
    234U,	// RLWNMbm
    672U,	// RLWNMo
    234U,	// RLWNMobm
    8U,	// ROTRDI
    8U,	// ROTRDIo
    10U,	// ROTRWI
    10U,	// ROTRWIo
    0U,	// ReadTB
    0U,	// SC
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_QBRC
    0U,	// SELECT_CC_QFRC
    0U,	// SELECT_CC_QSRC
    0U,	// SELECT_CC_VRRC
    0U,	// SELECT_CC_VSFRC
    0U,	// SELECT_CC_VSRC
    0U,	// SELECT_CC_VSSRC
    0U,	// SELECT_F4
    0U,	// SELECT_F8
    0U,	// SELECT_I4
    0U,	// SELECT_I8
    0U,	// SELECT_QBRC
    0U,	// SELECT_QFRC
    0U,	// SELECT_QSRC
    0U,	// SELECT_VRRC
    0U,	// SELECT_VSFRC
    0U,	// SELECT_VSRC
    0U,	// SELECT_VSSRC
    0U,	// SLBIA
    0U,	// SLBIE
    0U,	// SLBIEG
    0U,	// SLBMFEE
    0U,	// SLBMFEV
    0U,	// SLBMTE
    0U,	// SLBSYNC
    0U,	// SLD
    8U,	// SLDI
    8U,	// SLDIo
    0U,	// SLDo
    0U,	// SLW
    0U,	// SLW8
    0U,	// SLW8o
    10U,	// SLWI
    10U,	// SLWIo
    0U,	// SLWo
    0U,	// SPILL_CR
    0U,	// SPILL_CRBIT
    0U,	// SPILL_VRSAVE
    0U,	// SRAD
    8U,	// SRADI
    8U,	// SRADIo
    0U,	// SRADo
    0U,	// SRAW
    10U,	// SRAWI
    10U,	// SRAWIo
    0U,	// SRAWo
    0U,	// SRD
    8U,	// SRDI
    8U,	// SRDIo
    0U,	// SRDo
    0U,	// SRW
    0U,	// SRW8
    0U,	// SRW8o
    10U,	// SRWI
    10U,	// SRWIo
    0U,	// SRWo
    0U,	// STB
    0U,	// STB8
    0U,	// STBCIX
    0U,	// STBCX
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    0U,	// STD
    10U,	// STDAT
    0U,	// STDBRX
    0U,	// STDCIX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    0U,	// STFD
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    0U,	// STHCIX
    0U,	// STHCX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    0U,	// STMW
    0U,	// STOP
    10U,	// STSWI
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    10U,	// STWAT
    0U,	// STWBRX
    0U,	// STWCIX
    0U,	// STWCX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    0U,	// STXSD
    0U,	// STXSDX
    0U,	// STXSIBX
    0U,	// STXSIBXv
    0U,	// STXSIHX
    0U,	// STXSIHXv
    0U,	// STXSIWX
    0U,	// STXSSP
    0U,	// STXSSPX
    0U,	// STXV
    0U,	// STXVB16X
    0U,	// STXVD2X
    0U,	// STXVH8X
    0U,	// STXVL
    0U,	// STXVLL
    0U,	// STXVW4X
    0U,	// STXVX
    0U,	// SUBF
    0U,	// SUBF8
    0U,	// SUBF8o
    0U,	// SUBFC
    0U,	// SUBFC8
    0U,	// SUBFC8o
    0U,	// SUBFCo
    0U,	// SUBFE
    0U,	// SUBFE8
    0U,	// SUBFE8o
    0U,	// SUBFEo
    2U,	// SUBFIC
    2U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8o
    0U,	// SUBFMEo
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8o
    0U,	// SUBFZEo
    0U,	// SUBFo
    2U,	// SUBI
    2U,	// SUBIC
    2U,	// SUBICo
    2U,	// SUBIS
    0U,	// SYNC
    0U,	// TABORT
    0U,	// TABORTDC
    0U,	// TABORTDCI
    0U,	// TABORTWC
    0U,	// TABORTWCI
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TBEGIN
    0U,	// TCHECK
    0U,	// TCHECK_RET
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    0U,	// TD
    2U,	// TDI
    0U,	// TEND
    0U,	// TLBIA
    0U,	// TLBIE
    0U,	// TLBIEL
    0U,	// TLBIVAX
    0U,	// TLBLD
    0U,	// TLBLI
    0U,	// TLBRE
    0U,	// TLBRE2
    0U,	// TLBSX
    0U,	// TLBSX2
    0U,	// TLBSX2D
    0U,	// TLBSYNC
    0U,	// TLBWE
    0U,	// TLBWE2
    0U,	// TRAP
    0U,	// TRECHKPT
    0U,	// TRECLAIM
    0U,	// TSR
    0U,	// TW
    2U,	// TWI
    0U,	// UPDATE_VRSAVE
    0U,	// UpdateGBR
    0U,	// VABSDUB
    0U,	// VABSDUH
    0U,	// VABSDUW
    0U,	// VADDCUQ
    0U,	// VADDCUW
    224U,	// VADDECUQ
    224U,	// VADDEUQM
    0U,	// VADDFP
    0U,	// VADDSBS
    0U,	// VADDSHS
    0U,	// VADDSWS
    0U,	// VADDUBM
    0U,	// VADDUBS
    0U,	// VADDUDM
    0U,	// VADDUHM
    0U,	// VADDUHS
    0U,	// VADDUQM
    0U,	// VADDUWM
    0U,	// VADDUWS
    0U,	// VAND
    0U,	// VANDC
    0U,	// VAVGSB
    0U,	// VAVGSH
    0U,	// VAVGSW
    0U,	// VAVGUB
    0U,	// VAVGUH
    0U,	// VAVGUW
    0U,	// VBPERMD
    0U,	// VBPERMQ
    0U,	// VCFSX
    1U,	// VCFSX_0
    0U,	// VCFUX
    1U,	// VCFUX_0
    0U,	// VCIPHER
    0U,	// VCIPHERLAST
    0U,	// VCLZB
    0U,	// VCLZD
    0U,	// VCLZH
    0U,	// VCLZLSBB
    0U,	// VCLZW
    0U,	// VCMPBFP
    0U,	// VCMPBFPo
    0U,	// VCMPEQFP
    0U,	// VCMPEQFPo
    0U,	// VCMPEQUB
    0U,	// VCMPEQUBo
    0U,	// VCMPEQUD
    0U,	// VCMPEQUDo
    0U,	// VCMPEQUH
    0U,	// VCMPEQUHo
    0U,	// VCMPEQUW
    0U,	// VCMPEQUWo
    0U,	// VCMPGEFP
    0U,	// VCMPGEFPo
    0U,	// VCMPGTFP
    0U,	// VCMPGTFPo
    0U,	// VCMPGTSB
    0U,	// VCMPGTSBo
    0U,	// VCMPGTSD
    0U,	// VCMPGTSDo
    0U,	// VCMPGTSH
    0U,	// VCMPGTSHo
    0U,	// VCMPGTSW
    0U,	// VCMPGTSWo
    0U,	// VCMPGTUB
    0U,	// VCMPGTUBo
    0U,	// VCMPGTUD
    0U,	// VCMPGTUDo
    0U,	// VCMPGTUH
    0U,	// VCMPGTUHo
    0U,	// VCMPGTUW
    0U,	// VCMPGTUWo
    0U,	// VCMPNEB
    0U,	// VCMPNEBo
    0U,	// VCMPNEH
    0U,	// VCMPNEHo
    0U,	// VCMPNEW
    0U,	// VCMPNEWo
    0U,	// VCMPNEZB
    0U,	// VCMPNEZBo
    0U,	// VCMPNEZH
    0U,	// VCMPNEZHo
    0U,	// VCMPNEZW
    0U,	// VCMPNEZWo
    0U,	// VCTSXS
    1U,	// VCTSXS_0
    0U,	// VCTUXS
    1U,	// VCTUXS_0
    0U,	// VCTZB
    0U,	// VCTZD
    0U,	// VCTZH
    0U,	// VCTZLSBB
    0U,	// VCTZW
    0U,	// VEQV
    0U,	// VEXPTEFP
    1U,	// VEXTRACTD
    1U,	// VEXTRACTUB
    1U,	// VEXTRACTUH
    1U,	// VEXTRACTUW
    0U,	// VEXTSB2D
    0U,	// VEXTSB2Ds
    0U,	// VEXTSB2W
    0U,	// VEXTSB2Ws
    0U,	// VEXTSH2D
    0U,	// VEXTSH2Ds
    0U,	// VEXTSH2W
    0U,	// VEXTSH2Ws
    0U,	// VEXTSW2D
    0U,	// VEXTSW2Ds
    0U,	// VEXTUBLX
    0U,	// VEXTUBRX
    0U,	// VEXTUHLX
    0U,	// VEXTUHRX
    0U,	// VEXTUWLX
    0U,	// VEXTUWRX
    0U,	// VGBBD
    1U,	// VINSERTB
    1U,	// VINSERTD
    1U,	// VINSERTH
    1U,	// VINSERTW
    0U,	// VLOGEFP
    224U,	// VMADDFP
    0U,	// VMAXFP
    0U,	// VMAXSB
    0U,	// VMAXSD
    0U,	// VMAXSH
    0U,	// VMAXSW
    0U,	// VMAXUB
    0U,	// VMAXUD
    0U,	// VMAXUH
    0U,	// VMAXUW
    224U,	// VMHADDSHS
    224U,	// VMHRADDSHS
    0U,	// VMINFP
    0U,	// VMINSB
    0U,	// VMINSD
    0U,	// VMINSH
    0U,	// VMINSW
    0U,	// VMINUB
    0U,	// VMINUD
    0U,	// VMINUH
    0U,	// VMINUW
    224U,	// VMLADDUHM
    0U,	// VMRGEW
    0U,	// VMRGHB
    0U,	// VMRGHH
    0U,	// VMRGHW
    0U,	// VMRGLB
    0U,	// VMRGLH
    0U,	// VMRGLW
    0U,	// VMRGOW
    224U,	// VMSUMMBM
    224U,	// VMSUMSHM
    224U,	// VMSUMSHS
    224U,	// VMSUMUBM
    224U,	// VMSUMUHM
    224U,	// VMSUMUHS
    0U,	// VMUL10CUQ
    0U,	// VMUL10ECUQ
    0U,	// VMUL10EUQ
    0U,	// VMUL10UQ
    0U,	// VMULESB
    0U,	// VMULESH
    0U,	// VMULESW
    0U,	// VMULEUB
    0U,	// VMULEUH
    0U,	// VMULEUW
    0U,	// VMULOSB
    0U,	// VMULOSH
    0U,	// VMULOSW
    0U,	// VMULOUB
    0U,	// VMULOUH
    0U,	// VMULOUW
    0U,	// VMULUWM
    0U,	// VNAND
    0U,	// VNCIPHER
    0U,	// VNCIPHERLAST
    0U,	// VNEGD
    0U,	// VNEGW
    224U,	// VNMSUBFP
    0U,	// VNOR
    0U,	// VOR
    0U,	// VORC
    224U,	// VPERM
    224U,	// VPERMR
    224U,	// VPERMXOR
    0U,	// VPKPX
    0U,	// VPKSDSS
    0U,	// VPKSDUS
    0U,	// VPKSHSS
    0U,	// VPKSHUS
    0U,	// VPKSWSS
    0U,	// VPKSWUS
    0U,	// VPKUDUM
    0U,	// VPKUDUS
    0U,	// VPKUHUM
    0U,	// VPKUHUS
    0U,	// VPKUWUM
    0U,	// VPKUWUS
    0U,	// VPMSUMB
    0U,	// VPMSUMD
    0U,	// VPMSUMH
    0U,	// VPMSUMW
    0U,	// VPOPCNTB
    0U,	// VPOPCNTD
    0U,	// VPOPCNTH
    0U,	// VPOPCNTW
    0U,	// VPRTYBD
    0U,	// VPRTYBQ
    0U,	// VPRTYBW
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    0U,	// VRLB
    0U,	// VRLD
    0U,	// VRLDMI
    0U,	// VRLDNM
    0U,	// VRLH
    0U,	// VRLW
    0U,	// VRLWMI
    0U,	// VRLWNM
    0U,	// VRSQRTEFP
    0U,	// VSBOX
    224U,	// VSEL
    422U,	// VSHASIGMAD
    422U,	// VSHASIGMAW
    0U,	// VSL
    0U,	// VSLB
    0U,	// VSLD
    160U,	// VSLDOI
    0U,	// VSLH
    0U,	// VSLO
    0U,	// VSLV
    0U,	// VSLW
    0U,	// VSPLTB
    0U,	// VSPLTBs
    0U,	// VSPLTH
    0U,	// VSPLTHs
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    0U,	// VSPLTW
    0U,	// VSR
    0U,	// VSRAB
    0U,	// VSRAD
    0U,	// VSRAH
    0U,	// VSRAW
    0U,	// VSRB
    0U,	// VSRD
    0U,	// VSRH
    0U,	// VSRO
    0U,	// VSRV
    0U,	// VSRW
    0U,	// VSUBCUQ
    0U,	// VSUBCUW
    224U,	// VSUBECUQ
    224U,	// VSUBEUQM
    0U,	// VSUBFP
    0U,	// VSUBSBS
    0U,	// VSUBSHS
    0U,	// VSUBSWS
    0U,	// VSUBUBM
    0U,	// VSUBUBS
    0U,	// VSUBUDM
    0U,	// VSUBUHM
    0U,	// VSUBUHS
    0U,	// VSUBUQM
    0U,	// VSUBUWM
    0U,	// VSUBUWS
    0U,	// VSUM2SWS
    0U,	// VSUM4SBS
    0U,	// VSUM4SHS
    0U,	// VSUM4UBS
    0U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKHSW
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VUPKLSW
    0U,	// VXOR
    12U,	// V_SET0
    12U,	// V_SET0B
    12U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// WRTEE
    0U,	// WRTEEI
    0U,	// XOR
    0U,	// XOR8
    0U,	// XOR8o
    4U,	// XORI
    4U,	// XORI8
    4U,	// XORIS
    4U,	// XORIS8
    0U,	// XORo
    0U,	// XSABSDP
    0U,	// XSABSQP
    0U,	// XSADDDP
    0U,	// XSADDQP
    0U,	// XSADDQPO
    0U,	// XSADDSP
    0U,	// XSCMPEQDP
    0U,	// XSCMPEXPDP
    0U,	// XSCMPEXPQP
    0U,	// XSCMPGEDP
    0U,	// XSCMPGTDP
    0U,	// XSCMPNEDP
    0U,	// XSCMPODP
    0U,	// XSCMPOQP
    0U,	// XSCMPUDP
    0U,	// XSCMPUQP
    0U,	// XSCPSGNDP
    0U,	// XSCPSGNQP
    0U,	// XSCVDPHP
    0U,	// XSCVDPQP
    0U,	// XSCVDPSP
    0U,	// XSCVDPSPN
    0U,	// XSCVDPSXDS
    0U,	// XSCVDPSXDSs
    0U,	// XSCVDPSXWS
    0U,	// XSCVDPSXWSs
    0U,	// XSCVDPUXDS
    0U,	// XSCVDPUXDSs
    0U,	// XSCVDPUXWS
    0U,	// XSCVDPUXWSs
    0U,	// XSCVHPDP
    0U,	// XSCVQPDP
    0U,	// XSCVQPDPO
    0U,	// XSCVQPSDZ
    0U,	// XSCVQPSWZ
    0U,	// XSCVQPUDZ
    0U,	// XSCVQPUWZ
    0U,	// XSCVSDQP
    0U,	// XSCVSPDP
    0U,	// XSCVSPDPN
    0U,	// XSCVSXDDP
    0U,	// XSCVSXDSP
    0U,	// XSCVUDQP
    0U,	// XSCVUXDDP
    0U,	// XSCVUXDSP
    0U,	// XSDIVDP
    0U,	// XSDIVQP
    0U,	// XSDIVQPO
    0U,	// XSDIVSP
    0U,	// XSIEXPDP
    0U,	// XSIEXPQP
    1U,	// XSMADDADP
    1U,	// XSMADDASP
    1U,	// XSMADDMDP
    1U,	// XSMADDMSP
    0U,	// XSMADDQP
    0U,	// XSMADDQPO
    0U,	// XSMAXCDP
    0U,	// XSMAXDP
    0U,	// XSMAXJDP
    0U,	// XSMINCDP
    0U,	// XSMINDP
    0U,	// XSMINJDP
    1U,	// XSMSUBADP
    1U,	// XSMSUBASP
    1U,	// XSMSUBMDP
    1U,	// XSMSUBMSP
    0U,	// XSMSUBQP
    0U,	// XSMSUBQPO
    0U,	// XSMULDP
    0U,	// XSMULQP
    0U,	// XSMULQPO
    0U,	// XSMULSP
    0U,	// XSNABSDP
    0U,	// XSNABSQP
    0U,	// XSNEGDP
    0U,	// XSNEGQP
    1U,	// XSNMADDADP
    1U,	// XSNMADDASP
    1U,	// XSNMADDMDP
    1U,	// XSNMADDMSP
    0U,	// XSNMADDQP
    0U,	// XSNMADDQPO
    1U,	// XSNMSUBADP
    1U,	// XSNMSUBASP
    1U,	// XSNMSUBMDP
    1U,	// XSNMSUBMSP
    0U,	// XSNMSUBQP
    0U,	// XSNMSUBQPO
    0U,	// XSRDPI
    0U,	// XSRDPIC
    0U,	// XSRDPIM
    0U,	// XSRDPIP
    0U,	// XSRDPIZ
    0U,	// XSREDP
    0U,	// XSRESP
    288U,	// XSRQPI
    288U,	// XSRQPIX
    288U,	// XSRQPXP
    0U,	// XSRSQRTEDP
    0U,	// XSRSQRTESP
    0U,	// XSSQRTDP
    0U,	// XSSQRTQP
    0U,	// XSSQRTQPO
    0U,	// XSSQRTSP
    0U,	// XSSUBDP
    0U,	// XSSUBQP
    0U,	// XSSUBQPO
    0U,	// XSSUBSP
    0U,	// XSTDIVDP
    0U,	// XSTSQRTDP
    1U,	// XSTSTDCDP
    1U,	// XSTSTDCQP
    1U,	// XSTSTDCSP
    0U,	// XSXEXPDP
    0U,	// XSXEXPQP
    0U,	// XSXSIGDP
    0U,	// XSXSIGQP
    0U,	// XVABSDP
    0U,	// XVABSSP
    0U,	// XVADDDP
    0U,	// XVADDSP
    0U,	// XVCMPEQDP
    0U,	// XVCMPEQDPo
    0U,	// XVCMPEQSP
    0U,	// XVCMPEQSPo
    0U,	// XVCMPGEDP
    0U,	// XVCMPGEDPo
    0U,	// XVCMPGESP
    0U,	// XVCMPGESPo
    0U,	// XVCMPGTDP
    0U,	// XVCMPGTDPo
    0U,	// XVCMPGTSP
    0U,	// XVCMPGTSPo
    0U,	// XVCMPNEDP
    0U,	// XVCMPNEDPo
    0U,	// XVCMPNESP
    0U,	// XVCMPNESPo
    0U,	// XVCPSGNDP
    0U,	// XVCPSGNSP
    0U,	// XVCVDPSP
    0U,	// XVCVDPSXDS
    0U,	// XVCVDPSXWS
    0U,	// XVCVDPUXDS
    0U,	// XVCVDPUXWS
    0U,	// XVCVHPSP
    0U,	// XVCVSPDP
    0U,	// XVCVSPHP
    0U,	// XVCVSPSXDS
    0U,	// XVCVSPSXWS
    0U,	// XVCVSPUXDS
    0U,	// XVCVSPUXWS
    0U,	// XVCVSXDDP
    0U,	// XVCVSXDSP
    0U,	// XVCVSXWDP
    0U,	// XVCVSXWSP
    0U,	// XVCVUXDDP
    0U,	// XVCVUXDSP
    0U,	// XVCVUXWDP
    0U,	// XVCVUXWSP
    0U,	// XVDIVDP
    0U,	// XVDIVSP
    0U,	// XVIEXPDP
    0U,	// XVIEXPSP
    1U,	// XVMADDADP
    1U,	// XVMADDASP
    1U,	// XVMADDMDP
    1U,	// XVMADDMSP
    0U,	// XVMAXDP
    0U,	// XVMAXSP
    0U,	// XVMINDP
    0U,	// XVMINSP
    1U,	// XVMSUBADP
    1U,	// XVMSUBASP
    1U,	// XVMSUBMDP
    1U,	// XVMSUBMSP
    0U,	// XVMULDP
    0U,	// XVMULSP
    0U,	// XVNABSDP
    0U,	// XVNABSSP
    0U,	// XVNEGDP
    0U,	// XVNEGSP
    1U,	// XVNMADDADP
    1U,	// XVNMADDASP
    1U,	// XVNMADDMDP
    1U,	// XVNMADDMSP
    1U,	// XVNMSUBADP
    1U,	// XVNMSUBASP
    1U,	// XVNMSUBMDP
    1U,	// XVNMSUBMSP
    0U,	// XVRDPI
    0U,	// XVRDPIC
    0U,	// XVRDPIM
    0U,	// XVRDPIP
    0U,	// XVRDPIZ
    0U,	// XVREDP
    0U,	// XVRESP
    0U,	// XVRSPI
    0U,	// XVRSPIC
    0U,	// XVRSPIM
    0U,	// XVRSPIP
    0U,	// XVRSPIZ
    0U,	// XVRSQRTEDP
    0U,	// XVRSQRTESP
    0U,	// XVSQRTDP
    0U,	// XVSQRTSP
    0U,	// XVSUBDP
    0U,	// XVSUBSP
    0U,	// XVTDIVDP
    0U,	// XVTDIVSP
    0U,	// XVTSQRTDP
    0U,	// XVTSQRTSP
    1U,	// XVTSTDCDP
    1U,	// XVTSTDCSP
    0U,	// XVXEXPDP
    0U,	// XVXEXPSP
    0U,	// XVXSIGDP
    0U,	// XVXSIGSP
    0U,	// XXBRD
    0U,	// XXBRH
    0U,	// XXBRQ
    0U,	// XXBRW
    20U,	// XXEXTRACTUW
    1U,	// XXINSERTW
    0U,	// XXLAND
    0U,	// XXLANDC
    0U,	// XXLEQV
    0U,	// XXLNAND
    0U,	// XXLNOR
    0U,	// XXLOR
    0U,	// XXLORC
    0U,	// XXLORf
    0U,	// XXLXOR
    12U,	// XXLXORdpz
    12U,	// XXLXORspz
    12U,	// XXLXORz
    0U,	// XXMRGHW
    0U,	// XXMRGLW
    0U,	// XXPERM
    288U,	// XXPERMDI
    494U,	// XXPERMDIs
    0U,	// XXPERMR
    224U,	// XXSEL
    288U,	// XXSLDWI
    0U,	// XXSPLTIB
    16U,	// XXSPLTW
    16U,	// XXSPLTWs
    22U,	// gBC
    24U,	// gBCA
    0U,	// gBCAat
    0U,	// gBCCTR
    0U,	// gBCCTRL
    22U,	// gBCL
    24U,	// gBCLA
    0U,	// gBCLAat
    0U,	// gBCLR
    0U,	// gBCLRL
    0U,	// gBCLat
    0U,	// gBCat
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MI->getOpcode()] << 0;
  Bits |= (uint64_t)OpInfo1[MI->getOpcode()] << 32;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 16383)-1;


  // Fragment 0 encoded into 5 bits for 19 unique commands.
  switch ((Bits >> 14) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, BUNDLE, LIFETIME_START, LIFETIME_END, PATCHABLE_FUNCTION_EN...
    return;
    break;
  case 1:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 0, O);
    break;
  case 2:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printU16ImmOperand(MI, 0, O);
    break;
  case 3:
    // B, BCLalways, BDNZ, BDNZ8, BDNZL, BDNZLm, BDNZLp, BDNZm, BDNZp, BDZ, B...
    printBranchOperand(MI, 0, O);
    break;
  case 4:
    // BA, BDNZA, BDNZAm, BDNZAp, BDNZLA, BDNZLAm, BDNZLAp, BDZA, BDZAm, BDZA...
    printAbsBranchOperand(MI, 0, O);
    break;
  case 5:
    // BCC, BCCA, BCCCTR, BCCCTR8, BCCCTRL, BCCCTRL8, BCCL, BCCLA, BCCLR, BCC...
    printPredicateOperand(MI, 0, O, "cc");
    break;
  case 6:
    // BCTRL8_LDinto_toc
    printMemRegImm(MI, 0, O);
    return;
    break;
  case 7:
    // BL8_NOP_TLS, BL8_TLS, BL8_TLS_, BL_TLS
    printTLSCall(MI, 0, O);
    break;
  case 8:
    // DCBA, DCBFL, DCBFLP, DCBFx, DCBI, DCBST, DCBTCT, DCBTDS, DCBTSTCT, DCB...
    printMemRegReg(MI, 0, O);
    break;
  case 9:
    // DCBF, DCBT, DCBTST
    printMemRegReg(MI, 1, O);
    O << ", ";
    printU5ImmOperand(MI, 0, O);
    return;
    break;
  case 10:
    // DSS, MBAR, MTFSB0, MTFSB1, TD, TDI, TW, TWI, gBC, gBCA, gBCCTR, gBCCTR...
    printU5ImmOperand(MI, 0, O);
    break;
  case 11:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, MTDCR, MTV...
    printOperand(MI, 1, O);
    break;
  case 12:
    // ICBT
    printU4ImmOperand(MI, 0, O);
    O << ", ";
    printMemRegReg(MI, 1, O);
    return;
    break;
  case 13:
    // MTOCRF, MTOCRF8
    printcrbitm(MI, 0, O);
    O << ", ";
    printOperand(MI, 1, O);
    return;
    break;
  case 14:
    // MTSR
    printU4ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 0, O);
    return;
    break;
  case 15:
    // RFEBB
    printU1ImmOperand(MI, 0, O);
    return;
    break;
  case 16:
    // TABORTDC, TABORTDCI, TABORTWC, TABORTWCI
    printU5ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 17:
    // TBEGIN, TEND, TSR, XSRQPI, XSRQPIX, XSRQPXP
    printU1ImmOperand(MI, 1, O);
    break;
  case 18:
    // gBCAat, gBCLAat, gBCLat, gBCat
    printATBitsAsHint(MI, 1, O);
    O << ' ';
    printU5ImmOperand(MI, 0, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    break;
  }


  // Fragment 1 encoded into 5 bits for 22 unique commands.
  switch ((Bits >> 19) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    O << ", ";
    break;
  case 1:
    // ADJCALLSTACKDOWN, B, BA, BCLalways, BDNZ, BDNZ8, BDNZA, BDNZAm, BDNZAp...
    return;
    break;
  case 2:
    // ADJCALLSTACKUP, ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, TCRETURNai, ...
    O << ' ';
    break;
  case 3:
    // BCC
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 4:
    // BCCA
    O << 'a';
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BCCCTR, BCCCTR8
    O << "ctr";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 6:
    // BCCCTRL, BCCCTRL8
    O << "ctrl";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 7:
    // BCCL
    O << 'l';
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 8:
    // BCCLA
    O << "la";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    O << ", ";
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  case 9:
    // BCCLR
    O << "lr";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 10:
    // BCCLRL
    O << "lrl";
    printPredicateOperand(MI, 0, O, "pm");
    O << ' ';
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 11:
    // BCCTR, BCCTR8, BCCTR8n, BCCTRL, BCCTRL8, BCCTRL8n, BCCTRLn, BCCTRn, BC...
    O << ", 0";
    return;
    break;
  case 12:
    // BL8_NOP, BL8_NOP_TLS, BLA8_NOP
    O << "\n\tnop";
    return;
    break;
  case 13:
    // MFTB8
    O << ", 268";
    return;
    break;
  case 14:
    // MFVRSAVE, MFVRSAVEv
    O << ", 256";
    return;
    break;
  case 15:
    // QVLPCLSXint
    O << ", 0, ";
    printOperand(MI, 1, O);
    return;
    break;
  case 16:
    // TABORTDC, TABORTWC
    printOperand(MI, 3, O);
    return;
    break;
  case 17:
    // TABORTDCI, TABORTWCI
    printU5ImmOperand(MI, 3, O);
    return;
    break;
  case 18:
    // TLBIE
    O << ',';
    printOperand(MI, 0, O);
    return;
    break;
  case 19:
    // V_SETALLONES, V_SETALLONESB, V_SETALLONESH
    O << ", -1";
    return;
    break;
  case 20:
    // gBCAat, gBCLAat
    printAbsBranchOperand(MI, 3, O);
    return;
    break;
  case 21:
    // gBCLat, gBCat
    printBranchOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 20 unique commands.
  switch ((Bits >> 24) & 31) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ADJCALLSTACKUP
    printU16ImmOperand(MI, 1, O);
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, LBARX, LBARXL, LBZX, LBZX8, ...
    printMemRegReg(MI, 1, O);
    break;
  case 3:
    // BC, BCL, BCLn, BCn
    printBranchOperand(MI, 1, O);
    return;
    break;
  case 4:
    // CMPRB, CMPRB8
    printU1ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    O << ", ";
    printOperand(MI, 3, O);
    return;
    break;
  case 5:
    // CRSET, CRUNSET, MTDCR, V_SET0, V_SET0B, V_SET0H, XSRQPI, XSRQPIX, XSRQ...
    printOperand(MI, 0, O);
    break;
  case 6:
    // DCBTCT, DCBTDS, DCBTSTCT, DCBTSTDS, EVADDIW
    printU5ImmOperand(MI, 2, O);
    break;
  case 7:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, RLDIMI, RL...
    printOperand(MI, 2, O);
    O << ", ";
    break;
  case 8:
    // EVLDD, EVLDH, EVLDW, EVLHHESPLAT, EVLHHOSSPLAT, EVLHHOUSPLAT, EVLWHE, ...
    printMemRegImm(MI, 1, O);
    return;
    break;
  case 9:
    // EVSUBIFW
    printU5ImmOperand(MI, 1, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 10:
    // LA
    printS16ImmOperand(MI, 2, O);
    O << '(';
    printOperand(MI, 1, O);
    O << ')';
    return;
    break;
  case 11:
    // LBZU, LBZU8, LDU, LFDU, LFSU, LHAU, LHAU8, LHZU, LHZU8, LWZU, LWZU8, S...
    printMemRegImm(MI, 2, O);
    return;
    break;
  case 12:
    // LBZUX, LBZUX8, LDUX, LFDUX, LFSUX, LHAUX, LHAUX8, LHZUX, LHZUX8, LWAUX...
    printMemRegReg(MI, 2, O);
    return;
    break;
  case 13:
    // LI, LI8, LIS, LIS8
    printS16ImmOperand(MI, 1, O);
    return;
    break;
  case 14:
    // MFBHRBE
    printU10ImmOperand(MI, 1, O);
    return;
    break;
  case 15:
    // MFOCRF, MFOCRF8
    printcrbitm(MI, 1, O);
    return;
    break;
  case 16:
    // MFSR
    printU4ImmOperand(MI, 1, O);
    return;
    break;
  case 17:
    // QVGPCI
    printU12ImmOperand(MI, 1, O);
    return;
    break;
  case 18:
    // VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O);
    return;
    break;
  case 19:
    // XXSPLTIB
    printU8ImmOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 29) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    O << ", ";
    break;
  case 1:
    // ADDME, ADDME8, ADDME8o, ADDMEo, ADDZE, ADDZE8, ADDZE8o, ADDZEo, BCDCTN...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32
    O << ' ';
    printOperand(MI, 3, O);
    O << ' ';
    printOperand(MI, 4, O);
    return;
    break;
  case 3:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printU5ImmOperand(MI, 0, O);
    return;
    break;
  case 4:
    // LBARXL, LDARXL, LHARXL, LWARXL
    O << ", 1";
    return;
    break;
  case 5:
    // RLDIMI, RLDIMIo
    printU6ImmOperand(MI, 3, O);
    O << ", ";
    printU6ImmOperand(MI, 4, O);
    return;
    break;
  case 6:
    // RLWIMI, RLWIMI8, RLWIMI8o, RLWIMIo
    printU5ImmOperand(MI, 3, O);
    O << ", ";
    printU5ImmOperand(MI, 4, O);
    O << ", ";
    printU5ImmOperand(MI, 5, O);
    return;
    break;
  case 7:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTBs, VSPLTH, VSPLTHs, VSPLTW
    printU5ImmOperand(MI, 1, O);
    return;
    break;
  case 8:
    // VCFSX_0, VCFUX_0, VCTSXS_0, VCTUXS_0
    O << ", 0";
    return;
    break;
  case 9:
    // VEXTRACTD, VEXTRACTUB, VEXTRACTUH, VEXTRACTUW, VINSERTB, VINSERTD, VIN...
    printU4ImmOperand(MI, 1, O);
    return;
    break;
  case 10:
    // XSMADDADP, XSMADDASP, XSMADDMDP, XSMADDMSP, XSMSUBADP, XSMSUBASP, XSMS...
    printOperand(MI, 3, O);
    return;
    break;
  case 11:
    // XSTSTDCDP, XSTSTDCQP, XSTSTDCSP, XVTSTDCDP, XVTSTDCSP
    printU7ImmOperand(MI, 1, O);
    return;
    break;
  case 12:
    // XXINSERTW
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 33) & 15) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, ADDIS, ADDIS8, CMPDI, CMPWI, MULLI...
    printS16ImmOperand(MI, 2, O);
    return;
    break;
  case 2:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O);
    return;
    break;
  case 3:
    // BCDCFNo, BCDCFSQo, BCDCFZo, BCDCTZo, BCDSETSGNo, CP_COPY, CP_COPY8, CP...
    printU1ImmOperand(MI, 2, O);
    break;
  case 4:
    // CLRLSLDI, CLRLSLDIo, CLRRDI, CLRRDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo...
    printU6ImmOperand(MI, 2, O);
    break;
  case 5:
    // CLRLSLWI, CLRLSLWIo, CLRRWI, CLRRWIo, EVRLWI, EVSLWI, EVSRWIS, EVSRWIU...
    printU5ImmOperand(MI, 2, O);
    break;
  case 6:
    // CRSET, CRUNSET, V_SET0, V_SET0B, V_SET0H, XXLXORdpz, XXLXORspz, XXLXOR...
    printOperand(MI, 0, O);
    return;
    break;
  case 7:
    // EVADDIW, XXPERMDIs
    printOperand(MI, 1, O);
    break;
  case 8:
    // QVESPLATI, QVESPLATIb, QVESPLATIs, XXSPLTW, XXSPLTWs
    printU2ImmOperand(MI, 2, O);
    return;
    break;
  case 9:
    // QVFMADD, QVFMADDS, QVFMADDSs, QVFMSUB, QVFMSUBS, QVFMSUBSs, QVFNMADD, ...
    printOperand(MI, 3, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 10:
    // XXEXTRACTUW
    printU4ImmOperand(MI, 2, O);
    return;
    break;
  case 11:
    // gBC, gBCL
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 12:
    // gBCA, gBCLA
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 37) & 1) {
    // BCDSRo, BCDSo, BCDTRUNCo, CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, EX...
    O << ", ";
  } else {
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    return;
  }


  // Fragment 6 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 38) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // BCDSRo, BCDSo, BCDTRUNCo
    printU1ImmOperand(MI, 3, O);
    return;
    break;
  case 1:
    // CLRLSLDI, CLRLSLDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo, INSRDI, INSRDIo...
    printU6ImmOperand(MI, 3, O);
    return;
    break;
  case 2:
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    printU5ImmOperand(MI, 3, O);
    break;
  case 3:
    // FMADD, FMADDS, FMADDSo, FMADDo, FMSUB, FMSUBS, FMSUBSo, FMSUBo, FNMADD...
    printOperand(MI, 3, O);
    return;
    break;
  case 4:
    // QVALIGNI, QVALIGNIb, QVALIGNIs, XSRQPI, XSRQPIX, XSRQPXP, XXPERMDI, XX...
    printU2ImmOperand(MI, 3, O);
    return;
    break;
  case 5:
    // QVFLOGICAL, QVFLOGICALb, QVFLOGICALs
    printU12ImmOperand(MI, 3, O);
    return;
    break;
  case 6:
    // VSHASIGMAD, VSHASIGMAW
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  case 7:
    // XXPERMDIs
    printU2ImmOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 41) & 1) {
    // RLWINM, RLWINM8, RLWINM8o, RLWINMo, RLWNM, RLWNM8, RLWNM8o, RLWNMo
    O << ", ";
    printU5ImmOperand(MI, 4, O);
    return;
  } else {
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *PPCInstPrinter::getRegisterName(unsigned RegNo) {
  assert(RegNo && RegNo < 310 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ '*', '*', 'R', 'O', 'U', 'N', 'D', 'I', 'N', 'G', 32, 'M', 'O', 'D', 'E', '*', '*', 0,
  /* 18 */ '*', '*', 'F', 'R', 'A', 'M', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 36 */ '*', '*', 'B', 'A', 'S', 'E', 32, 'P', 'O', 'I', 'N', 'T', 'E', 'R', '*', '*', 0,
  /* 53 */ 'f', '1', '0', 0,
  /* 57 */ 'q', '1', '0', 0,
  /* 61 */ 'r', '1', '0', 0,
  /* 65 */ 'v', 's', '1', '0', 0,
  /* 70 */ 'v', '1', '0', 0,
  /* 74 */ 'f', '2', '0', 0,
  /* 78 */ 'q', '2', '0', 0,
  /* 82 */ 'r', '2', '0', 0,
  /* 86 */ 'v', 's', '2', '0', 0,
  /* 91 */ 'v', '2', '0', 0,
  /* 95 */ 'f', '3', '0', 0,
  /* 99 */ 'q', '3', '0', 0,
  /* 103 */ 'r', '3', '0', 0,
  /* 107 */ 'v', 's', '3', '0', 0,
  /* 112 */ 'v', '3', '0', 0,
  /* 116 */ 'v', 's', '4', '0', 0,
  /* 121 */ 'v', 's', '5', '0', 0,
  /* 126 */ 'v', 's', '6', '0', 0,
  /* 131 */ 'f', '0', 0,
  /* 134 */ 'q', '0', 0,
  /* 137 */ 'c', 'r', '0', 0,
  /* 141 */ 'v', 's', '0', 0,
  /* 145 */ 'v', '0', 0,
  /* 148 */ 'f', '1', '1', 0,
  /* 152 */ 'q', '1', '1', 0,
  /* 156 */ 'r', '1', '1', 0,
  /* 160 */ 'v', 's', '1', '1', 0,
  /* 165 */ 'v', '1', '1', 0,
  /* 169 */ 'f', '2', '1', 0,
  /* 173 */ 'q', '2', '1', 0,
  /* 177 */ 'r', '2', '1', 0,
  /* 181 */ 'v', 's', '2', '1', 0,
  /* 186 */ 'v', '2', '1', 0,
  /* 190 */ 'f', '3', '1', 0,
  /* 194 */ 'q', '3', '1', 0,
  /* 198 */ 'r', '3', '1', 0,
  /* 202 */ 'v', 's', '3', '1', 0,
  /* 207 */ 'v', '3', '1', 0,
  /* 211 */ 'v', 's', '4', '1', 0,
  /* 216 */ 'v', 's', '5', '1', 0,
  /* 221 */ 'v', 's', '6', '1', 0,
  /* 226 */ 'f', '1', 0,
  /* 229 */ 'q', '1', 0,
  /* 232 */ 'c', 'r', '1', 0,
  /* 236 */ 'v', 's', '1', 0,
  /* 240 */ 'v', '1', 0,
  /* 243 */ 'f', '1', '2', 0,
  /* 247 */ 'q', '1', '2', 0,
  /* 251 */ 'r', '1', '2', 0,
  /* 255 */ 'v', 's', '1', '2', 0,
  /* 260 */ 'v', '1', '2', 0,
  /* 264 */ 'f', '2', '2', 0,
  /* 268 */ 'q', '2', '2', 0,
  /* 272 */ 'r', '2', '2', 0,
  /* 276 */ 'v', 's', '2', '2', 0,
  /* 281 */ 'v', '2', '2', 0,
  /* 285 */ 'v', 's', '3', '2', 0,
  /* 290 */ 'v', 's', '4', '2', 0,
  /* 295 */ 'v', 's', '5', '2', 0,
  /* 300 */ 'v', 's', '6', '2', 0,
  /* 305 */ 'f', '2', 0,
  /* 308 */ 'q', '2', 0,
  /* 311 */ 'c', 'r', '2', 0,
  /* 315 */ 'v', 's', '2', 0,
  /* 319 */ 'v', '2', 0,
  /* 322 */ 'f', '1', '3', 0,
  /* 326 */ 'q', '1', '3', 0,
  /* 330 */ 'r', '1', '3', 0,
  /* 334 */ 'v', 's', '1', '3', 0,
  /* 339 */ 'v', '1', '3', 0,
  /* 343 */ 'f', '2', '3', 0,
  /* 347 */ 'q', '2', '3', 0,
  /* 351 */ 'r', '2', '3', 0,
  /* 355 */ 'v', 's', '2', '3', 0,
  /* 360 */ 'v', '2', '3', 0,
  /* 364 */ 'v', 's', '3', '3', 0,
  /* 369 */ 'v', 's', '4', '3', 0,
  /* 374 */ 'v', 's', '5', '3', 0,
  /* 379 */ 'v', 's', '6', '3', 0,
  /* 384 */ 'f', '3', 0,
  /* 387 */ 'q', '3', 0,
  /* 390 */ 'c', 'r', '3', 0,
  /* 394 */ 'v', 's', '3', 0,
  /* 398 */ 'v', '3', 0,
  /* 401 */ 'f', '1', '4', 0,
  /* 405 */ 'q', '1', '4', 0,
  /* 409 */ 'r', '1', '4', 0,
  /* 413 */ 'v', 's', '1', '4', 0,
  /* 418 */ 'v', '1', '4', 0,
  /* 422 */ 'f', '2', '4', 0,
  /* 426 */ 'q', '2', '4', 0,
  /* 430 */ 'r', '2', '4', 0,
  /* 434 */ 'v', 's', '2', '4', 0,
  /* 439 */ 'v', '2', '4', 0,
  /* 443 */ 'v', 's', '3', '4', 0,
  /* 448 */ 'v', 's', '4', '4', 0,
  /* 453 */ 'v', 's', '5', '4', 0,
  /* 458 */ 'f', '4', 0,
  /* 461 */ 'q', '4', 0,
  /* 464 */ 'c', 'r', '4', 0,
  /* 468 */ 'v', 's', '4', 0,
  /* 472 */ 'v', '4', 0,
  /* 475 */ 'f', '1', '5', 0,
  /* 479 */ 'q', '1', '5', 0,
  /* 483 */ 'r', '1', '5', 0,
  /* 487 */ 'v', 's', '1', '5', 0,
  /* 492 */ 'v', '1', '5', 0,
  /* 496 */ 'f', '2', '5', 0,
  /* 500 */ 'q', '2', '5', 0,
  /* 504 */ 'r', '2', '5', 0,
  /* 508 */ 'v', 's', '2', '5', 0,
  /* 513 */ 'v', '2', '5', 0,
  /* 517 */ 'v', 's', '3', '5', 0,
  /* 522 */ 'v', 's', '4', '5', 0,
  /* 527 */ 'v', 's', '5', '5', 0,
  /* 532 */ 'f', '5', 0,
  /* 535 */ 'q', '5', 0,
  /* 538 */ 'c', 'r', '5', 0,
  /* 542 */ 'v', 's', '5', 0,
  /* 546 */ 'v', '5', 0,
  /* 549 */ 'f', '1', '6', 0,
  /* 553 */ 'q', '1', '6', 0,
  /* 557 */ 'r', '1', '6', 0,
  /* 561 */ 'v', 's', '1', '6', 0,
  /* 566 */ 'v', '1', '6', 0,
  /* 570 */ 'f', '2', '6', 0,
  /* 574 */ 'q', '2', '6', 0,
  /* 578 */ 'r', '2', '6', 0,
  /* 582 */ 'v', 's', '2', '6', 0,
  /* 587 */ 'v', '2', '6', 0,
  /* 591 */ 'v', 's', '3', '6', 0,
  /* 596 */ 'v', 's', '4', '6', 0,
  /* 601 */ 'v', 's', '5', '6', 0,
  /* 606 */ 'f', '6', 0,
  /* 609 */ 'q', '6', 0,
  /* 612 */ 'c', 'r', '6', 0,
  /* 616 */ 'v', 's', '6', 0,
  /* 620 */ 'v', '6', 0,
  /* 623 */ 'f', '1', '7', 0,
  /* 627 */ 'q', '1', '7', 0,
  /* 631 */ 'r', '1', '7', 0,
  /* 635 */ 'v', 's', '1', '7', 0,
  /* 640 */ 'v', '1', '7', 0,
  /* 644 */ 'f', '2', '7', 0,
  /* 648 */ 'q', '2', '7', 0,
  /* 652 */ 'r', '2', '7', 0,
  /* 656 */ 'v', 's', '2', '7', 0,
  /* 661 */ 'v', '2', '7', 0,
  /* 665 */ 'v', 's', '3', '7', 0,
  /* 670 */ 'v', 's', '4', '7', 0,
  /* 675 */ 'v', 's', '5', '7', 0,
  /* 680 */ 'f', '7', 0,
  /* 683 */ 'q', '7', 0,
  /* 686 */ 'c', 'r', '7', 0,
  /* 690 */ 'v', 's', '7', 0,
  /* 694 */ 'v', '7', 0,
  /* 697 */ 'f', '1', '8', 0,
  /* 701 */ 'q', '1', '8', 0,
  /* 705 */ 'r', '1', '8', 0,
  /* 709 */ 'v', 's', '1', '8', 0,
  /* 714 */ 'v', '1', '8', 0,
  /* 718 */ 'f', '2', '8', 0,
  /* 722 */ 'q', '2', '8', 0,
  /* 726 */ 'r', '2', '8', 0,
  /* 730 */ 'v', 's', '2', '8', 0,
  /* 735 */ 'v', '2', '8', 0,
  /* 739 */ 'v', 's', '3', '8', 0,
  /* 744 */ 'v', 's', '4', '8', 0,
  /* 749 */ 'v', 's', '5', '8', 0,
  /* 754 */ 'f', '8', 0,
  /* 757 */ 'q', '8', 0,
  /* 760 */ 'r', '8', 0,
  /* 763 */ 'v', 's', '8', 0,
  /* 767 */ 'v', '8', 0,
  /* 770 */ 'f', '1', '9', 0,
  /* 774 */ 'q', '1', '9', 0,
  /* 778 */ 'r', '1', '9', 0,
  /* 782 */ 'v', 's', '1', '9', 0,
  /* 787 */ 'v', '1', '9', 0,
  /* 791 */ 'f', '2', '9', 0,
  /* 795 */ 'q', '2', '9', 0,
  /* 799 */ 'r', '2', '9', 0,
  /* 803 */ 'v', 's', '2', '9', 0,
  /* 808 */ 'v', '2', '9', 0,
  /* 812 */ 'v', 's', '3', '9', 0,
  /* 817 */ 'v', 's', '4', '9', 0,
  /* 822 */ 'v', 's', '5', '9', 0,
  /* 827 */ 'f', '9', 0,
  /* 830 */ 'q', '9', 0,
  /* 833 */ 'r', '9', 0,
  /* 836 */ 'v', 's', '9', 0,
  /* 840 */ 'v', '9', 0,
  /* 843 */ 'c', 'a', 0,
  /* 846 */ 'v', 'r', 's', 'a', 'v', 'e', 0,
  /* 853 */ 'l', 'r', 0,
  /* 856 */ 'c', 't', 'r', 0,
  };

  static const uint16_t RegAsmOffset[] = {
    36, 843, 856, 18, 853, 0, 846, 55, 36, 137, 232, 311, 390, 464, 
    538, 612, 686, 856, 131, 226, 305, 384, 458, 532, 606, 680, 754, 827, 
    53, 148, 243, 322, 401, 475, 549, 623, 697, 770, 74, 169, 264, 343, 
    422, 496, 570, 644, 718, 791, 95, 190, 18, 853, 134, 229, 308, 387, 
    461, 535, 609, 683, 757, 830, 57, 152, 247, 326, 405, 479, 553, 627, 
    701, 774, 78, 173, 268, 347, 426, 500, 574, 648, 722, 795, 99, 194, 
    138, 233, 312, 391, 465, 539, 613, 687, 760, 833, 61, 156, 251, 330, 
    409, 483, 557, 631, 705, 778, 82, 177, 272, 351, 430, 504, 578, 652, 
    726, 799, 103, 198, 145, 240, 319, 398, 472, 546, 620, 694, 767, 840, 
    70, 165, 260, 339, 418, 492, 566, 640, 714, 787, 91, 186, 281, 360, 
    439, 513, 587, 661, 735, 808, 112, 207, 145, 240, 319, 398, 472, 546, 
    620, 694, 767, 840, 70, 165, 260, 339, 418, 492, 566, 640, 714, 787, 
    91, 186, 281, 360, 439, 513, 587, 661, 735, 808, 112, 207, 141, 236, 
    315, 394, 468, 542, 616, 690, 763, 836, 65, 160, 255, 334, 413, 487, 
    561, 635, 709, 782, 86, 181, 276, 355, 434, 508, 582, 656, 730, 803, 
    107, 202, 285, 364, 443, 517, 591, 665, 739, 812, 116, 211, 290, 369, 
    448, 522, 596, 670, 744, 817, 121, 216, 295, 374, 453, 527, 601, 675, 
    749, 822, 126, 221, 300, 379, 138, 233, 312, 391, 465, 539, 613, 687, 
    760, 833, 61, 156, 251, 330, 409, 483, 557, 631, 705, 778, 82, 177, 
    272, 351, 430, 504, 578, 652, 726, 799, 103, 198, 55, 245, 551, 54, 
    402, 698, 265, 571, 96, 150, 477, 772, 323, 624, 170, 497, 792, 55, 
    403, 699, 244, 550, 75, 423, 719, 324, 625, 149, 476, 771, 344, 645, 
    191, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool PPCInstPrinter::printAliasInstr(const MCInst *MI, raw_ostream &OS) {
  const char *AsmString;
  switch (MI->getOpcode()) {
  default: return false;
  case PPC::BCC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 12, CR0, condbrtarget:$dst)
      AsmString = "blt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 14, CR0, condbrtarget:$dst)
      AsmString = "blt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 15, CR0, condbrtarget:$dst)
      AsmString = "blt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 44, CR0, condbrtarget:$dst)
      AsmString = "bgt $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 46, CR0, condbrtarget:$dst)
      AsmString = "bgt- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 47, CR0, condbrtarget:$dst)
      AsmString = "bgt+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 76, CR0, condbrtarget:$dst)
      AsmString = "beq $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 78, CR0, condbrtarget:$dst)
      AsmString = "beq- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 79, CR0, condbrtarget:$dst)
      AsmString = "beq+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 68, CR0, condbrtarget:$dst)
      AsmString = "bne $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 70, CR0, condbrtarget:$dst)
      AsmString = "bne- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCC 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCC 71, CR0, condbrtarget:$dst)
      AsmString = "bne+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 12, CR0, abscondbrtarget:$dst)
      AsmString = "blta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 14, CR0, abscondbrtarget:$dst)
      AsmString = "blta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 15, CR0, abscondbrtarget:$dst)
      AsmString = "blta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgta $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgta- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgta+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqa $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqa- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqa+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnea $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnea- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnea+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCCTR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 12, crrc:$cc)
      AsmString = "bltctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 12, CR0)
      AsmString = "bltctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 14, crrc:$cc)
      AsmString = "bltctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 14, CR0)
      AsmString = "bltctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 15, crrc:$cc)
      AsmString = "bltctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 15, CR0)
      AsmString = "bltctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 44, crrc:$cc)
      AsmString = "bgtctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 44, CR0)
      AsmString = "bgtctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 46, crrc:$cc)
      AsmString = "bgtctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 46, CR0)
      AsmString = "bgtctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 47, crrc:$cc)
      AsmString = "bgtctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 47, CR0)
      AsmString = "bgtctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 76, crrc:$cc)
      AsmString = "beqctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 76, CR0)
      AsmString = "beqctr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 78, crrc:$cc)
      AsmString = "beqctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 78, CR0)
      AsmString = "beqctr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 79, crrc:$cc)
      AsmString = "beqctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 79, CR0)
      AsmString = "beqctr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 68, crrc:$cc)
      AsmString = "bnectr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 68, CR0)
      AsmString = "bnectr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 70, crrc:$cc)
      AsmString = "bnectr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 70, CR0)
      AsmString = "bnectr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTR 71, crrc:$cc)
      AsmString = "bnectr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTR 71, CR0)
      AsmString = "bnectr+";
      break;
    }
    return false;
  case PPC::BCCCTRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 12, crrc:$cc)
      AsmString = "bltctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 12, CR0)
      AsmString = "bltctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 14, crrc:$cc)
      AsmString = "bltctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 14, CR0)
      AsmString = "bltctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 15, crrc:$cc)
      AsmString = "bltctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 15, CR0)
      AsmString = "bltctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 44, crrc:$cc)
      AsmString = "bgtctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 44, CR0)
      AsmString = "bgtctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 46, crrc:$cc)
      AsmString = "bgtctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 46, CR0)
      AsmString = "bgtctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 47, crrc:$cc)
      AsmString = "bgtctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 47, CR0)
      AsmString = "bgtctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 76, crrc:$cc)
      AsmString = "beqctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 76, CR0)
      AsmString = "beqctrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 78, crrc:$cc)
      AsmString = "beqctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 78, CR0)
      AsmString = "beqctrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 79, crrc:$cc)
      AsmString = "beqctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 79, CR0)
      AsmString = "beqctrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 68, crrc:$cc)
      AsmString = "bnectrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 68, CR0)
      AsmString = "bnectrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 70, crrc:$cc)
      AsmString = "bnectrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 70, CR0)
      AsmString = "bnectrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCCTRL 71, crrc:$cc)
      AsmString = "bnectrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCCTRL 71, CR0)
      AsmString = "bnectrl+";
      break;
    }
    return false;
  case PPC::BCCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 12, CR0, condbrtarget:$dst)
      AsmString = "bltl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 14, CR0, condbrtarget:$dst)
      AsmString = "bltl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 15, CR0, condbrtarget:$dst)
      AsmString = "bltl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 44, CR0, condbrtarget:$dst)
      AsmString = "bgtl $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 46, CR0, condbrtarget:$dst)
      AsmString = "bgtl- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 47, CR0, condbrtarget:$dst)
      AsmString = "bgtl+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 76, CR0, condbrtarget:$dst)
      AsmString = "beql $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 78, CR0, condbrtarget:$dst)
      AsmString = "beql- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 79, CR0, condbrtarget:$dst)
      AsmString = "beql+ $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 68, CR0, condbrtarget:$dst)
      AsmString = "bnel $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 70, CR0, condbrtarget:$dst)
      AsmString = "bnel- $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCL 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCL 71, CR0, condbrtarget:$dst)
      AsmString = "bnel+ $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::BCCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 12, CR0, abscondbrtarget:$dst)
      AsmString = "bltla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 14, CR0, abscondbrtarget:$dst)
      AsmString = "bltla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 15, CR0, abscondbrtarget:$dst)
      AsmString = "bltla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqla $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqla- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqla+ $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnela $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnela- $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnela+ $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::BCCLR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 12, crrc:$cc)
      AsmString = "bltlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 12, CR0)
      AsmString = "bltlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 14, crrc:$cc)
      AsmString = "bltlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 14, CR0)
      AsmString = "bltlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 15, crrc:$cc)
      AsmString = "bltlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 15, CR0)
      AsmString = "bltlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 44, crrc:$cc)
      AsmString = "bgtlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 44, CR0)
      AsmString = "bgtlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 46, crrc:$cc)
      AsmString = "bgtlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 46, CR0)
      AsmString = "bgtlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 47, crrc:$cc)
      AsmString = "bgtlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 47, CR0)
      AsmString = "bgtlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 76, crrc:$cc)
      AsmString = "beqlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 76, CR0)
      AsmString = "beqlr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 78, crrc:$cc)
      AsmString = "beqlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 78, CR0)
      AsmString = "beqlr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 79, crrc:$cc)
      AsmString = "beqlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 79, CR0)
      AsmString = "beqlr+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 68, crrc:$cc)
      AsmString = "bnelr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 68, CR0)
      AsmString = "bnelr";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 70, crrc:$cc)
      AsmString = "bnelr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 70, CR0)
      AsmString = "bnelr-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLR 71, crrc:$cc)
      AsmString = "bnelr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLR 71, CR0)
      AsmString = "bnelr+";
      break;
    }
    return false;
  case PPC::BCCLRL:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 12, crrc:$cc)
      AsmString = "bltlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 12, CR0)
      AsmString = "bltlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 14, crrc:$cc)
      AsmString = "bltlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 14, CR0)
      AsmString = "bltlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 15, crrc:$cc)
      AsmString = "bltlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 15, CR0)
      AsmString = "bltlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 44, crrc:$cc)
      AsmString = "bgtlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 44 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 44, CR0)
      AsmString = "bgtlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 46, crrc:$cc)
      AsmString = "bgtlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 46 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 46, CR0)
      AsmString = "bgtlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 47, crrc:$cc)
      AsmString = "bgtlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 47 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 47, CR0)
      AsmString = "bgtlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 76, crrc:$cc)
      AsmString = "beqlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 76 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 76, CR0)
      AsmString = "beqlrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 78, crrc:$cc)
      AsmString = "beqlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 78 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 78, CR0)
      AsmString = "beqlrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 79, crrc:$cc)
      AsmString = "beqlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 79 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 79, CR0)
      AsmString = "beqlrl+";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 68, crrc:$cc)
      AsmString = "bnelrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 68 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 68, CR0)
      AsmString = "bnelrl";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 70, crrc:$cc)
      AsmString = "bnelrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 70 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 70, CR0)
      AsmString = "bnelrl-";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (BCCLRL 71, crrc:$cc)
      AsmString = "bnelrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 71 &&
        MI->getOperand(1).getReg() == PPC::CR0) {
      // (BCCLRL 71, CR0)
      AsmString = "bnelrl+";
      break;
    }
    return false;
  case PPC::CMPD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpd $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPDI CR0, g8rc:$rA, s16imm64:$imm)
      AsmString = "cmpdi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CMPLD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpld $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLDI CR0, g8rc:$rA, u16imm64:$imm)
      AsmString = "cmpldi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPLW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPLW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmplw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPLWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPLWI CR0, gprc:$rA, u16imm:$imm)
      AsmString = "cmplwi $\x02, $\xFF\x03\x04";
      break;
    }
    return false;
  case PPC::CMPW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (CMPW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmpw $\x02, $\x03";
      break;
    }
    return false;
  case PPC::CMPWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::CR0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CMPWI CR0, gprc:$rA, s16imm:$imm)
      AsmString = "cmpwi $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::CNTLZW:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CNTLZW gprc:$rA, gprc:$rS)
      AsmString = "cntlzw $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CNTLZWo:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (CNTLZWo gprc:$rA, gprc:$rS)
      AsmString = "cntlzw. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CREQV:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CREQV crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crset $\x01";
      break;
    }
    return false;
  case PPC::CRNOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CRNOR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crnot $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CROR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (CROR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crmove $\x01, $\x02";
      break;
    }
    return false;
  case PPC::CRXOR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg()) {
      // (CRXOR crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crclr $\x01";
      break;
    }
    return false;
  case PPC::MBAR:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (MBAR 0)
      AsmString = "mbar";
      break;
    }
    return false;
  case PPC::MFDCR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 128) {
      // (MFDCR gprc:$Rx, 128)
      AsmString = "mfbr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 129) {
      // (MFDCR gprc:$Rx, 129)
      AsmString = "mfbr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 130) {
      // (MFDCR gprc:$Rx, 130)
      AsmString = "mfbr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 131) {
      // (MFDCR gprc:$Rx, 131)
      AsmString = "mfbr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 132) {
      // (MFDCR gprc:$Rx, 132)
      AsmString = "mfbr4 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 133) {
      // (MFDCR gprc:$Rx, 133)
      AsmString = "mfbr5 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 134) {
      // (MFDCR gprc:$Rx, 134)
      AsmString = "mfbr6 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 135) {
      // (MFDCR gprc:$Rx, 135)
      AsmString = "mfbr7 $\x01";
      break;
    }
    return false;
  case PPC::MFSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1) {
      // (MFSPR gprc:$Rx, 1)
      AsmString = "mfxer $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 4) {
      // (MFSPR gprc:$Rx, 4)
      AsmString = "mfrtcu $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 5) {
      // (MFSPR gprc:$Rx, 5)
      AsmString = "mfrtcl $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 17) {
      // (MFSPR gprc:$Rx, 17)
      AsmString = "mfdscr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 18) {
      // (MFSPR gprc:$Rx, 18)
      AsmString = "mfdsisr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 19) {
      // (MFSPR gprc:$Rx, 19)
      AsmString = "mfdar $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 990) {
      // (MFSPR gprc:$Rx, 990)
      AsmString = "mfsrr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 991) {
      // (MFSPR gprc:$Rx, 991)
      AsmString = "mfsrr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 28) {
      // (MFSPR gprc:$Rx, 28)
      AsmString = "mfcfar $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 29) {
      // (MFSPR gprc:$Rx, 29)
      AsmString = "mfamr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 48) {
      // (MFSPR gprc:$Rx, 48)
      AsmString = "mfpid $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 989) {
      // (MFSPR gprc:$Rx, 989)
      AsmString = "mftblo $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 988) {
      // (MFSPR gprc:$Rx, 988)
      AsmString = "mftbhi $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 536) {
      // (MFSPR gprc:$Rx, 536)
      AsmString = "mfdbatu $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 538) {
      // (MFSPR gprc:$Rx, 538)
      AsmString = "mfdbatu $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 540) {
      // (MFSPR gprc:$Rx, 540)
      AsmString = "mfdbatu $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 542) {
      // (MFSPR gprc:$Rx, 542)
      AsmString = "mfdbatu $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 537) {
      // (MFSPR gprc:$Rx, 537)
      AsmString = "mfdbatl $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 539) {
      // (MFSPR gprc:$Rx, 539)
      AsmString = "mfdbatl $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 541) {
      // (MFSPR gprc:$Rx, 541)
      AsmString = "mfdbatl $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 543) {
      // (MFSPR gprc:$Rx, 543)
      AsmString = "mfdbatl $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 528) {
      // (MFSPR gprc:$Rx, 528)
      AsmString = "mfibatu $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 530) {
      // (MFSPR gprc:$Rx, 530)
      AsmString = "mfibatu $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 532) {
      // (MFSPR gprc:$Rx, 532)
      AsmString = "mfibatu $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 534) {
      // (MFSPR gprc:$Rx, 534)
      AsmString = "mfibatu $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 529) {
      // (MFSPR gprc:$Rx, 529)
      AsmString = "mfibatl $\x01, 0";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 531) {
      // (MFSPR gprc:$Rx, 531)
      AsmString = "mfibatl $\x01, 1";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 533) {
      // (MFSPR gprc:$Rx, 533)
      AsmString = "mfibatl $\x01, 2";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 535) {
      // (MFSPR gprc:$Rx, 535)
      AsmString = "mfibatl $\x01, 3";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1018) {
      // (MFSPR gprc:$Rx, 1018)
      AsmString = "mfdccr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 1019) {
      // (MFSPR gprc:$Rx, 1019)
      AsmString = "mficcr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 981) {
      // (MFSPR gprc:$Rx, 981)
      AsmString = "mfdear $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 980) {
      // (MFSPR gprc:$Rx, 980)
      AsmString = "mfesr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 512) {
      // (MFSPR gprc:$Rx, 512)
      AsmString = "mfspefscr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 986) {
      // (MFSPR gprc:$Rx, 986)
      AsmString = "mftcr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 280) {
      // (MFSPR gprc:$RT, 280)
      AsmString = "mfasr $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 287) {
      // (MFSPR gprc:$RT, 287)
      AsmString = "mfpvr $\x01";
      break;
    }
    return false;
  case PPC::MFTB:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 269) {
      // (MFTB gprc:$Rx, 269)
      AsmString = "mftbu $\x01";
      break;
    }
    return false;
  case PPC::MFVRSAVE:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg())) {
      // (MFVRSAVE gprc:$rS)
      AsmString = "mfvrsave $\x01";
      break;
    }
    return false;
  case PPC::MTCRF8:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 255 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTCRF8 255, g8rc:$rA)
      AsmString = "mtcr $\x02";
      break;
    }
    return false;
  case PPC::MTDCR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 128) {
      // (MTDCR gprc:$Rx, 128)
      AsmString = "mtbr0 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 129) {
      // (MTDCR gprc:$Rx, 129)
      AsmString = "mtbr1 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 130) {
      // (MTDCR gprc:$Rx, 130)
      AsmString = "mtbr2 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 131) {
      // (MTDCR gprc:$Rx, 131)
      AsmString = "mtbr3 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 132) {
      // (MTDCR gprc:$Rx, 132)
      AsmString = "mtbr4 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 133) {
      // (MTDCR gprc:$Rx, 133)
      AsmString = "mtbr5 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 134) {
      // (MTDCR gprc:$Rx, 134)
      AsmString = "mtbr6 $\x01";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 135) {
      // (MTDCR gprc:$Rx, 135)
      AsmString = "mtbr7 $\x01";
      break;
    }
    return false;
  case PPC::MTFSF:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (MTFSF i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTFSFI crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFIo:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::CRRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (MTFSFIo crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTFSFo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::F8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (MTFSFo i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::MTMSR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSR gprc:$RS, 0)
      AsmString = "mtmsr $\x01";
      break;
    }
    return false;
  case PPC::MTMSRD:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 0) {
      // (MTMSRD gprc:$RS, 0)
      AsmString = "mtmsrd $\x01";
      break;
    }
    return false;
  case PPC::MTSPR:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1, gprc:$Rx)
      AsmString = "mtxer $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 17 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 17, gprc:$Rx)
      AsmString = "mtdscr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 18 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 18, gprc:$Rx)
      AsmString = "mtdsisr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 19 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 19, gprc:$Rx)
      AsmString = "mtdar $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 990 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 990, gprc:$Rx)
      AsmString = "mtsrr2 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 991 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 991, gprc:$Rx)
      AsmString = "mtsrr3 $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 28 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 28, gprc:$Rx)
      AsmString = "mtcfar $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 29 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 29, gprc:$Rx)
      AsmString = "mtamr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 48 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 48, gprc:$Rx)
      AsmString = "mtpid $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 284 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 284, gprc:$Rx)
      AsmString = "mttbl $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 285 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 285, gprc:$Rx)
      AsmString = "mttbu $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 989 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 989, gprc:$Rx)
      AsmString = "mttblo $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 988 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 988, gprc:$Rx)
      AsmString = "mttbhi $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 536 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 536, gprc:$Rx)
      AsmString = "mtdbatu 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 538 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 538, gprc:$Rx)
      AsmString = "mtdbatu 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 540 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 540, gprc:$Rx)
      AsmString = "mtdbatu 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 542 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 542, gprc:$Rx)
      AsmString = "mtdbatu 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 537 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 537, gprc:$Rx)
      AsmString = "mtdbatl 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 539 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 539, gprc:$Rx)
      AsmString = "mtdbatl 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 541 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 541, gprc:$Rx)
      AsmString = "mtdbatl 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 543 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 543, gprc:$Rx)
      AsmString = "mtdbatl 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 528 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 528, gprc:$Rx)
      AsmString = "mtibatu 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 530 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 530, gprc:$Rx)
      AsmString = "mtibatu 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 532 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 532, gprc:$Rx)
      AsmString = "mtibatu 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 534 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 534, gprc:$Rx)
      AsmString = "mtibatu 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 529 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 529, gprc:$Rx)
      AsmString = "mtibatl 0, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 531 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 531, gprc:$Rx)
      AsmString = "mtibatl 1, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 533 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 533, gprc:$Rx)
      AsmString = "mtibatl 2, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 535 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 535, gprc:$Rx)
      AsmString = "mtibatl 3, $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1018 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1018, gprc:$Rx)
      AsmString = "mtdccr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1019 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 1019, gprc:$Rx)
      AsmString = "mticcr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 981 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 981, gprc:$Rx)
      AsmString = "mtdear $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 980 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 980, gprc:$Rx)
      AsmString = "mtesr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 512 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 512, gprc:$Rx)
      AsmString = "mtspefscr $\x02";
      break;
    }
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 986 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (MTSPR 986, gprc:$Rx)
      AsmString = "mttcr $\x02";
      break;
    }
    return false;
  case PPC::MTVRSAVE:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg())) {
      // (MTVRSAVE gprc:$rS)
      AsmString = "mtvrsave $\x01";
      break;
    }
    return false;
  case PPC::NOR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not $\x01, $\x02";
      break;
    }
    return false;
  case PPC::NOR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (NOR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr $\x01, $\x02";
      break;
    }
    return false;
  case PPC::OR8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (OR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr. $\x01, $\x02";
      break;
    }
    return false;
  case PPC::QVFLOGICALb:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 0)
      AsmString = "qvfclr $\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 1) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 1)
      AsmString = "qvfand $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 4) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 4)
      AsmString = "qvfandc $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 5) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 5)
      AsmString = "qvfctfb $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 6) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 6)
      AsmString = "qvfxor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 7) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 7)
      AsmString = "qvfor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 8) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 8)
      AsmString = "qvfnor $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 9) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 9)
      AsmString = "qvfequ $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 10) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 10)
      AsmString = "qvfnot $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 13) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 13)
      AsmString = "qvforc $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 14) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 14)
      AsmString = "qvfnand $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::QBRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MI->getOperand(1).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(0).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 15) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 15)
      AsmString = "qvfset $\x01";
      break;
    }
    return false;
  case PPC::RLDCL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCL g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDCLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDCLo g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLDICL:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLDICLo:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi. $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi. $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return false;
  case PPC::RLWINM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWINMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi. $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi. $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return false;
  case PPC::RLWNM:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNM gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::RLWNMo:
    if (MI->getNumOperands() == 5 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0 &&
        MI->getOperand(4).isImm() &&
        MI->getOperand(4).getImm() == 31) {
      // (RLWNMo gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw. $\x01, $\x02, $\x03";
      break;
    }
    return false;
  case PPC::SC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SC 0)
      AsmString = "sc";
      break;
    }
    return false;
  case PPC::SUBF8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBF8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBF8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SUBFC8o:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (SUBFC8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc. $\x01, $\x03, $\x02";
      break;
    }
    return false;
  case PPC::SYNC:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (SYNC 1)
      AsmString = "lwsync";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (SYNC 2)
      AsmString = "ptesync";
      break;
    }
    return false;
  case PPC::TD:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 16, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 4, g8rc:$rA, g8rc:$rB)
      AsmString = "tdeq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 8, g8rc:$rA, g8rc:$rB)
      AsmString = "tdgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 24, g8rc:$rA, g8rc:$rB)
      AsmString = "tdne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 2, g8rc:$rA, g8rc:$rB)
      AsmString = "tdllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 1, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TD 31, g8rc:$rA, g8rc:$rB)
      AsmString = "tdu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TDI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 16, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 4, g8rc:$rA, s16imm:$imm)
      AsmString = "tdeqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 8, g8rc:$rA, s16imm:$imm)
      AsmString = "tdgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 24, g8rc:$rA, s16imm:$imm)
      AsmString = "tdnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 2, g8rc:$rA, s16imm:$imm)
      AsmString = "tdllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 1, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::G8RCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TDI 31, g8rc:$rA, s16imm:$imm)
      AsmString = "tdui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::TLBIE:
    if (MI->getNumOperands() == 2 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TLBIE R0, gprc:$RB)
      AsmString = "tlbie $\x02";
      break;
    }
    return false;
  case PPC::TLBRE2:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLBRE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbrehi $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (TLBRE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbrelo $\x01, $\x02";
      break;
    }
    return false;
  case PPC::TLBWE2:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (TLBWE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbwehi $\x01, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 1) {
      // (TLBWE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbwelo $\x01, $\x02";
      break;
    }
    return false;
  case PPC::TW:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 16, gprc:$rA, gprc:$rB)
      AsmString = "twlt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 4, gprc:$rA, gprc:$rB)
      AsmString = "tweq $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 8, gprc:$rA, gprc:$rB)
      AsmString = "twgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 24, gprc:$rA, gprc:$rB)
      AsmString = "twne $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 2, gprc:$rA, gprc:$rB)
      AsmString = "twllt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 1, gprc:$rA, gprc:$rB)
      AsmString = "twlgt $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (TW 31, gprc:$rA, gprc:$rB)
      AsmString = "twu $\x02, $\x03";
      break;
    }
    return false;
  case PPC::TWI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 16 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 16, gprc:$rA, s16imm:$imm)
      AsmString = "twlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 4, gprc:$rA, s16imm:$imm)
      AsmString = "tweqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 8, gprc:$rA, s16imm:$imm)
      AsmString = "twgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 24 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 24, gprc:$rA, s16imm:$imm)
      AsmString = "twnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 2, gprc:$rA, s16imm:$imm)
      AsmString = "twllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 1, gprc:$rA, s16imm:$imm)
      AsmString = "twlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 31 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::GPRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (TWI 31, gprc:$rA, s16imm:$imm)
      AsmString = "twui $\x02, $\xFF\x03\x03";
      break;
    }
    return false;
  case PPC::WAIT:
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0) {
      // (WAIT 0)
      AsmString = "wait";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 1) {
      // (WAIT 1)
      AsmString = "waitrsv";
      break;
    }
    if (MI->getNumOperands() == 1 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2) {
      // (WAIT 2)
      AsmString = "waitimpl";
      break;
    }
    return false;
  case PPC::XORI:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).getReg() == PPC::R0 &&
        MI->getOperand(1).getReg() == PPC::R0 &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XORI R0, R0, 0)
      AsmString = "xnop";
      break;
    }
    return false;
  case PPC::XVCPSGNDP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNDP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovdp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XVCPSGNSP:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg()) {
      // (XVCPSGNSP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovsp $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XXPERMDI:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 0)
      AsmString = "xxmrghd $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(2).getReg()) &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 3)
      AsmString = "xxmrgld $\x01, $\x02, $\x03";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isReg() &&
        MI->getOperand(2).getReg() == MI->getOperand(1).getReg() &&
        MI->getOperand(3).isImm() &&
        MI->getOperand(3).getImm() == 2) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::XXPERMDIs:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 3) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isReg() &&
        MRI.getRegClass(PPC::VSRCRegClassID).contains(MI->getOperand(0).getReg()) &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::VSFRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 2) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return false;
  case PPC::gBC:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBC 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzf $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfa $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCAat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bca+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bca- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCCTR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 12, crbitrc:$bi, 0)
      AsmString = "btctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 4, crbitrc:$bi, 0)
      AsmString = "bfctr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 14, crbitrc:$bi, 0)
      AsmString = "btctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 6, crbitrc:$bi, 0)
      AsmString = "bfctr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 15, crbitrc:$bi, 0)
      AsmString = "btctr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTR 7, crbitrc:$bi, 0)
      AsmString = "bfctr+ $\x02";
      break;
    }
    return false;
  case PPC::gBCCTRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 12, crbitrc:$bi, 0)
      AsmString = "btctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 4, crbitrc:$bi, 0)
      AsmString = "bfctrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 14, crbitrc:$bi, 0)
      AsmString = "btctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 6, crbitrc:$bi, 0)
      AsmString = "bfctrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 15, crbitrc:$bi, 0)
      AsmString = "btctrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCCTRL 7, crbitrc:$bi, 0)
      AsmString = "bfctrl+ $\x02";
      break;
    }
    return false;
  case PPC::gBCL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCL 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzfl $\x02, $\xFF\x03\x01";
      break;
    }
    return false;
  case PPC::gBCLA:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg())) {
      // (gBCLA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfla $\x02, $\xFF\x03\x02";
      break;
    }
    return false;
  case PPC::gBCLAat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcla+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcla- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCLR:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 12, crbitrc:$bi, 0)
      AsmString = "btlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 4, crbitrc:$bi, 0)
      AsmString = "bflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 14, crbitrc:$bi, 0)
      AsmString = "btlr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 6, crbitrc:$bi, 0)
      AsmString = "bflr- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 15, crbitrc:$bi, 0)
      AsmString = "btlr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 7, crbitrc:$bi, 0)
      AsmString = "bflr+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 8, crbitrc:$bi, 0)
      AsmString = "bdnztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 0, crbitrc:$bi, 0)
      AsmString = "bdnzflr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 10, crbitrc:$bi, 0)
      AsmString = "bdztlr $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLR 2, crbitrc:$bi, 0)
      AsmString = "bdzflr $\x02";
      break;
    }
    return false;
  case PPC::gBCLRL:
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 12 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 12, crbitrc:$bi, 0)
      AsmString = "btlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 4 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 4, crbitrc:$bi, 0)
      AsmString = "bflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 14 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 14, crbitrc:$bi, 0)
      AsmString = "btlrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 6 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 6, crbitrc:$bi, 0)
      AsmString = "bflrl- $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 15 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 15, crbitrc:$bi, 0)
      AsmString = "btlrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 7 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 7, crbitrc:$bi, 0)
      AsmString = "bflrl+ $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 8 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 8, crbitrc:$bi, 0)
      AsmString = "bdnztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 0 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 0, crbitrc:$bi, 0)
      AsmString = "bdnzflrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 10 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 10, crbitrc:$bi, 0)
      AsmString = "bdztlrl $\x02";
      break;
    }
    if (MI->getNumOperands() == 3 &&
        MI->getOperand(0).isImm() &&
        MI->getOperand(0).getImm() == 2 &&
        MI->getOperand(1).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(1).getReg()) &&
        MI->getOperand(2).isImm() &&
        MI->getOperand(2).getImm() == 0) {
      // (gBCLRL 2, crbitrc:$bi, 0)
      AsmString = "bdzflrl $\x02";
      break;
    }
    return false;
  case PPC::gBCLat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcl+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCLat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcl- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  case PPC::gBCat:
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 3 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bc+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MI->getNumOperands() == 4 &&
        MI->getOperand(1).isImm() &&
        MI->getOperand(1).getImm() == 2 &&
        MI->getOperand(2).isReg() &&
        MRI.getRegClass(PPC::CRBITRCRegClassID).contains(MI->getOperand(2).getReg())) {
      // (gBCat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bc- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return false;
  }

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t')      OS << '\t';
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void PPCInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printBranchOperand(MI, OpIdx, OS);
    break;
  case 1:
    printAbsBranchOperand(MI, OpIdx, OS);
    break;
  case 2:
    printS16ImmOperand(MI, OpIdx, OS);
    break;
  case 3:
    printU16ImmOperand(MI, OpIdx, OS);
    break;
  case 4:
    printU6ImmOperand(MI, OpIdx, OS);
    break;
  case 5:
    printU5ImmOperand(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
